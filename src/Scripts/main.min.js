!function(){"use strict";angular.module("bikeBuilder",["mgcrea.ngStrap"]).value("version","0.1")}(),function(){"use strict";angular.module("bikeBuilder").controller("FlowCtrl",["$scope","$rootScope","Parts","SvgParts",function($scope,$rootScope,Parts,SvgParts){function partDataFetched(data){ctrl.partSections=data}function partSelected(event,sectionName,selectedPart,selectedVariant){updateSvgPart(selectedVariant),Parts.updateSelectedPart(sectionName,selectedPart),$rootScope.$broadcast("update:selected",sectionName,selectedPart,selectedVariant)}function updateSvgPart(selectedVariant){selectedVariant.colors&&_.each(selectedVariant.colors,function(value,key){SvgParts.updateOne(key,{color:value})})}var ctrl=this;$scope.$on("part:selected",partSelected),Parts.fetch().then(partDataFetched)}])}(),function(){"use strict";angular.module("bikeBuilder").controller("PreviewCtrl",["SvgParts","$scope",function(SvgParts,$scope){function getPart(key){return ctrl.SvgDataReady?SvgParts.getOne(key):{}}function dataFetched(){ctrl.SvgDataReady=!0}function updateActiveSvgPart(event,key){SvgParts.updateAll({selected:!1}),SvgParts.updateOne(key,{selected:!0})}var ctrl=this;ctrl.getPart=getPart,$scope.$on("svgPart:clicked",updateActiveSvgPart),SvgParts.fetch().then(dataFetched)}])}(),function(){"use strict";angular.module("bikeBuilder").controller("SummaryCtrl",["$scope","Parts",function($scope,Parts){function partDataFetched(data){ctrl.partSections=data}function updateSelectedParts(event,sectionName,selectedPart,selectedVariant){ctrl.selectedPartSections[sectionName]={selectedPart:selectedPart,selectedVariant:selectedVariant}}var ctrl=this;ctrl.selectedPartSections={},Parts.fetch().then(partDataFetched),$scope.$on("update:selected",updateSelectedParts)}])}(),function(){"use strict";angular.module("bikeBuilder").directive("part",function(){return{restrict:"A",scope:{model:"=part",sectionName:"="},replace:!0,templateUrl:"part.tpl.html",link:function(scope){function updateSelectedPart(){scope.$emit("part:selected",scope.sectionName,scope.model,scope.selectedVariant)}function setSelectedVariant(variant){scope.selectedVariant=variant,scope.model.selected&&updateSelectedPart()}scope.updateSelectedPart=updateSelectedPart,scope.selectedVariant=angular.copy(scope.model.variants[0]),scope.setSelectedVariant=setSelectedVariant}}})}(),function(){"use strict";angular.module("bikeBuilder").directive("partSection",["$rootScope",function(){return{restrict:"A",scope:{name:"=partSection",type:"=partType",parts:"="},replace:!0,templateUrl:"part.section.tpl.html",link:function(){}}}])}(),function(){"use strict";angular.module("bikeBuilder").directive("scrollBind",["$q","scroll",function($q,scroll){return{restrict:"A",scope:!0,link:function(scope,element,attrs){function bindValuesToScroll(scopeKeysToUpdate){0!==scopeKeysToUpdate.length&&scroll.bind(getUpdateValuesFn(scopeKeysToUpdate))}function getUpdateValuesFn(scopeKeysToUpdate){return function(scrollTop){_.each(scopeKeysToUpdate,function(scopeKey){scope[scopeKey]=scrollTop}),scope.$apply()}}var callback;if(_.isFunction(attrs.scollBind))return callback=attrs.scrollBind,void scroll.bind(callback);if(attrs.updateScopeVals){var updateScopeVals=attrs.updateScopeVals.replace(/'/gi,'"');try{var json=JSON.parse(updateScopeVals);bindValuesToScroll(json)}catch(e){bindValuesToScroll([updateScopeVals])}}}}}])}(),function(){"use strict";angular.module("bikeBuilder").directive("selectPartButton",function(){return{restrict:"A",scope:!0,link:function(scope){function selectPart(){}scope.selectPart=selectPart}}})}(),function(){"use strict";angular.module("bikeBuilder").directive("showSpinner",["$templateCache","$compile",function($templateCache,$compile){var idPostFix=0;return{restrict:"A",scope:!0,priority:1,link:function(scope,element,attrs){function getBool(attr){return!_.isUndefined(attr)&&"true"===attr.toString().toLowerCase()}function getSpinnerElement(){var tpl=$templateCache.get("spinner.tpl.html"),linkFn=$compile(tpl);return linkFn(scope)}function insertBeforeElement(insertEl,siblingEl){var parentEl=siblingEl.parentNode;parentEl.insertBefore(insertEl,siblingEl)}function removeElement(el){el.remove()}var showSpinner=getBool(attrs.showSpinner);if(showSpinner!==!1){scope.spinnerKeyPostFix=idPostFix,idPostFix++;var spinnerElement=getSpinnerElement();insertBeforeElement(spinnerElement[0],element[0]);var removeObserve=attrs.$observe("showSpinner",function(val){getBool(val)||(removeElement(spinnerElement),removeObserve())})}}}}])}(),function(){"use strict";angular.module("bikeBuilder").directive("summaryItem",function(){return{restrict:"A",scope:{selectedPart:"=summaryItem",sectionName:"=",selectedVariant:"="},replace:!0,templateUrl:"summary.item.tpl.html"}})}(),function(){"use strict";angular.module("bikeBuilder").directive("variantPicker",function(){return{restrict:"A",replace:!0,scope:{variants:"=variantPicker",selectedVariant:"=",basePartImgUrl:"@"},templateUrl:"variant.picker.tpl.html"}})}(),function(){"use strict";angular.module("bikeBuilder").service("Parts",["DataCollection",function(DataCollection){function Parts(){DataCollection.apply(this,arguments)}function processData(data){return data}function updateSelectedPart(sectionName,selectedPart){var section=this.items[sectionName];section&&_.each(section.parts,function(part){part.selected=part.name==selectedPart.name})}return Parts.prototype=new DataCollection,Parts.prototype.processData=processData,Parts.prototype.updateSelectedPart=updateSelectedPart,new Parts("scripts/partdata.json")}])}(),function(){"use strict";angular.module("bikeBuilder").service("scroll",["Bindable",function(Bindable){function attachScroll(){throttledHandleScroll=_.throttle(handleScroll,SCROLL_THROTTLE),window.addEventListener("scroll",throttledHandleScroll)}function detachScroll(){window.removeEventListener("scroll",throttledHandleScroll)}function getScrollTop(){var scrollTop=window.document.documentElement.scrollTop;return 0===scrollTop&&(scrollTop=window.document.body.scrollTop),scrollTop}function handleScroll(){var scrollTop=getScrollTop();base.invoke(scrollTop)}var base=new Bindable;base.onAttach=attachScroll,base.onDetach=detachScroll;var throttledHandleScroll,SCROLL_THROTTLE=100;return{bind:base.bind}}])}(),function(){"use strict";angular.module("bikeBuilder").service("SvgParts",["DataCollection","utils","SvgPart","Path","LineGroup",function(DataCollection,utils,SvgPart,Path,LineGroup){function SVGParts(){DataCollection.apply(this,arguments)}function addSvgClasses(data){var self=this;return _.each(data,function(dataInstance,key){self.add(key,dataInstance)}),this.items}function addSvgClass(key,props){if(!this.fetched)return null;if(!key||!props.type||!props.data)return null;var existing=this.getOne(key);if(existing)return null;var Class=getClass(props.type);return Class?(this.items[key]=new Class(key,props),this.items):null}function getClass(key){return classes[key]||null}SVGParts.prototype=new DataCollection,SVGParts.prototype.processData=addSvgClasses,SVGParts.prototype.add=addSvgClass,utils.inherit(Path,SvgPart),utils.inherit(LineGroup,SvgPart);var classes={Path:Path,LineGroup:LineGroup};return new SVGParts("scripts/svgdata.json")}])}(),function(){"use strict";angular.module("bikeBuilder").service("utils",function(){function inherit(child,base,props){return child.prototype=_.create(base.prototype,_.assign({_super:base.prototype,callSuperConstructor:function(ctx,args){base.apply(ctx,args)},constructor:child},props)),child}return{inherit:inherit}})}(),angular.module("bikeBuilder").run(["$templateCache",function($templateCache){$templateCache.put("line.group.tpl.html",'<g id={{model.key}} ng-click="handleClicked(model.key)" ng-class="[model.key, model.active ? \'active\' : \'\', model.color ? \'has-color\' : \'\']">\r\n    <line svg-line ng-repeat="line in model.lines" color="model.color" line-data="line.data"></line>\r\n</g>'),$templateCache.put("line.tpl.html",'<line fill="none" ng-style="style"\r\n      ng-attr-x1="{{data[0]}}" ng-attr-y1="{{data[1]}}" ng-attr-x2="{{data[2]}}" ng-attr-y2="{{data[3]}}"\r\n      ng-attr-stroke-dasharray="{{pathLength}}" ng-attr-stroke-dashoffset="{{pathLength}}" />\r\n'),$templateCache.put("part.section.tpl.html",'<div class="part-section">\r\n    <h2 class="part-section-name">{{name}}</h2>\r\n    <div part="part" section-name="name" ng-repeat="part in parts">\r\n    </div>\r\n</div>'),$templateCache.put("part.tpl.html",'<div class="part">\r\n    <h3 class="part-name">{{model.name}}</h3>\r\n    <div class="btn-group variant-buttons">\r\n        <a class="btn btn-default variant-button" ng-class="{\'active\': variant.name == selectedVariant.name }" ng-click="setSelectedVariant(variant)" ng-repeat="variant in model.variants">{{variant.name}}</a>\r\n    </div>\r\n    <div variant-picker="model.variants" data-selected-variant="selectedVariant" data-base-part-img-url="content/images/parts"></div>\r\n    <a class="btn part-select-btn btn-lg btn-default" ng-click="updateSelectedPart()" ng-class="{\'active\': model.selected}">{{model.selected ? \'Selected\' : \'Select this part\'}}</a>\r\n</div>'),$templateCache.put("path.tpl.html",'<path id={{model.key}} fill="none" ng-click="handleClicked(model.key)" ng-class="[model.type, model.selected ? \'selected\':\'\', model.color ? \'has-color\':\'\']"\r\n      ng-style="style" ng-attr-stroke-dasharray="{{pathLength}}" ng-attr-stroke-dashoffset="{{pathLength}}" ng-attr-d="{{model.data}}" />'),$templateCache.put("spinner.tpl.html",'<div class="spinner">\r\n    <h3 class="load-text">Loading...</h3>\r\n    <?xml version="1.0" encoding="utf-8" ?>\r\n    <svg id="spinner-svg{{spinnerKeyPostFix}}" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\r\n         viewBox="204 89.3 243.3 243.3" enable-background="new 204 89.3 243.3 243.3" xml:space="preserve">\r\n    <g id="spinner-wrapper{{spinnerKeyPostFix}}"><g id="spinner-wheel{{spinnerKeyPostFix}}">\r\n    <path id="spinner-rim{{spinnerKeyPostFix}}" fill="none" d="M259.6,125.2c50.2-39,119.1-27.8,155.4,20.8c36.2,48.5,22.1,114.4-24.1,153.6\r\n		c-29.5,25-108.9,36.5-153.5-20.9C206.1,238.4,213.9,160.7,259.6,125.2z M248.2,270.7c38.3,49.2,90.8,49.7,133.1,18\r\n		s53.2-92.4,22.1-134c-31.1-41.7-86.4-55.7-134.8-16.8C224,173.7,221.3,236.1,248.2,270.7z" />\r\n    <g id="spinner-spokes{{spinnerKeyPostFix}}">\r\n    <line fill="none" x1="416.9" y1="180.9" x2="338.7" y2="203.9" />\r\n    <line fill="none" x1="338.7" y1="203.9" x2="386" y2="136.3" />\r\n    <line fill="none" x1="398.7" y1="150.7" x2="343.2" y2="215.1" />\r\n    <line fill="none" x1="409.6" y1="164.1" x2="329.2" y2="199.8" />\r\n    <line fill="none" x1="420.1" y1="199.8" x2="343.2" y2="215.1" />\r\n    <line fill="none" x1="420.9" y1="217.9" x2="339.8" y2="221.9" />\r\n    <line fill="none" x1="416.9" y1="236.4" x2="340.9" y2="207.4" />\r\n    <line fill="none" x1="410.5" y1="253.9" x2="342.3" y2="211" />\r\n    <line fill="none" x1="401" y1="269.3" x2="334.2" y2="226.4" />\r\n    <line fill="none" x1="388.3" y1="282.9" x2="332" y2="227.6" />\r\n    <line fill="none" x1="356.1" y1="303.2" x2="339.8" y2="221.9" />\r\n    <line fill="none" x1="340.9" y1="221.9" x2="373.8" y2="293.9" />\r\n    <line fill="none" x1="320.9" y1="310.5" x2="322.2" y2="226.4" />\r\n    <line fill="none" x1="300.7" y1="307.8" x2="327" y2="227.6" />\r\n    <line fill="none" x1="282.3" y1="300.4" x2="332" y2="227.6" />\r\n    <line fill="none" x1="268.1" y1="291.1" x2="315.4" y2="211" />\r\n    <line fill="none" x1="254.2" y1="277.8" x2="315.4" y2="220.5" />\r\n    <line fill="none" x1="244.1" y1="264.8" x2="319" y2="224" />\r\n    <line fill="none" x1="319" y1="224" x2="338.7" y2="308.6" />\r\n    <line fill="none" x1="235.5" y1="246.3" x2="319.5" y2="226.4" />\r\n    <line fill="none" x1="231.8" y1="229.5" x2="319" y2="204.3" />\r\n    <line fill="none" x1="231.1" y1="209.4" x2="316.8" y2="207.4" />\r\n    <line fill="none" x1="234.3" y1="190.7" x2="316" y2="217.9" />\r\n    <line fill="none" x1="241" y1="172.5" x2="315.5" y2="215.1" />\r\n    <line fill="none" x1="252.2" y1="154.4" x2="319" y2="204.3" />\r\n    <line fill="none" x1="264.8" y1="141.1" x2="323.8" y2="200.8" />\r\n    <line fill="none" x1="296.2" y1="121.4" x2="319.5" y2="204.1" />\r\n    <line fill="none" x1="315.4" y1="116" x2="330.3" y2="199.3" />\r\n    <line fill="none" x1="334.7" y1="116" x2="338.7" y2="203.9" />\r\n    <line fill="none" x1="352.3" y1="118.2" x2="319" y2="204.3" />\r\n    <line fill="none" x1="370.2" y1="125.5" x2="330.3" y2="199.3" />\r\n            </g>\r\n    <path id="spinner-tire{{spinnerKeyPostFix}}" fill="none" d="M259.6,125.2c50.2-39,119.1-27.8,155.4,20.8c36.2,48.5,22.1,114.4-24.1,153.6\r\n		c-29.5,25-108.9,36.5-153.5-20.9C206.1,238.4,213.9,160.7,259.6,125.2z M231.1,285.9c35.4,52.1,115,53.5,162.8,19.5\r\n		c48.2-34.3,65.4-116.9,26.1-164.1C378.8,91.6,318,73.1,252.2,121.5C208.4,153.6,191.6,227.6,231.1,285.9z" />\r\n    <path id="spinner-hub{{spinnerKeyPostFix}}" fill="none" d="M315.4,213.7c0-2.3,0.7-13.9,13.5-13.9c7.4,0,13.5,6.2,13.5,13.9s-6.1,13.9-13.6,13.9\r\n		C321.4,227.6,315.4,221.5,315.4,213.7z M323,218l-4.1,0.6l3.4,3.2L323,218z M333.8,216.9l0.7,4.1l3.1-3.5L333.8,216.9z M328,219.9\r\n		l-1.3,4l4.3-0.7L328,219.9z M318.7,211.2l-0.4,4.1l3.9-2.5L318.7,211.2z M323.9,208.3l1.3-3.9l-4.4,1.6L323.9,208.3z M334.5,205.7\r\n		l-5.3-2.9l1.7,4.3L334.5,205.7z M334.8,211.3l4,1.1l-1.8-4.3L334.8,211.3z" />\r\n        </g>\r\n        </g>\r\n    </svg>\r\n</div>'),$templateCache.put("summary.item.tpl.html",'<li ng-show="selectedPart" class="summary-item">\r\n    <span class="summary-section-name">{{sectionName}}:&nbsp;</span>\r\n    <span class="summary-part-name">{{selectedPart.name}}</span>\r\n    <span class="summary-variant-color" ng-repeat="color in selectedVariant.colors" ng-style="{\'background\':color}">&nbsp;</span>\r\n</li>'),$templateCache.put("variant.picker.tpl.html",'<div class="variant-picker">\r\n    <div class="images-stack">\r\n        <img class="variant-image" ng-src="{{basePartImgUrl + \'/\' + variant.imageUrl}}" ng-class="{\'selected\': variant.name == selectedVariant.name }" ng-repeat="variant in variants" />\r\n    </div>\r\n</div>')}]),function(){"use strict";angular.module("bikeBuilder").directive("svgLineGroup",function(){return{restrict:"A",replace:!0,scope:{model:"="},templateNamespace:"svg",templateUrl:"line.group.tpl.html",link:function(scope){function handleClicked(key){scope.$emit("svgPart:clicked",key)}scope.handleClicked=handleClicked}}})}(),function(){"use strict";angular.module("bikeBuilder").directive("svgLine",["SvgAnimationDirective",function(SvgAnimationDirective){return{restrict:"A",replace:!0,scope:{color:"=",data:"=lineData"},templateNamespace:"svg",templateUrl:"line.tpl.html",link:function(scope,element){function loadAnimation(){scope.pathLength=base.getLength(),scope.style=base.getStyle(scope.color,!0),scope.$apply()}function updateColor(){scope.style=base.getStyle(scope.color,!1)}var el=element[0],base=new SvgAnimationDirective(el,"line",{msPrUnit:20,data:scope.data});scope.$on("svgRootLoaded",loadAnimation),scope.$watch("color",updateColor)}}}])}(),function(){"use strict";angular.module("bikeBuilder").directive("svgPath",["SvgAnimationDirective",function(SvgAnimationDirective){return{restrict:"A",replace:!0,scope:{model:"="},templateNamespace:"svg",templateUrl:"path.tpl.html",link:function(scope,element){function handleClicked(key){scope.$emit("svgPart:clicked",key)}function loadAnimation(){scope.pathLength=base.getLength(),scope.style=base.getStyle(scope.model.color,!0),scope.$apply()}function updateColor(){scope.style=base.getStyle(scope.model.color,!1)}var el=element[0],base=new SvgAnimationDirective(el,"path",{data:scope.model.data});scope.$on("svgRootLoaded",loadAnimation),scope.handleClicked=handleClicked,scope.$watch("model.color",updateColor)}}}])}(),function(){"use strict";angular.module("bikeBuilder").directive("svgRoot",function(){return{restrict:"A",scope:!0,link:function(scope,element){var el=element[0];el.addEventListener("load",function(){scope.$broadcast("svgRootLoaded"),scope.svgRootLoaded=!0,scope.$apply()})}}})}(),function(){"use strict";angular.module("bikeBuilder").service("Bindable",function(){return function(){function bind(callback){self._callbacks.push(callback);var index=self._callbacks.length-1;return 0===index&&self.onAttach(),self.onBound(),function(){self._callbacks.splice(index,1),self.onUnBound(),0===self._callbacks.length&&self.onDetach()}}function invoke(){var args=arguments;_.each(self._callbacks,function(callback){callback.apply(null,args)})}var self=this;this.onAttach=angular.noop,this.onBound=angular.noop,this.onUnBound=angular.noop,this.onDetach=angular.noop,this._callbacks=[],this.bind=bind,this.invoke=invoke}})}(),function(){"use strict";angular.module("bikeBuilder").factory("DataCollection",["$q","$timeout","$http",function($q,$timeout,$http){function fetch(){var self=this;return this.fetchedDfd=this.fetchedDfd||$q.defer(),this.fetched?(this.fetchedDfd=$q.defer(),this.fetchedDfd.resolve()):this.fetching||(this.fetching=!0,$http.get(this.filePath).success(function(data){self.fetching=!1,self.fetched=!0,self.items=self.processData(data),self.fetchedDfd.resolve(self.items)})),this.fetchedDfd.promise}function processData(data){return data}function getOne(key){if(!this.fetched)return null;var item=this.items[key];return item?item:null}function getAll(){return this.fetched?this.items:null}function updateOne(key,props){if(!this.fetched)return null;var item=this.getOne(key);return item?_.assign(item,props):null}function updateAll(props){return this.fetched?(_.each(this.items,function(item){_.assign(item,props)}),this.items):null}var DataCollection=function(filePath){this.items={},this.fetched=!1,this.fetching=!1,this.filePath=filePath};return DataCollection.prototype.fetch=fetch,DataCollection.prototype.getOne=getOne,DataCollection.prototype.getAll=getAll,DataCollection.prototype.updateOne=updateOne,DataCollection.prototype.updateAll=updateAll,DataCollection.prototype.processData=processData,DataCollection}])}(),function(){"use strict";angular.module("bikeBuilder").service("SvgAnimationDirective",function(){return function(el,type,options){function getLength(){switch(self.type){case"path":return getPathLength();case"line":return getLineLength();default:return null}}function getDuration(length){return _.isUndefined(length)&&(length=getLength()),Math.min(length*self.msPrUnit,self.maxMs)+"ms"}function getAnimation(duration,shouldRepeat){_.isUndefined(duration)&&(duration=getDuration());var repeat=shouldRepeat?"infinite":"";return"dash "+duration+" linear forwards "+repeat}function getPathLength(){return self.el.getTotalLength()}function getLineLength(){var x=Math.abs(self.data[0]-self.data[2]),y=Math.abs(self.data[1]-self.data[3]);return Math.sqrt(Math.pow(x,2)+Math.pow(y,2))}function getStyle(color,shouldAnimate){var style={},colorAttr="line"==type?"stroke":"fill";if(style[colorAttr]=color,shouldAnimate){var animation=getAnimation(getDuration(getLength()),!1);style["-webkit-animation"]=animation,style.animation=animation}return style}var self=this;options=options||{},this.el=el,this.type=type,this.data=options.data||{},this.msPrUnit=options.msPrUnit||4.16,this.maxMs=options.maxMs||1e4,this.getAnimation=getAnimation,this.getDuration=getDuration,this.getLength=getLength,this.getStyle=getStyle}})}(),function(){"use strict";angular.module("bikeBuilder").service("LineGroup",function(){function Line(lineData){this.data=lineData.split(",")}function LineGroup(){this.callSuperConstructor(this,arguments);var linesDataArr=this.data.split("|");this.lines=[];var self=this;_.each(linesDataArr,function(lineData){self.lines.push(new Line(lineData))})}return LineGroup})}(),function(){"use strict";angular.module("bikeBuilder").service("Path",function(){return function(){this.callSuperConstructor(this,arguments)}})}(),function(){"use strict";angular.module("bikeBuilder").service("SvgPart",function(){return function(key,props){props=props||{},props.key=key,_.assign(this,props)}})}();
//# sourceMappingURL=data:application/json;base64,