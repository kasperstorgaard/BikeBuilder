!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,i=arguments[0],a="["+(e?e+":":"")+i+"] ",o=arguments[1],s=arguments,u=function(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof e?"undefined":"string"!=typeof e?JSON.stringify(e):e};for(n=a+o.replace(/\{\d+\}/g,function(e){var t,n=+e.slice(1,-1);return n+2<s.length?(t=s[n+2],"function"==typeof t?t.toString().replace(/ ?\{[\s\S]*$/,""):"undefined"==typeof t?"undefined":"string"!=typeof t?U(t):t):e}),n=n+"\nhttp://errors.angularjs.org/1.3.0-rc.2/"+(e?e+"/":"")+i,r=2;r<arguments.length;r++)n=n+(2==r?"?":"&")+"p"+(r-2)+"="+encodeURIComponent(u(arguments[r]));return new t(n)}}function i(e){if(null==e||S(e))return!1;var t=e.length;return 1===e.nodeType&&t?!0:b(e)||Qr(e)||0===t||"number"==typeof t&&t>0&&t-1 in e}function a(e,t,n){var r,o;if(e)if(k(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(Qr(e)||i(e)){var s="object"!=typeof e;for(r=0,o=e.length;o>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==a)e.forEach(t,n,e);else for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);return e}function o(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t.sort()}function s(e,t,n){for(var r=o(e),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function u(e){return function(t,n){e(n,t)}}function l(){return++Kr}function c(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function f(e){for(var t=e.$$hashKey,n=1,r=arguments.length;r>n;n++){var i=arguments[n];if(i)for(var a=Object.keys(i),o=0,s=a.length;s>o;o++){var u=a[o];e[u]=i[u]}}return c(e,t),e}function d(e){return parseInt(e,10)}function p(e,t){return f(new(f(function(){},{prototype:e})),t)}function h(){}function $(e){return e}function g(e){return function(){return e}}function m(e){return"undefined"==typeof e}function v(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function b(e){return"string"==typeof e}function w(e){return"number"==typeof e}function x(e){return"[object Date]"===zr.call(e)}function k(e){return"function"==typeof e}function C(e){return"[object RegExp]"===zr.call(e)}function S(e){return e&&e.window===e}function D(e){return e&&e.$evalAsync&&e.$watch}function A(e){return"[object File]"===zr.call(e)}function E(e){return"[object Blob]"===zr.call(e)}function T(e){return"boolean"==typeof e}function M(e){return e&&k(e.then)}function O(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function V(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function _(e){return Nr(e.nodeName||e[0].nodeName)}function N(e,t,n){var r=[];return a(e,function(e,i,a){r.push(t.call(n,e,i,a))}),r}function F(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),t}function I(e,t,n,r){if(S(e)||D(e))throw Wr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");if(t){if(e===t)throw Wr("cpi","Can't copy! Source and destination are identical.");if(n=n||[],r=r||[],y(e)){var i=n.indexOf(e);if(-1!==i)return r[i];n.push(e),r.push(t)}var o;if(Qr(e)){t.length=0;for(var s=0;s<e.length;s++)o=I(e[s],null,n,r),y(e[s])&&(n.push(e[s]),r.push(o)),t.push(o)}else{var u=t.$$hashKey;Qr(t)?t.length=0:a(t,function(e,n){delete t[n]});for(var l in e)e.hasOwnProperty(l)&&(o=I(e[l],null,n,r),y(e[l])&&(n.push(e[l]),r.push(o)),t[l]=o);c(t,u)}}else if(t=e,e)if(Qr(e))t=I(e,[],n,r);else if(x(e))t=new Date(e.getTime());else if(C(e))t=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),t.lastIndex=e.lastIndex;else if(y(e)){var f=Object.create(Object.getPrototypeOf(e));t=I(e,f,n,r)}return t}function j(e,t){if(Qr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var i in e)("$"!==i.charAt(0)||"$"!==i.charAt(1))&&(t[i]=e[i])}return t||e}function P(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var r,i,a,o=typeof e,s=typeof t;if(o==s&&"object"==o){if(!Qr(e)){if(x(e))return x(t)?P(e.getTime(),t.getTime()):!1;if(C(e)&&C(t))return e.toString()==t.toString();if(D(e)||D(t)||S(e)||S(t)||Qr(t))return!1;a={};for(i in e)if("$"!==i.charAt(0)&&!k(e[i])){if(!P(e[i],t[i]))return!1;a[i]=!0}for(i in t)if(!a.hasOwnProperty(i)&&"$"!==i.charAt(0)&&t[i]!==n&&!k(t[i]))return!1;return!0}if(!Qr(t))return!1;if((r=e.length)==t.length){for(i=0;r>i;i++)if(!P(e[i],t[i]))return!1;return!0}}return!1}function R(e,t,n){return e.concat(Ur.call(t,n))}function q(e,t){return Ur.call(e,t||0)}function H(e,t){var n=arguments.length>2?q(arguments,2):[];return!k(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,n.concat(Ur.call(arguments,0))):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function L(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:S(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":D(r)&&(i="$SCOPE"),i}function U(e,t){return"undefined"==typeof e?n:JSON.stringify(e,L,t?"  ":null)}function B(e){return b(e)?JSON.parse(e):e}function z(e){e=qr(e).clone();try{e.empty()}catch(t){}var n=3,r=qr("<div>").append(e).html();try{return e[0].nodeType===n?Nr(r):r.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Nr(t)})}catch(t){return Nr(r)}}function W(e){try{return decodeURIComponent(e)}catch(t){}}function Y(e){var t,n,r={};return a((e||"").split("&"),function(e){if(e&&(t=e.replace(/\+/g,"%20").split("="),n=W(t[0]),v(n))){var i=v(t[1])?W(t[1]):!0;Fr.call(r,n)?Qr(r[n])?r[n].push(i):r[n]=[r[n],i]:r[n]=i}}),r}function K(e){var t=[];return a(e,function(e,n){Qr(e)?a(e,function(e){t.push(Q(n,!0)+(e===!0?"":"="+Q(e,!0)))}):t.push(Q(n,!0)+(e===!0?"":"="+Q(e,!0)))}),t.length?t.join("&"):""}function G(e){return Q(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function Q(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function J(e,t){var n,r,i=Zr.length;for(e=qr(e),r=0;i>r;++r)if(n=Zr[r]+t,b(n=e.attr(n)))return n;return null}function X(e,t){var n,r,i={};a(Zr,function(t){var i=t+"app";!n&&e.hasAttribute&&e.hasAttribute(i)&&(n=e,r=e.getAttribute(i))}),a(Zr,function(t){var i,a=t+"app";!n&&(i=e.querySelector("["+a.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(a))}),n&&(i.strictDi=null!==J(n,"strict-di"),t(n,r?[r]:[],i))}function Z(n,r,i){y(i)||(i={});var o={strictDi:!1};i=f(o,i);var s=function(){if(n=qr(n),n.injector()){var e=n[0]===t?"document":z(n);throw Wr("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var a=qt(r,i.strictDi);return a.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),a},u=/^NG_ENABLE_DEBUG_INFO!/,l=/^NG_DEFER_BOOTSTRAP!/;return e&&u.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(u,"")),e&&!l.test(e.name)?s():(e.name=e.name.replace(l,""),void(Yr.resumeBootstrap=function(e){a(e,function(e){r.push(e)}),s()}))}function et(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function tt(e){return Yr.element(e).injector().get("$$testability")}function nt(e,t){return t=t||"_",e.replace(ei,function(e,n){return(n?t:"")+e.toLowerCase()})}function rt(){var t;ti||(Hr=e.jQuery,Hr&&Hr.fn.on?(qr=Hr,f(Hr.fn,{scope:gi.scope,isolateScope:gi.isolateScope,controller:gi.controller,injector:gi.injector,inheritedData:gi.inheritedData}),t=Hr.cleanData,Hr.cleanData=function(e){var n;if(Gr)Gr=!1;else for(var r,i=0;null!=(r=e[i]);i++)n=Hr._data(r,"events"),n&&n.$destroy&&Hr(r).triggerHandler("$destroy");t(e)}):qr=vt,Yr.element=qr,ti=!0)}function it(e,t,n){if(!e)throw Wr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function at(e,t,n){return n&&Qr(e)&&(e=e[e.length-1]),it(k(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function ot(e,t){if("hasOwnProperty"===e)throw Wr("badname","hasOwnProperty is not a valid {0} name",t)}function st(e,t,n){if(!t)return e;for(var r,i=t.split("."),a=e,o=i.length,s=0;o>s;s++)r=i[s],e&&(e=(a=e)[r]);return!n&&k(e)?H(a,e):e}function ut(e){var t=e[0],n=e[e.length-1],r=[t];do{if(t=t.nextSibling,!t)break;r.push(t)}while(t!==n);return qr(r)}function lt(){return Object.create(null)}function ct(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng"),a=t(e,"angular",Object);return a.$$minErr=a.$$minErr||r,t(a,"module",function(){var e={};return function(r,a,o){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),a&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,n,r,i){return i||(i=t),function(){return i[r||"push"]([e,n,arguments]),l}}if(!a)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var t=[],i=[],s=[],u=e("$injector","invoke","push",i),l={_invokeQueue:t,_configBlocks:i,_runBlocks:s,requires:a,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),config:u,run:function(e){return s.push(e),this}};return o&&u(o),l})}})}function ft(t){f(t,{bootstrap:Z,copy:I,extend:f,equals:P,element:qr,forEach:a,injector:qt,noop:h,bind:H,toJson:U,fromJson:B,identity:$,isUndefined:m,isDefined:v,isString:b,isFunction:k,isObject:y,isNumber:w,isElement:O,isArray:Qr,version:ni,isDate:x,lowercase:Nr,uppercase:Ir,callbacks:{counter:0},getTestability:tt,$$minErr:r,$$csp:Xr,reloadWithDebugInfo:et,$$hasClass:St}),Lr=ct(e);try{Lr("ngLocale")}catch(n){Lr("ngLocale",[]).provider("$locale",cn)}Lr("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:Pn}),e.provider("$compile",Yt).directive({a:Zi,input:va,textarea:va,form:ia,script:so,select:co,style:po,option:fo,ngBind:ja,ngBindHtml:Ra,ngBindTemplate:Pa,ngClass:qa,ngClassEven:La,ngClassOdd:Ha,ngCloak:Ua,ngController:Ba,ngForm:aa,ngHide:to,ngIf:Ya,ngInclude:Ka,ngInit:Qa,ngNonBindable:Ja,ngPluralize:Xa,ngRepeat:Za,ngShow:eo,ngStyle:no,ngSwitch:ro,ngSwitchWhen:io,ngSwitchDefault:ao,ngOptions:lo,ngTransclude:oo,ngModel:Aa,ngList:_a,ngChange:Ea,pattern:Ma,ngPattern:Ma,required:Ta,ngRequired:Ta,minlength:Va,ngMinlength:Va,maxlength:Oa,ngMaxlength:Oa,ngValue:Fa,ngModelOptions:Ia}).directive({ngInclude:Ga}).directive(ea).directive(za),e.provider({$anchorScroll:Ht,$animate:Di,$browser:Bt,$cacheFactory:zt,$controller:Qt,$document:Jt,$exceptionHandler:Xt,$filter:Jn,$interpolate:un,$interval:ln,$http:rn,$httpBackend:on,$location:kn,$log:Cn,$parse:Vn,$rootScope:jn,$q:_n,$$q:Nn,$sce:Un,$sceDelegate:Ln,$sniffer:Bn,$templateCache:Wt,$templateRequest:zn,$$testability:Wn,$timeout:Yn,$window:Qn,$$rAF:In,$$asyncCallback:Lt})}])}function dt(){return++ii}function pt(e){return e.replace(si,function(e,t,n,r){return r?n.toUpperCase():n}).replace(ui,"Moz$1")}function ht(e){return!di.test(e)}function $t(e){var t=e.nodeType;return 1===t||!t||9===t}function gt(e,t){var n,r,i,o,s=t.createDocumentFragment(),u=[];if(ht(e))u.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(pi.exec(e)||["",""])[1].toLowerCase(),i=$i[r]||$i._default,n.innerHTML=i[1]+e.replace(hi,"<$1></$2>")+i[2],o=i[0];o--;)n=n.lastChild;u=R(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",a(u,function(e){s.appendChild(e)}),s}function mt(e,n){n=n||t;var r;return(r=fi.exec(e))?[n.createElement(r[1])]:(r=gt(e,n))?r.childNodes:[]}function vt(e){if(e instanceof vt)return e;var t;if(b(e)&&(e=Jr(e),t=!0),!(this instanceof vt)){if(t&&"<"!=e.charAt(0))throw ci("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new vt(e)}t?Et(this,mt(e)):Et(this,e)}function yt(e){return e.cloneNode(!0)}function bt(e,t){if(t||xt(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)xt(n[r])}function wt(e,t,n,r){if(v(r))throw ci("offargs","jqLite#off() does not support the `selector` argument");var i=kt(e),o=i&&i.events,s=i&&i.handle;if(s)if(t)a(t.split(" "),function(t){m(n)?(oi(e,t,o[t]),delete o[t]):F(o[t]||[],n)});else for(t in o)"$destroy"!==t&&oi(e,t,o[t]),delete o[t]}function xt(e,t){var r=e.ng339,i=r&&ri[r];if(i){if(t)return void delete i.data[t];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),wt(e)),delete ri[r],e.ng339=n}}function kt(e,t){var r=e.ng339,i=r&&ri[r];return t&&!i&&(e.ng339=r=dt(),i=ri[r]={events:{},data:{},handle:n}),i}function Ct(e,t,n){if($t(e)){var r=v(n),i=!r&&t&&!y(t),a=!t,o=kt(e,!i),s=o&&o.data;if(r)s[t]=n;else{if(a)return s;if(i)return s&&s[t];f(s,t)}}}function St(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Dt(e,t){t&&e.setAttribute&&a(t.split(" "),function(t){e.setAttribute("class",Jr((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Jr(t)+" "," ")))})}function At(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");a(t.split(" "),function(e){e=Jr(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Jr(n))}}function Et(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Tt(e,t){return Mt(e,"$"+(t||"ngController")+"Controller")}function Mt(e,t,r){9==e.nodeType&&(e=e.documentElement);for(var i=Qr(t)?t:[t];e;){for(var a=0,o=i.length;o>a;a++)if((r=qr.data(e,i[a]))!==n)return r;e=e.parentNode||11===e.nodeType&&e.host}}function Ot(e){for(bt(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Vt(e,t){t||bt(e);var n=e.parentNode;n&&n.removeChild(e)}function _t(e,t){var n=mi[t.toLowerCase()];return n&&vi[_(e)]&&n}function Nt(e,t){var n=e.nodeName;return("INPUT"===n||"TEXTAREA"===n)&&yi[t]}function Ft(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],a=i?i.length:0;if(a){if(m(n.immediatePropagationStopped)){var o=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),o&&o.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0},a>1&&(i=j(i));for(var s=0;a>s;s++)n.isImmediatePropagationStopped()||i[s].call(e,n)}};return n.elem=e,n}function It(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||l)():r+":"+e}function jt(e,t){if(t){var n=0;this.nextUid=function(){return++n}}a(e,this.put,this)}function Pt(e){var t=e.toString().replace(ki,""),n=t.match(bi);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Rt(e,t,n){var r,i,o,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw b(n)&&n||(n=e.name||Pt(e)),Ci("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=e.toString().replace(ki,""),o=i.match(bi),a(o[1].split(wi),function(e){e.replace(xi,function(e,t,n){r.push(n)})})}e.$inject=r}}else Qr(e)?(s=e.length-1,at(e[s],"fn"),r=e.slice(0,s)):at(e,"fn",!0);return r}function qt(e,t){function r(e){return function(t,n){return y(t)?void a(t,u(e)):e(t,n)}}function i(e,t){if(ot(e,"service"),(k(t)||Qr(t))&&(t=C.instantiate(t)),!t.$get)throw Ci("pget","Provider '{0}' must define $get factory method.",e);return x[e+m]=t}function o(e,t){return i(e,{$get:t})}function s(e,t){return o(e,["$injector",function(e){return e.instantiate(t)}])}function l(e,t){return o(e,g(t))}function c(e,t){ot(e,"constant"),x[e]=t,S[e]=t}function f(e,t){var n=C.get(e+m),r=n.$get;n.$get=function(){var e=D.invoke(r,n);return D.invoke(t,null,{$delegate:e})}}function d(e){var t,n=[];return a(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=C.get(r[0]);i[r[1]].apply(i,r[2])}}if(!w.get(e)){w.put(e,!0);try{b(e)?(t=Lr(e),n=n.concat(d(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):k(e)?n.push(C.invoke(e)):Qr(e)?n.push(C.invoke(e)):at(e,"module")}catch(i){throw Qr(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Ci("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function p(e,n){function r(t){if(e.hasOwnProperty(t)){if(e[t]===$)throw Ci("cdep","Circular dependency found: {0}",t+" <- "+v.join(" <- "));return e[t]}try{return v.unshift(t),e[t]=$,e[t]=n(t)}catch(r){throw e[t]===$&&delete e[t],r}finally{v.shift()}}function i(e,n,i,a){"string"==typeof i&&(a=i,i=null);var o,s,u,l=[],c=Rt(e,t,a);for(s=0,o=c.length;o>s;s++){if(u=c[s],"string"!=typeof u)throw Ci("itkn","Incorrect injection token! Expected service name as string, got {0}",u);l.push(i&&i.hasOwnProperty(u)?i[u]:r(u))}return Qr(e)&&(e=e[o]),e.apply(n,l)}function a(e,t,n){var r,a,o=function(){};return o.prototype=(Qr(e)?e[e.length-1]:e).prototype,r=new o,a=i(e,r,t,n),y(a)||k(a)?a:r}return{invoke:i,instantiate:a,get:r,annotate:Rt,has:function(t){return x.hasOwnProperty(t+m)||e.hasOwnProperty(t)}}}t=t===!0;var $={},m="Provider",v=[],w=new jt([],!0),x={$provide:{provider:r(i),factory:r(o),service:r(s),value:r(l),constant:r(c),decorator:f}},C=x.$injector=p(x,function(){throw Ci("unpr","Unknown provider: {0}",v.join(" <- "))}),S={},D=S.$injector=p(S,function(e){var t=C.get(e+m);return D.invoke(t.$get,t,n,e)});return a(d(e),function(e){D.invoke(e||h)}),D}function Ht(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return a(e,function(e){t||"a"!==_(e)||(t=e)}),t}function o(){var e,r=n.hash();r?(e=s.getElementById(r))?e.scrollIntoView():(e=i(s.getElementsByName(r)))?e.scrollIntoView():"top"===r&&t.scrollTo(0,0):t.scrollTo(0,0)}var s=t.document;return e&&r.$watch(function(){return n.hash()},function(){r.$evalAsync(o)}),o}]}function Lt(){this.$get=["$$rAF","$timeout",function(e,t){return e.supported?function(t){return e(t)}:function(e){return t(e,0,!1)}}]}function Ut(e,t,r,i){function o(e){try{e.apply(null,q(arguments,1))}finally{if(v--,0===v)for(;y.length;)try{y.pop()()}catch(t){r.error(t)}}}function s(e,t){!function n(){a(x,function(e){e()}),w=t(n,e)}()}function u(){S=null,k!=l.url()&&(k=l.url(),a(D,function(e){e(l.url())}))}var l=this,c=t[0],f=e.location,d=e.history,p=e.setTimeout,$=e.clearTimeout,g={};l.isMock=!1;var v=0,y=[];l.$$completeOutstandingRequest=o,l.$$incOutstandingRequestCount=function(){v++},l.notifyWhenNoOutstandingRequests=function(e){a(x,function(e){e()}),0===v?e():y.push(e)};var w,x=[];l.addPollFn=function(e){return m(w)&&s(100,p),x.push(e),e};var k=f.href,C=t.find("base"),S=null;l.url=function(t,n){if(f!==e.location&&(f=e.location),d!==e.history&&(d=e.history),t){if(k==t)return;return k=t,i.history?n?d.replaceState(null,"",t):(d.pushState(null,"",t),C.attr("href",C.attr("href"))):(S=t,n?f.replace(t):f.href=t),l}return S||f.href.replace(/%27/g,"'")};var D=[],A=!1;l.onUrlChange=function(t){return A||(i.history&&qr(e).on("popstate",u),i.hashchange?qr(e).on("hashchange",u):l.addPollFn(u),A=!0),D.push(t),t},l.$$checkUrlChange=u,l.baseHref=function(){var e=C.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""};var E={},T="",M=l.baseHref();l.cookies=function(e,t){var i,a,o,s,u;if(!e){if(c.cookie!==T)for(T=c.cookie,a=T.split("; "),E={},s=0;s<a.length;s++)o=a[s],u=o.indexOf("="),u>0&&(e=decodeURIComponent(o.substring(0,u)),E[e]===n&&(E[e]=decodeURIComponent(o.substring(u+1))));return E}t===n?c.cookie=encodeURIComponent(e)+"=;path="+M+";expires=Thu, 01 Jan 1970 00:00:00 GMT":b(t)&&(i=(c.cookie=encodeURIComponent(e)+"="+encodeURIComponent(t)+";path="+M).length+1,i>4096&&r.warn("Cookie '"+e+"' possibly not set or overflowed because it was too large ("+i+" > 4096 bytes)!"))},l.defer=function(e,t){var n;return v++,n=p(function(){delete g[n],o(e)},t||0),g[n]=!0,n},l.defer.cancel=function(e){return g[e]?(delete g[e],$(e),o(h),!0):!1}}function Bt(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new Ut(e,r,t,n)}]}function zt(){this.$get=function(){function e(e,n){function i(e){e!=d&&(p?p==e&&(p=e.n):p=e,a(e.n,e.p),a(e,d),d=e,d.n=null)}function a(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var o=0,s=f({},n,{id:e}),u={},l=n&&n.capacity||Number.MAX_VALUE,c={},d=null,p=null;return t[e]={put:function(e,t){if(l<Number.MAX_VALUE){var n=c[e]||(c[e]={key:e});i(n)}if(!m(t))return e in u||o++,u[e]=t,o>l&&this.remove(p.key),t},get:function(e){if(l<Number.MAX_VALUE){var t=c[e];if(!t)return;i(t)}return u[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=c[e];if(!t)return;t==d&&(d=t.p),t==p&&(p=t.n),a(t.n,t.p),delete c[e]}delete u[e],o--},removeAll:function(){u={},o=0,c={},d=p=null},destroy:function(){u=null,s=null,c=null,delete t[e]},info:function(){return f({},s,{size:o})}}}var t={};return e.info=function(){var e={};return a(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function Wt(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function Yt(e,r){function i(e,t){var n=/^\s*([@=&])(\??)\s*(\w*)\s*$/,r={};return a(e,function(e,i){var a=e.match(n);if(!a)throw Ai("iscp","Invalid isolate scope definition for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,i,e);r[i]={attrName:a[3]||i,mode:a[1],optional:"?"===a[2]}}),r}var o={},s="Directive",l=/^\s*directive\:\s*([\d\w_\-]+)\s+(.*)$/,c=/(([\d\w_\-]+)(?:\:([^;]+))?;?)/,d=V("ngSrc,ngSrcset,src,srcset"),m=/^(on[a-z]+|formaction)$/;this.directive=function x(t,n){return ot(t,"directive"),b(t)?(it(n,"directiveFactory"),o.hasOwnProperty(t)||(o[t]=[],e.factory(t+s,["$injector","$exceptionHandler",function(e,n){var r=[];return a(o[t],function(a,o){try{var s=e.invoke(a);k(s)?s={compile:g(s)}:!s.compile&&s.link&&(s.compile=g(s.link)),s.priority=s.priority||0,s.index=o,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA",y(s.scope)&&(s.$$isolateBindings=i(s.scope,s.name)),r.push(s)}catch(u){n(u)}}),r}])),o[t].push(n)):a(t,u(x)),this},this.aHrefSanitizationWhitelist=function(e){return v(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var w=!0;this.debugInfoEnabled=function(e){return v(e)?(w=e,this):w},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,i,u,g,v,x,C,S,A,E){function T(e,t){try{e.addClass(t)}catch(n){}}function M(e,t,n,r,i){e instanceof qr||(e=qr(e)),a(e,function(t,n){3==t.nodeType&&t.nodeValue.match(/\S+/)&&(e[n]=qr(t).wrap("<span></span>").parent()[0])});var o=V(e,t,e,n,r,i);M.$$addScopeClass(e);var s,u=null,l=e;return function(t,n,r,i,a){it(t,"scope"),u||(u=O(a)),"html"!==u&&e[0]!==s&&(l=qr(J(u,qr("<div>").append(e).html()))),s=e[0];var c=n?gi.clone.call(l):l;if(r)for(var f in r)c.data("$"+f+"Controller",r[f].instance);return M.$$addScopeInfo(c,t),n&&n(c,t),o&&o(t,c,c,i),c}}function O(e){var t=e&&e[0];return t&&"foreignobject"!==_(t)&&t.toString().match(/SVG/)?"svg":"html"}function V(e,t,r,i,a,o){function s(e,r,i,a){var o,s,u,l,c,f,d,p,g;if(h){var m=r.length;for(g=new Array(m),c=0;c<$.length;c+=3)d=$[c],g[d]=r[d]}else g=r;for(c=0,f=$.length;f>c;)u=g[$[c++]],o=$[c++],s=$[c++],o?(o.scope?(l=e.$new(),M.$$addScopeInfo(qr(u),l)):l=e,p=o.transcludeOnThisElement?N(e,o.transclude,a,o.elementTranscludeOnThisElement):!o.templateOnThisElement&&a?a:!a&&t?N(e,t):null,o(s,l,u,i,p)):s&&s(e,u.childNodes,n,a)}for(var u,l,c,f,d,p,h,$=[],g=0;g<e.length;g++)u=new at,l=I(e[g],[],u,0===g?i:n,a),c=l.length?H(l,e[g],u,t,r,null,[],[],o):null,c&&c.scope&&M.$$addScopeClass(u.$$element),d=c&&c.terminal||!(f=e[g].childNodes)||!f.length?null:V(f,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:t),(c||d)&&($.push(g,c,d),p=!0,h=h||c),o=null;return p?s:null}function N(e,t,n,r){var i=function(i,a,o,s){var u=!1;i||(i=e.$new(),i.$$transcluded=!0,u=!0);var l=t(i,a,o,n,s);return u&&!r&&l.on("$destroy",function(){i.$destroy()}),l};return i}function I(e,t,n,r,i){var a,o,s=e.nodeType,u=n.$attr;switch(s){case 1:U(t,Kt(_(e)),"E",r,i);for(var f,d,p,h,$,g,m=e.attributes,v=0,y=m&&m.length;y>v;v++){var w=!1,x=!1;if(f=m[v],!Rr||Rr>=8||f.specified){d=f.name,$=Jr(f.value),h=Kt(d),(g=lt.test(h))&&(d=nt(h.substr(6),"-"));var k=h.replace(/(Start|End)$/,"");B(k)&&h===k+"Start"&&(w=d,x=d.substr(0,d.length-5)+"end",d=d.substr(0,d.length-6)),p=Kt(d.toLowerCase()),u[p]=d,(g||!n.hasOwnProperty(p))&&(n[p]=$,_t(e,p)&&(n[p]=!0)),Z(e,t,$,p,g),U(t,p,"A",r,i,w,x)}}if(o=e.className,b(o)&&""!==o)for(;a=c.exec(o);)p=Kt(a[2]),U(t,p,"C",r,i)&&(n[p]=Jr(a[3])),o=o.substr(a.index+a[0].length);break;case 3:Q(t,e.nodeValue);break;case 8:try{a=l.exec(e.nodeValue),a&&(p=Kt(a[1]),U(t,p,"M",r,i)&&(n[p]=Jr(a[2])))}catch(C){}}return t.sort(K),t}function j(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Ai("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);1==e.nodeType&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return qr(r)}function R(e,t,n){return function(r,i,a,o,s){return i=j(i[0],t,n),e(r,i,a,o,s)}}function H(e,o,s,u,l,c,f,d,p){function h(e,t,n,r){e&&(n&&(e=R(e,n,r)),e.require=C.require,e.directiveName=S,(_===C||C.$$isolateScope)&&(e=tt(e,{isolateScope:!0})),f.push(e)),t&&(n&&(t=R(t,n,r)),t.require=C.require,t.directiveName=S,(_===C||C.$$isolateScope)&&(t=tt(t,{isolateScope:!0})),d.push(t))}function $(e,t,n,r){var i,o="data",s=!1;if(b(t)){for(;"^"==(i=t.charAt(0))||"?"==i;)t=t.substr(1),"^"==i&&(o="inheritedData"),s=s||"?"==i;if(i=null,r&&"data"===o&&(i=r[t])&&(i=i.instance),i=i||n[o]("$"+t+"Controller"),!i&&!s)throw Ai("ctreq","Controller '{0}', required by directive '{1}', can't be found!",t,e);return i}return Qr(t)&&(i=[],a(t,function(t){i.push($(e,t,n,r))})),i}function m(e,t,i,u,l){function c(e,t,r){var i;return D(e)||(r=t,t=e,e=n),B&&(i=w),r||(r=B?C.parent():C),l(e,t,i,r)}var p,h,m,y,b,w,k,C,S;if(o===i?(S=s,C=s.$$element):(C=qr(i),S=new at(C,s)),_&&(b=t.$new(!0)),k=l&&c,V&&(x={},w={},a(V,function(e){var n,r={$scope:e===_||e.$$isolateScope?b:t,$element:C,$attrs:S,$transclude:k};y=e.controller,"@"==y&&(y=S[e.name]),n=v(y,r,!0,e.controllerAs),w[e.name]=n,B||C.data("$"+e.name+"Controller",n.instance),x[e.name]=n})),_){M.$$addScopeInfo(C,b,!0,!(N&&(N===_||N===_.$$originalDirective))),M.$$addScopeClass(C,!0);var A=x&&x[_.name],E=b;A&&A.identifier&&_.bindToController===!0&&(E=A.instance),a(b.$$isolateBindings=_.$$isolateBindings,function(e,n){var i,a,o,s,u=e.attrName,l=e.optional,c=e.mode;switch(c){case"@":S.$observe(u,function(e){E[n]=e}),S.$$observers[u].$$scope=t,S[u]&&(E[n]=r(S[u])(t));break;case"=":if(l&&!S[u])return;a=g(S[u]),s=a.literal?P:function(e,t){return e===t||e!==e&&t!==t},o=a.assign||function(){throw i=E[n]=a(t),Ai("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",S[u],_.name)},i=E[n]=a(t);var f=function(e){return s(e,E[n])||(s(e,i)?o(t,e=E[n]):E[n]=e),i=e};f.$stateful=!0;var d=t.$watch(g(S[u],f),null,a.literal);b.$on("$destroy",d);break;case"&":a=g(S[u]),E[n]=function(e){return a(t,e)}}})}for(x&&(a(x,function(e){e()}),x=null),p=0,h=f.length;h>p;p++)m=f[p],rt(m,m.isolateScope?b:t,C,S,m.require&&$(m.directiveName,m.require,C,w),k);var T=t;for(_&&(_.template||null===_.templateUrl)&&(T=b),e&&e(T,i.childNodes,n,l),p=d.length-1;p>=0;p--)m=d[p],rt(m,m.isolateScope?b:t,C,S,m.require&&$(m.directiveName,m.require,C,w),k)}p=p||{};for(var w,x,C,S,A,E,T,O=-Number.MAX_VALUE,V=p.controllerDirectives,_=p.newIsolateScopeDirective,N=p.templateDirective,F=p.nonTlbTranscludeDirective,H=!1,U=!1,B=p.hasElementTranscludeDirective,K=s.$$element=qr(o),Q=c,X=u,Z=0,nt=e.length;nt>Z;Z++){C=e[Z];var it=C.$$start,ot=C.$$end;if(it&&(K=j(o,it,ot)),A=n,O>C.priority)break;if((T=C.scope)&&(C.templateUrl||(y(T)?(G("new/isolated scope",_||w,C,K),_=C):G("new/isolated scope",_,C,K)),w=w||C),S=C.name,!C.templateUrl&&C.controller&&(T=C.controller,V=V||{},G("'"+S+"' controller",V[S],C,K),V[S]=C),(T=C.transclude)&&(H=!0,C.$$tlb||(G("transclusion",F,C,K),F=C),"element"==T?(B=!0,O=C.priority,A=K,K=s.$$element=qr(t.createComment(" "+S+": "+s[S]+" ")),o=K[0],et(l,q(A),o),X=M(A,u,O,Q&&Q.name,{nonTlbTranscludeDirective:F})):(A=qr(yt(o)).contents(),K.empty(),X=M(A,u))),C.template)if(U=!0,G("template",N,C,K),N=C,T=k(C.template)?C.template(K,s):C.template,T=ut(T),C.replace){if(Q=C,A=ht(T)?[]:qr(J(C.templateNamespace,Jr(T))),o=A[0],1!=A.length||1!==o.nodeType)throw Ai("tplrt","Template for directive '{0}' must have exactly one root element. {1}",S,"");et(l,K,o);var st={$attr:{}},lt=I(o,[],st),ct=e.splice(Z+1,e.length-(Z+1));_&&L(lt),e=e.concat(lt).concat(ct),W(s,st),nt=e.length}else K.html(T);if(C.templateUrl)U=!0,G("template",N,C,K),N=C,C.replace&&(Q=C),m=Y(e.splice(Z,e.length-Z),K,s,l,H&&X,f,d,{controllerDirectives:V,newIsolateScopeDirective:_,templateDirective:N,nonTlbTranscludeDirective:F}),nt=e.length;else if(C.compile)try{E=C.compile(K,s,X),k(E)?h(null,E,it,ot):E&&h(E.pre,E.post,it,ot)}catch(ft){i(ft,z(K))}C.terminal&&(m.terminal=!0,O=Math.max(O,C.priority))}return m.scope=w&&w.scope===!0,m.transcludeOnThisElement=H,m.elementTranscludeOnThisElement=B,m.templateOnThisElement=U,m.transclude=X,p.hasElementTranscludeDirective=B,m}function L(e){for(var t=0,n=e.length;n>t;t++)e[t]=p(e[t],{$$isolateScope:!0})}function U(t,r,a,u,l,c,f){if(r===l)return null;var d=null;if(o.hasOwnProperty(r))for(var h,$=e.get(r+s),g=0,m=$.length;m>g;g++)try{h=$[g],(u===n||u>h.priority)&&-1!=h.restrict.indexOf(a)&&(c&&(h=p(h,{$$start:c,$$end:f})),t.push(h),d=h)}catch(v){i(v)}return d}function B(t){if(o.hasOwnProperty(t))for(var n,r=e.get(t+s),i=0,a=r.length;a>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function W(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;a(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),a(t,function(t,a){"class"==a?(T(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==a?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==a.charAt(0)||e.hasOwnProperty(a)||(e[a]=t,r[a]=n[a])})}function Y(e,t,n,r,i,o,s,l){var c,d,p=[],h=t[0],$=e.shift(),g=f({},$,{templateUrl:null,transclude:null,replace:null,$$originalDirective:$}),m=k($.templateUrl)?$.templateUrl(t,n):$.templateUrl,v=$.templateNamespace;return t.empty(),u(S.getTrustedResourceUrl(m)).then(function(u){var f,b,w,x;if(u=ut(u),$.replace){if(w=ht(u)?[]:qr(J(v,Jr(u))),f=w[0],1!=w.length||1!==f.nodeType)throw Ai("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$.name,m);b={$attr:{}},et(r,t,f);var k=I(f,[],b);y($.scope)&&L(k),e=k.concat(e),W(n,b)}else f=h,t.html(u);for(e.unshift(g),c=H(e,f,n,i,t,$,o,s,l),a(r,function(e,n){e==f&&(r[n]=t[0])}),d=V(t[0].childNodes,i);p.length;){var C=p.shift(),S=p.shift(),D=p.shift(),A=p.shift(),E=t[0];if(S!==h){var M=S.className;l.hasElementTranscludeDirective&&$.replace||(E=yt(f)),et(D,qr(S),E),T(qr(E),M)}x=c.transcludeOnThisElement?N(C,c.transclude,A):A,c(d,C,E,r,x)}p=null}),function(e,t,n,r,i){var a=i;p?(p.push(t),p.push(n),p.push(r),p.push(a)):(c.transcludeOnThisElement&&(a=N(t,c.transclude,i)),c(d,t,n,r,a))}}function K(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index
}function G(e,t,n,r){if(t)throw Ai("multidir","Multiple directives [{0}, {1}] asking for {2} on: {3}",t.name,n.name,e,z(r))}function Q(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&M.$$addBindingClass(t),function(e,t){var i=t.parent();r||M.$$addBindingClass(i),M.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function J(e,n){switch(e=Nr(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function X(e,t){if("srcdoc"==t)return S.HTML;var n=_(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?S.RESOURCE_URL:void 0}function Z(e,t,n,i,a){var o=r(n,!0);if(o){if("multiple"===i&&"select"===_(e))throw Ai("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",z(e));t.push({priority:100,compile:function(){return{pre:function(t,n,s){var u=s.$$observers||(s.$$observers={});if(m.test(i))throw Ai("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");o=r(s[i],!0,X(e,i),d[i]||a),o&&(s[i]=o(t),(u[i]||(u[i]=[])).$$inter=!0,(s.$$observers&&s.$$observers[i].$$scope||t).$watch(o,function(e,t){"class"===i&&e!=t?s.$updateClass(e,t):s.$set(i,e)}))}}}})}}function et(e,n,r){var i,a,o=n[0],s=n.length,u=o.parentNode;if(e)for(i=0,a=e.length;a>i;i++)if(e[i]==o){e[i++]=r;for(var l=i,c=l+s-1,f=e.length;f>l;l++,c++)f>c?e[l]=e[c]:delete e[l];e.length-=s-1,e.context===o&&(e.context=r);break}u&&u.replaceChild(r,o);var d=t.createDocumentFragment();d.appendChild(o),qr(r).data(qr(o).data()),Hr?(Gr=!0,Hr.cleanData([o])):delete qr.cache[o[qr.expando]];for(var p=1,h=n.length;h>p;p++){var $=n[p];qr($).remove(),d.appendChild($),delete n[p]}n[0]=r,n.length=1}function tt(e,t){return f(function(){return e.apply(null,arguments)},e,t)}function rt(e,t,n,r,a,o){try{e(t,n,r,a,o)}catch(s){i(s,z(n))}}var at=function(e,t){if(t){var n,r,i,a=Object.keys(t);for(n=0,r=a.length;r>n;n++)i=a[n],this[i]=t[i]}else this.$attr={};this.$$element=e};at.prototype={$normalize:Kt,$addClass:function(e){e&&e.length>0&&A.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&A.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=Gt(e,t);n&&n.length&&A.addClass(this.$$element,n);var r=Gt(t,e);r&&r.length&&A.removeClass(this.$$element,r)},$set:function(e,t,r,o){var s,u=this.$$element[0],l=_t(u,e),c=Nt(u,e),f=e;l?(this.$$element.prop(e,t),o=l):c&&(this[c]=t,f=c),this[e]=t,o?this.$attr[e]=o:(o=this.$attr[e],o||(this.$attr[e]=o=nt(e,"-"))),s=_(this.$$element),("a"===s&&"href"===e||"img"===s&&"src"===e)&&(this[e]=t=E(t,"src"===e)),r!==!1&&(null===t||t===n?this.$$element.removeAttr(o):this.$$element.attr(o,t));var d=this.$$observers;d&&a(d[f],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers={}),i=r[e]||(r[e]=[]);return i.push(t),x.$evalAsync(function(){i.$$inter||t(n[e])}),function(){F(i,t)}}};var ot=r.startSymbol(),st=r.endSymbol(),ut="{{"==ot||"}}"==st?$:function(e){return e.replace(/\{\{/g,ot).replace(/}}/g,st)},lt=/^ngAttr[A-Z]/;return M.$$addBindingInfo=w?function(e,t){var n=e.data("$binding")||[];Qr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:h,M.$$addBindingClass=w?function(e){T(e,"ng-binding")}:h,M.$$addScopeInfo=w?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:h,M.$$addScopeClass=w?function(e,t){T(e,t?"ng-isolate-scope":"ng-scope")}:h,M}]}function Kt(e){return pt(e.replace(Ei,""))}function Gt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var a=0;a<r.length;a++){for(var o=r[a],s=0;s<i.length;s++)if(o==i[s])continue e;n+=(n.length>0?" ":"")+o}return n}function Qt(){var e={},t=!1,i=/^(\S+)(\s+as\s+(\w+))?$/;this.register=function(t,n){ot(t,"controller"),y(t)?f(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(a,o){function s(e,t,n,i){if(!e||!y(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,t);e.$scope[t]=n}return function(r,u,l,c){var d,p,h,$;if(l=l===!0,c&&b(c)&&($=c),b(r)&&(p=r.match(i),h=p[1],$=$||p[3],r=e.hasOwnProperty(h)?e[h]:st(u.$scope,h,!0)||(t?st(o,h,!0):n),at(r,h,!0)),l){var g=function(){};return g.prototype=(Qr(r)?r[r.length-1]:r).prototype,d=new g,$&&s(u,$,d,h||r.name),f(function(){return a.invoke(r,d,u,h),d},{instance:d,identifier:$})}return d=a.instantiate(r,u,h),$&&s(u,$,d,h||r.name),d}}]}function Jt(){this.$get=["$window",function(e){return qr(e.document)}]}function Xt(){this.$get=["$log",function(e){return function(){e.error.apply(e,arguments)}}]}function Zt(e){var t,n,r,i={};return e?(a(e.split("\n"),function(e){r=e.indexOf(":"),t=Nr(Jr(e.substr(0,r))),n=Jr(e.substr(r+1)),t&&(i[t]=i[t]?i[t]+", "+n:n)}),i):i}function en(e){var t=y(e)?e:n;return function(n){return t||(t=Zt(e)),n?t[Nr(n)]||null:t}}function tn(e,t,n){return k(n)?n(e,t):(a(n,function(n){e=n(e,t)}),e)}function nn(e){return e>=200&&300>e}function rn(){var e=/^\s*(\[|\{[^\{])/,t=/[\}\]]\s*$/,r=/^\)\]\}',?\n/,i={"Content-Type":"application/json;charset=utf-8"},o=this.defaults={transformResponse:[function(n){return b(n)&&(n=n.replace(r,""),e.test(n)&&t.test(n)&&(n=B(n))),n}],transformRequest:[function(e){return!y(e)||A(e)||E(e)?e:U(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:j(i),put:j(i),patch:j(i)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN"},u=!1;this.useApplyAsync=function(e){return v(e)?(u=!!e,this):u};var l=this.interceptors=[];this.$get=["$httpBackend","$browser","$cacheFactory","$rootScope","$q","$injector",function(e,t,r,i,c,d){function p(e){function t(e){var t=f({},e,{data:tn(e.data,e.headers,i.transformResponse)});return nn(e.status)?t:c.reject(t)}function r(e){function t(e){var t;a(e,function(n,r){k(n)&&(t=n(),null!=t?e[r]=t:delete e[r])})}var n,r,i,s=o.headers,u=f({},e.headers);s=f({},s.common,s[Nr(e.method)]);e:for(n in s){r=Nr(n);for(i in u)if(Nr(i)===r)continue e;u[n]=s[n]}return t(u),u}var i={method:"get",transformRequest:o.transformRequest,transformResponse:o.transformResponse},s=r(e);f(i,e),i.headers=s,i.method=Ir(i.method);var u=function(e){s=e.headers;var n=tn(e.data,en(s),e.transformRequest);return m(n)&&a(s,function(e,t){"content-type"===Nr(t)&&delete s[t]}),m(e.withCredentials)&&!m(o.withCredentials)&&(e.withCredentials=o.withCredentials),g(e,n,s).then(t,t)},l=[u,n],d=c.when(i);for(a(S,function(e){(e.request||e.requestError)&&l.unshift(e.request,e.requestError),(e.response||e.responseError)&&l.push(e.response,e.responseError)});l.length;){var p=l.shift(),h=l.shift();d=d.then(p,h)}return d.success=function(e){return d.then(function(t){e(t.data,t.status,t.headers,i)}),d},d.error=function(e){return d.then(null,function(t){e(t.data,t.status,t.headers,i)}),d},d}function h(){a(arguments,function(e){p[e]=function(t,n){return p(f(n||{},{method:e,url:t}))}})}function $(){a(arguments,function(e){p[e]=function(t,n,r){return p(f(r||{},{method:e,url:t,data:n}))}})}function g(r,a,s){function l(e,t,n,r){function a(){f(t,e,n,r)}h&&(nn(e)?h.put(x,[e,t,Zt(n),r]):h.remove(x)),u?i.$applyAsync(a):(a(),i.$$phase||i.$apply())}function f(e,t,n,i){t=Math.max(t,0),(nn(t)?g.resolve:g.reject)({data:e,status:t,headers:en(n),config:r,statusText:i})}function d(){var e=p.pendingRequests.indexOf(r);-1!==e&&p.pendingRequests.splice(e,1)}var h,$,g=c.defer(),b=g.promise,x=w(r.url,r.params);if(p.pendingRequests.push(r),b.then(d,d),!r.cache&&!o.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(h=y(r.cache)?r.cache:y(o.cache)?o.cache:C),h)if($=h.get(x),v($)){if(M($))return $.then(d,d),$;Qr($)?f($[1],$[0],j($[2]),$[3]):f($,200,{},"OK")}else h.put(x,b);if(m($)){var k=Gn(r.url)?t.cookies()[r.xsrfCookieName||o.xsrfCookieName]:n;k&&(s[r.xsrfHeaderName||o.xsrfHeaderName]=k),e(r.method,x,a,l,s,r.timeout,r.withCredentials,r.responseType)}return b}function w(e,t){if(!t)return e;var n=[];return s(t,function(e,t){null===e||m(e)||(Qr(e)||(e=[e]),a(e,function(e){y(e)&&(e=x(e)?e.toISOString():U(e)),n.push(Q(t)+"="+Q(e))}))}),n.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+n.join("&")),e}var C=r("$http"),S=[];return a(l,function(e){S.unshift(b(e)?d.get(e):d.invoke(e))}),p.pendingRequests=[],h("get","delete","head","jsonp"),$("post","put","patch"),p.defaults=o,p}]}function an(t){if(8>=Rr&&(!t.match(/^(get|post|head|put|delete|options)$/i)||!e.XMLHttpRequest))return new e.ActiveXObject("Microsoft.XMLHTTP");if(e.XMLHttpRequest)return new e.XMLHttpRequest;throw r("$httpBackend")("noxhr","This browser does not support XMLHttpRequest.")}function on(){this.$get=["$browser","$window","$document",function(e,t,n){return sn(e,an,e.defer,t.angular.callbacks,n[0])}]}function sn(e,t,n,r,i){function o(e,t,n){var a=i.createElement("script"),o=null;return a.type="text/javascript",a.src=e,a.async=!0,o=function(e){oi(a,"load",o),oi(a,"error",o),i.body.removeChild(a),a=null;var s=-1,u="unknown";e&&("load"!==e.type||r[t].called||(e={type:"error"}),u=e.type,s="error"===e.type?404:200),n&&n(s,u)},ai(a,"load",o),ai(a,"error",o),i.body.appendChild(a),o}var s=-1;return function(i,u,l,c,f,d,p,$){function g(){y=s,w&&w(),x&&x.abort()}function m(t,r,i,a,o){C&&n.cancel(C),w=x=null,0===r&&(r=i?200:"file"==Kn(u).protocol?404:0),r=1223===r?204:r,o=o||"",t(r,i,a,o),e.$$completeOutstandingRequest(h)}var y;if(e.$$incOutstandingRequestCount(),u=u||e.url(),"jsonp"==Nr(i)){var b="_"+(r.counter++).toString(36);r[b]=function(e){r[b].data=e,r[b].called=!0};var w=o(u.replace("JSON_CALLBACK","angular.callbacks."+b),b,function(e,t){m(c,e,r[b].data,"",t),r[b]=h})}else{var x=t(i);if(x.open(i,u,!0),a(f,function(e,t){v(e)&&x.setRequestHeader(t,e)}),x.onreadystatechange=function(){if(x&&4==x.readyState){var e=null,t=null,n="";y!==s&&(e=x.getAllResponseHeaders(),t="response"in x?x.response:x.responseText),y===s&&10>Rr||(n=x.statusText),m(c,y||x.status,t,e,n)}},p&&(x.withCredentials=!0),$)try{x.responseType=$}catch(k){if("json"!==$)throw k}x.send(l||null)}if(d>0)var C=n(g,d);else M(d)&&d.then(g)}}function un(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function a(e){return"\\\\\\"+e}function o(a,o,d,p){function h(n){return n.replace(l,e).replace(c,t)}function $(e){try{return T(E(e))}catch(t){var n=Ti("interr","Can't interpolate: {0}\n{1}",a,t.toString());r(n)}}p=!!p;for(var g,v,y,b=0,w=[],x=[],C=a.length,S=[],D=[];C>b;){if(-1==(g=a.indexOf(e,b))||-1==(v=a.indexOf(t,g+s))){b!==C&&S.push(h(a.substring(b)));break}b!==g&&S.push(h(a.substring(b,g))),y=a.substring(g+s,v),w.push(y),x.push(n(y,$)),b=v+u,D.push(S.length),S.push("")}if(d&&S.length>1)throw Ti("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",a);if(!o||w.length){var A=function(e){for(var t=0,n=w.length;n>t;t++){if(p&&m(e[t]))return;S[D[t]]=e[t]}return S.join("")},E=function(e){return d?i.getTrusted(d,e):i.valueOf(e)},T=function(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=U(e)}return e};return f(function(e){var t=0,n=w.length,i=new Array(n);try{for(;n>t;t++)i[t]=x[t](e);return A(i)}catch(o){var s=Ti("interr","Can't interpolate: {0}\n{1}",a,o.toString());r(s)}},{exp:a,expressions:w,$$watchDelegate:function(e,t,n){var r;return e.$watchGroup(x,function(n,i){var a=A(n);k(t)&&t.call(this,a,n!==i?r:a,e),r=a},n)}})}}var s=e.length,u=t.length,l=new RegExp(e.replace(/./g,a),"g"),c=new RegExp(t.replace(/./g,a),"g");return o.startSymbol=function(){return e},o.endSymbol=function(){return t},o}]}function ln(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,o,s,u){var l=t.setInterval,c=t.clearInterval,f=0,d=v(u)&&!u,p=(d?r:n).defer(),h=p.promise;return s=v(s)?s:0,h.then(null,null,i),h.$$intervalId=l(function(){p.notify(f++),s>0&&f>=s&&(p.resolve(f),c(h.$$intervalId),delete a[h.$$intervalId]),d||e.$apply()},o),a[h.$$intervalId]=p,h}var a={};return i.cancel=function(e){return e&&e.$$intervalId in a?(a[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete a[e.$$intervalId],!0):!1},i}]}function cn(){this.$get=function(){return{id:"en-us",NUMBER_FORMATS:{DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{minInt:1,minFrac:0,maxFrac:3,posPre:"",posSuf:"",negPre:"-",negSuf:"",gSize:3,lgSize:3},{minInt:1,minFrac:2,maxFrac:2,posPre:"¤",posSuf:"",negPre:"(¤",negSuf:")",gSize:3,lgSize:3}],CURRENCY_SYM:"$"},DATETIME_FORMATS:{MONTH:"January,February,March,April,May,June,July,August,September,October,November,December".split(","),SHORTMONTH:"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),DAY:"Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),SHORTDAY:"Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(","),AMPMS:["AM","PM"],medium:"MMM d, y h:mm:ss a","short":"M/d/yy h:mm a",fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",mediumDate:"MMM d, y",shortDate:"M/d/yy",mediumTime:"h:mm:ss a",shortTime:"h:mm a"},pluralCat:function(e){return 1===e?"one":"other"}}}}function fn(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=G(t[n]);return t.join("/")}function dn(e,t,n){var r=Kn(e,n);t.$$protocol=r.protocol,t.$$host=r.hostname,t.$$port=d(r.port)||Oi[r.protocol]||null}function pn(e,t,n){var r="/"!==e.charAt(0);r&&(e="/"+e);var i=Kn(e,n);t.$$path=decodeURIComponent(r&&"/"===i.pathname.charAt(0)?i.pathname.substring(1):i.pathname),t.$$search=Y(i.search),t.$$hash=decodeURIComponent(i.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function hn(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function $n(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function gn(e){return e.substr(0,$n(e).lastIndexOf("/")+1)}function mn(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function vn(e,t){this.$$html5=!0,t=t||"";var r=gn(e);dn(e,this,e),this.$$parse=function(t){var n=hn(r,t);if(!b(n))throw Vi("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,r);pn(n,this,e),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=K(this.$$search),t=this.$$hash?"#"+G(this.$$hash):"";this.$$url=fn(this.$$path)+(e?"?"+e:"")+t,this.$$absUrl=r+this.$$url.substr(1)},this.$$parseLinkUrl=function(i,a){if(a&&"#"===a[0])return this.hash(a.slice(1)),!0;var o,s,u;return(o=hn(e,i))!==n?(s=o,u=(o=hn(t,o))!==n?r+(hn("/",o)||o):e+s):(o=hn(r,i))!==n?u=r+o:r==i+"/"&&(u=r),u&&this.$$parse(u),!!u}}function yn(e,t){var n=gn(e);dn(e,this,e),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var a=hn(e,r)||hn(n,r),o="#"==a.charAt(0)?hn(t,a):this.$$html5?a:"";if(!b(o))throw Vi("ihshprfx",'Invalid url "{0}", missing hash prefix "{1}".',r,t);pn(o,this,e),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var n=K(this.$$search),r=this.$$hash?"#"+G(this.$$hash):"";this.$$url=fn(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+(this.$$url?t+this.$$url:"")},this.$$parseLinkUrl=function(t){return $n(e)==$n(t)?(this.$$parse(t),!0):!1}}function bn(e,t){this.$$html5=!0,yn.apply(this,arguments);var n=gn(e);this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var a,o;return e==$n(r)?a=r:(o=hn(n,r))?a=e+t+o:n===r+"/"&&(a=n),a&&this.$$parse(a),!!a},this.$$compose=function(){var n=K(this.$$search),r=this.$$hash?"#"+G(this.$$hash):"";this.$$url=fn(this.$$path)+(n?"?"+n:"")+r,this.$$absUrl=e+t+this.$$url}}function wn(e){return function(){return this[e]}}function xn(e,t){return function(n){return m(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function kn(){var t="",n=!1;this.hashPrefix=function(e){return v(e)?(t=e,this):t},this.html5Mode=function(e){return v(e)?(n=e,this):n},this.$get=["$rootScope","$browser","$sniffer","$rootElement",function(r,i,a,o){function s(e){r.$broadcast("$locationChangeSuccess",u.absUrl(),e)}var u,l,c,f=i.baseHref(),d=i.url();if(n){if(!f)throw Vi("nobase","$location in HTML5 mode requires a <base> tag to be present!");c=mn(d)+(f||"/"),l=a.history?vn:bn}else c=$n(d),l=yn;u=new l(c,"#"+t),u.$$parseLinkUrl(d,d);var p=/^\s*(javascript|mailto):/i;o.on("click",function(t){if(!t.ctrlKey&&!t.metaKey&&2!=t.which){for(var n=qr(t.target);"a"!==_(n[0]);)if(n[0]===o[0]||!(n=n.parent())[0])return;var a=n.prop("href"),s=n.attr("href")||n.attr("xlink:href");y(a)&&"[object SVGAnimatedString]"===a.toString()&&(a=Kn(a.animVal).href),p.test(a)||!a||n.attr("target")||t.isDefaultPrevented()||u.$$parseLinkUrl(a,s)&&(t.preventDefault(),u.absUrl()!=i.url()&&(r.$apply(),e.angular["ff-684208-preventDefault"]=!0))}}),u.absUrl()!=d&&i.url(u.absUrl(),!0),i.onUrlChange(function(e){u.absUrl()!=e&&(r.$evalAsync(function(){var t=u.absUrl();u.$$parse(e),r.$broadcast("$locationChangeStart",e,t).defaultPrevented?(u.$$parse(t),i.url(t)):s(t)}),r.$$phase||r.$digest())});var h=0;return r.$watch(function(){var e=i.url(),t=u.$$replace;return h&&e==u.absUrl()||(h++,r.$evalAsync(function(){r.$broadcast("$locationChangeStart",u.absUrl(),e).defaultPrevented?u.$$parse(e):(i.url(u.absUrl(),t),s(e))})),u.$$replace=!1,h}),u}]}function Cn(){var e=!0,t=this;this.debugEnabled=function(t){return v(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||h,o=!1;try{o=!!i.apply}catch(s){}return o?function(){var e=[];return a(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Sn(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw _i("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Dn(e,t){if(e){if(e.constructor===e)throw _i("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw _i("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw _i("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw _i("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function An(e,t){if(e){if(e.constructor===e)throw _i("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===Ni||e===Fi||e===Ii)throw _i("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function En(e){return e.constant}function Tn(e,t,n,r){Dn(e,r);for(var i,a=t.split("."),o=0;a.length>1;o++){i=Sn(a.shift(),r);var s=Dn(e[i],r);s||(s={},e[i]=s),e=s}return i=Sn(a.shift(),r),Dn(e[i],r),e[i]=n,n}function Mn(e,t,r,i,a,o){return Sn(e,o),Sn(t,o),Sn(r,o),Sn(i,o),Sn(a,o),function(o,s){var u=s&&s.hasOwnProperty(e)?s:o;return null==u?u:(u=u[e],t?null==u?n:(u=u[t],r?null==u?n:(u=u[r],i?null==u?n:(u=u[i],a?null==u?n:u=u[a]:u):u):u):u)}}function On(e,t,r){var i=Li[e];if(i)return i;var o=e.split("."),s=o.length;if(t.csp)i=6>s?Mn(o[0],o[1],o[2],o[3],o[4],r):function(e,t){var i,a=0;do i=Mn(o[a++],o[a++],o[a++],o[a++],o[a++],r)(e,t),t=n,e=i;while(s>a);return i};else{var u="";a(o,function(e,t){Sn(e,r),u+="if(s == null) return undefined;\ns="+(t?"s":'((l&&l.hasOwnProperty("'+e+'"))?l:s)')+"."+e+";\n"}),u+="return s;";var l=new Function("s","l",u);l.toString=g(u),i=l}return i.sharedGetter=!0,i.assign=function(t,n){return Tn(t,e,n,e)},Li[e]=i,i}function Vn(){var e=lt(),t={csp:!1};this.$get=["$filter","$sniffer",function(n,r){function i(e){var t=e;return e.sharedGetter&&(t=function(t,n){return e(t,n)},t.literal=e.literal,t.constant=e.constant,t.assign=e.assign),t}function o(e,t){for(var n=0,r=e.length;r>n;n++){var i=e[n];i.constant||(i.inputs?o(i.inputs,t):-1===t.indexOf(i)&&t.push(i))}return t}function s(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=e.valueOf(),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function u(e,t,n,r){var i,a=r.$$inputs||(r.$$inputs=o(r.inputs,[]));if(1===a.length){var u=s;return a=a[0],e.$watch(function(e){var t=a(e);return s(t,u)||(i=r(e),u=t&&t.valueOf()),i},t,n)}for(var l=[],c=0,f=a.length;f>c;c++)l[c]=s;return e.$watch(function(e){for(var t=!1,n=0,o=a.length;o>n;n++){var u=a[n](e);(t||(t=!s(u,l[n])))&&(l[n]=u&&u.valueOf())}return t&&(i=r(e)),i},t,n)}function l(e,t,n,r){var i,a;return i=e.$watch(function(e){return r(e)},function(e,n,r){a=e,k(t)&&t.apply(this,arguments),v(e)&&r.$$postDigest(function(){v(a)&&i()})},n)}function c(e,t,n,r){function i(e){var t=!0;return a(e,function(e){v(e)||(t=!1)}),t}var o;return o=e.$watch(function(e){return r(e)},function(e,n,r){k(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(e)&&o()})},n)}function f(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(){k(t)&&t.apply(this,arguments),i()},n)}function d(e,t){if(!t)return e;var n=function(n,r){var i=e(n,r),a=t(i,n,r);return v(i)?a:i};return e.$$watchDelegate&&e.$$watchDelegate!==u?n.$$watchDelegate=e.$$watchDelegate:t.$stateful||(n.$$watchDelegate=u,n.inputs=[e]),n}return t.csp=r.csp,function(r,a){var o,s,p;switch(typeof r){case"string":if(p=r=r.trim(),o=e[p],!o){":"===r.charAt(0)&&":"===r.charAt(1)&&(s=!0,r=r.substring(2));var $=new qi(t),g=new Hi($,n,t);o=g.parse(r),o.constant?o.$$watchDelegate=f:s?(o=i(o),o.$$watchDelegate=o.literal?c:l):o.inputs&&(o.$$watchDelegate=u),e[p]=o}return d(o,a);case"function":return d(r,a);default:return d(h,a)}}}]}function _n(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return Fn(function(t){e.$evalAsync(t)},t)}]}function Nn(){this.$get=["$browser","$exceptionHandler",function(e,t){return Fn(function(t){e.defer(t)},t)}]}function Fn(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function o(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function u(e){var r,i,a;a=e.pending,e.processScheduled=!1,e.pending=n;for(var o=0,s=a.length;s>o;++o){i=a[o][0],r=a[o][e.status];try{k(r)?i.resolve(r(e.value)):1===e.status?i.resolve(e.value):i.reject(e.value)}catch(u){i.reject(u),t(u)}}}function l(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){u(t)}))}function c(){this.promise=new o,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function f(e){var t=new c,n=0,r=Qr(e)?[]:{};return a(e,function(e,i){n++,m(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var d=r("$q",TypeError),p=function(){return new c};o.prototype={then:function(e,t,n){var r=new c;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&l(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return g(t,!0,e)},function(t){return g(t,!1,e)},t)}},c.prototype={resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(d("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(y(e)||k(e))&&(n=e&&e.then),k(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,l(this.promise.$$state))}catch(a){r[1](a),t(a)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,l(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,a=0,o=r.length;o>a;a++){i=r[a][0],e=r[a][3];try{i.notify(k(e)?e(n):n)}catch(s){t(s)}}})}};var h=function(e){var t=new c;return t.reject(e),t.promise},$=function(e,t){var n=new c;return t?n.resolve(e):n.reject(e),n.promise},g=function(e,t,n){var r=null;try{k(n)&&(r=n())}catch(i){return $(i,!1)}return M(r)?r.then(function(){return $(e,t)},function(e){return $(e,!1)}):$(e,t)},m=function(e,t,n,r){var i=new c;return i.resolve(e),i.promise.then(t,n,r)},v=function b(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!k(e))throw d("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof b))return new b(e);var r=new c;return e(t,n),r.promise};return v.defer=p,v.reject=h,v.when=m,v.all=f,v}function In(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,a=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return a.supported=i,a}]}function jn(){var e=10,t=r("$rootScope"),n=null,o=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,s,u,c){function f(){this.$id=l(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this["this"]=this.$root=this,this.$$destroyed=!1,this.$$asyncQueue=[],this.$$postDigestQueue=[],this.$$listeners={},this.$$listenerCount={},this.$$isolateBindings=null,this.$$applyAsyncQueue=[]}function d(e){if(b.$$phase)throw t("inprog","{0} already in progress",b.$$phase);b.$$phase=e}function p(){b.$$phase=null}function $(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function g(){}function m(){for(var e=b.$$applyAsyncQueue;e.length;)try{e.shift()()}catch(t){s(t)}o=null}function v(){null===o&&(o=c.defer(function(){b.$apply(m)}))}f.prototype={constructor:f,$new:function(e){var t;return e?(t=new f,t.$root=this.$root,t.$$asyncQueue=this.$$asyncQueue,t.$$postDigestQueue=this.$$postDigestQueue):(this.$$ChildScope||(this.$$ChildScope=function(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$id=l(),this.$$ChildScope=null},this.$$ChildScope.prototype=this),t=new this.$$ChildScope),t["this"]=t,t.$parent=this,t.$$prevSibling=this.$$childTail,this.$$childHead?(this.$$childTail.$$nextSibling=t,this.$$childTail=t):this.$$childHead=this.$$childTail=t,t},$watch:function(e,t,r){var i=u(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,r,i);var a=this,o=a.$$watchers,s={fn:t,last:g,get:i,exp:e,eq:!!r};return n=null,k(t)||(s.fn=h),o||(o=a.$$watchers=[]),o.unshift(s),function(){F(o,s),n=null}},$watchGroup:function(e,t){function n(){u=!1,l?(l=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),o=[],s=this,u=!1,l=!0;if(!e.length){var c=!0;return s.$evalAsync(function(){c&&t(i,i,s)}),function(){c=!1}}return 1===e.length?this.$watch(e[0],function(e,n,a){i[0]=e,r[0]=n,t(i,e===n?i:r,a)}):(a(e,function(e,t){var a=s.$watch(e,function(e,a){i[t]=e,r[t]=a,u||(u=!0,s.$evalAsync(n))});o.push(a)}),function(){for(;o.length;)o.shift()()})},$watchCollection:function(e,t){function n(e){a=e;var t,n,r,s,u;if(y(a))if(i(a)){o!==p&&(o=p,g=o.length=0,f++),t=a.length,g!==t&&(f++,o.length=g=t);for(var l=0;t>l;l++)u=o[l],s=a[l],r=u!==u&&s!==s,r||u===s||(f++,o[l]=s)}else{o!==h&&(o=h={},g=0,f++),t=0;for(n in a)a.hasOwnProperty(n)&&(t++,s=a[n],u=o[n],n in o?(r=u!==u&&s!==s,r||u===s||(f++,o[n]=s)):(g++,o[n]=s,f++));if(g>t){f++;for(n in o)a.hasOwnProperty(n)||(g--,delete o[n])}}else o!==a&&(o=a,f++);return f}function r(){if($?($=!1,t(a,a,l)):t(a,s,l),c)if(y(a))if(i(a)){s=new Array(a.length);for(var e=0;e<a.length;e++)s[e]=a[e]}else{s={};for(var n in a)Fr.call(a,n)&&(s[n]=a[n])}else s=a}n.$stateful=!0;var a,o,s,l=this,c=t.length>1,f=0,d=u(e,n),p=[],h={},$=!0,g=0;return this.$watch(d,r)},$digest:function(){var r,i,a,u,l,f,h,$,v,y,w,x=this.$$asyncQueue,C=this.$$postDigestQueue,S=e,D=this,A=[];d("$digest"),c.$$checkUrlChange(),this===b&&null!==o&&(c.defer.cancel(o),m()),n=null;do{for(f=!1,$=D;x.length;){try{w=x.shift(),w.scope.$eval(w.expression)}catch(E){s(E)}n=null}e:do{if(u=$.$$watchers)for(l=u.length;l--;)try{if(r=u[l])if((i=r.get($))===(a=r.last)||(r.eq?P(i,a):"number"==typeof i&&"number"==typeof a&&isNaN(i)&&isNaN(a))){if(r===n){f=!1;break e}}else f=!0,n=r,r.last=r.eq?I(i,null):i,r.fn(i,a===g?i:a,$),5>S&&(v=4-S,A[v]||(A[v]=[]),y=k(r.exp)?"fn: "+(r.exp.name||r.exp.toString()):r.exp,y+="; newVal: "+U(i)+"; oldVal: "+U(a),A[v].push(y))}catch(E){s(E)}if(!(h=$.$$childHead||$!==D&&$.$$nextSibling))for(;$!==D&&!(h=$.$$nextSibling);)$=$.$parent}while($=h);if((f||x.length)&&!S--)throw p(),t("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,U(A))}while(f||x.length);for(p();C.length;)try{C.shift()()}catch(E){s(E)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;if(this.$broadcast("$destroy"),this.$$destroyed=!0,this!==b){for(var t in this.$$listenerCount)$(this,this.$$listenerCount[t],t);e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$parent=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=this.$root=null,this.$$listeners={},this.$$watchers=this.$$asyncQueue=this.$$postDigestQueue=[],this.$destroy=this.$digest=this.$apply=h,this.$on=this.$watch=this.$watchGroup=function(){return h}}}},$eval:function(e,t){return u(e)(this,t)},$evalAsync:function(e){b.$$phase||b.$$asyncQueue.length||c.defer(function(){b.$$asyncQueue.length&&b.$digest()}),this.$$asyncQueue.push({scope:this,expression:e})},$$postDigest:function(e){this.$$postDigestQueue.push(e)},$apply:function(e){try{return d("$apply"),this.$eval(e)}catch(t){s(t)}finally{p();try{b.$digest()}catch(t){throw s(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&b.$$applyAsyncQueue.push(t),v()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){n[n.indexOf(t)]=null,$(i,1,e)}},$emit:function(e){var t,n,r,i=[],a=this,o=!1,u={name:e,targetScope:a,stopPropagation:function(){o=!0},preventDefault:function(){u.defaultPrevented=!0},defaultPrevented:!1},l=R([u],arguments,1);do{for(t=a.$$listeners[e]||i,u.currentScope=a,n=0,r=t.length;r>n;n++)if(t[n])try{t[n].apply(null,l)}catch(c){s(c)}else t.splice(n,1),n--,r--;if(o)return u.currentScope=null,u;a=a.$parent}while(a);return u.currentScope=null,u},$broadcast:function(e){var t=this,n=t,r=t,i={name:e,targetScope:t,preventDefault:function(){i.defaultPrevented=!0},defaultPrevented:!1};if(!t.$$listenerCount[e])return i;for(var a,o,u,l=R([i],arguments,1);n=r;){for(i.currentScope=n,a=n.$$listeners[e]||[],o=0,u=a.length;u>o;o++)if(a[o])try{a[o].apply(null,l)}catch(c){s(c)}else a.splice(o,1),o--,u--;if(!(r=n.$$listenerCount[e]&&n.$$childHead||n!==t&&n.$$nextSibling))for(;n!==t&&!(r=n.$$nextSibling);)n=n.$parent}return i.currentScope=null,i}};var b=new f;return b}]}function Pn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return v(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return v(e)?(t=e,this):t
},this.$get=function(){return function(n,r){var i,a=r?t:e;return Rr&&!(Rr>=8)||(i=Kn(n).href,""===i||i.match(a))?n:"unsafe:"+i}}}function Rn(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")}function qn(e){if("self"===e)return e;if(b(e)){if(e.indexOf("***")>-1)throw Ui("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=Rn(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(C(e))return new RegExp("^"+e.source+"$");throw Ui("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Hn(e){var t=[];return v(e)&&a(e,function(e){t.push(qn(e))}),t}function Ln(){this.SCE_CONTEXTS=Bi;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=Hn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=Hn(e)),t},this.$get=["$injector",function(r){function i(e,t){return"self"===e?Gn(t):!!e.exec(t.href)}function a(n){var r,a,o=Kn(n.toString()),s=!1;for(r=0,a=e.length;a>r;r++)if(i(e[r],o)){s=!0;break}if(s)for(r=0,a=t.length;a>r;r++)if(i(t[r],o)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function s(e,t){var r=d.hasOwnProperty(e)?d[e]:null;if(!r)throw Ui("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||t===n||""===t)return t;if("string"!=typeof t)throw Ui("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new r(t)}function u(e){return e instanceof f?e.$$unwrapTrustedValue():e}function l(e,t){if(null===t||t===n||""===t)return t;var r=d.hasOwnProperty(e)?d[e]:null;if(r&&t instanceof r)return t.$$unwrapTrustedValue();if(e===Bi.RESOURCE_URL){if(a(t))return t;throw Ui("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===Bi.HTML)return c(t);throw Ui("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(){throw Ui("unsafe","Attempting to use an unsafe value in a safe context.")};r.has("$sanitize")&&(c=r.get("$sanitize"));var f=o(),d={};return d[Bi.HTML]=o(f),d[Bi.CSS]=o(f),d[Bi.URL]=o(f),d[Bi.JS]=o(f),d[Bi.RESOURCE_URL]=o(d[Bi.URL]),{trustAs:s,getTrusted:l,valueOf:u}}]}function Un(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sniffer","$sceDelegate",function(t,n,r){if(e&&n.msie&&n.msieDocumentMode<8)throw Ui("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 9 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var i=j(Bi);i.isEnabled=function(){return e},i.trustAs=r.trustAs,i.getTrusted=r.getTrusted,i.valueOf=r.valueOf,e||(i.trustAs=i.getTrusted=function(e,t){return t},i.valueOf=$),i.parseAs=function(e,n){var r=t(n);return r.literal&&r.constant?r:t(n,function(t){return i.getTrusted(e,t)})};var o=i.parseAs,s=i.getTrusted,u=i.trustAs;return a(Bi,function(e,t){var n=Nr(t);i[pt("parse_as_"+n)]=function(t){return o(e,t)},i[pt("get_trusted_"+n)]=function(t){return s(e,t)},i[pt("trust_as_"+n)]=function(t){return u(e,t)}}),i}]}function Bn(){this.$get=["$window","$document",function(e,t){var n,r,i={},a=d((/android (\d+)/.exec(Nr((e.navigator||{}).userAgent))||[])[1]),o=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},u=s.documentMode,l=/^(Moz|webkit|O|ms)(?=[A-Z])/,c=s.body&&s.body.style,f=!1,p=!1;if(c){for(var h in c)if(r=l.exec(h)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in c&&"webkit"),f=!!("transition"in c||n+"Transition"in c),p=!!("animation"in c||n+"Animation"in c),!a||f&&p||(f=b(s.body.style.webkitTransition),p=b(s.body.style.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>a||o),hashchange:"onhashchange"in e&&(!u||u>7),hasEvent:function(e){if("input"==e&&9==Rr)return!1;if(m(i[e])){var t=s.createElement("div");i[e]="on"+e in t}return i[e]},csp:Xr(),vendorPrefix:n,transitions:f,animations:p,android:a,msie:Rr,msieDocumentMode:u}}]}function zn(){this.$get=["$templateCache","$http","$q",function(e,t,n){function r(i,a){function o(){if(s.totalPendingRequests--,!a)throw Ai("tpload","Failed to load template: {0}",i);return n.reject()}var s=r;return s.totalPendingRequests++,t.get(i,{cache:e}).then(function(t){var n=t.data;return n&&0!==n.length?(s.totalPendingRequests--,e.put(i,n),n):o()},o)}return r.totalPendingRequests=0,r}]}function Wn(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return a(r,function(e){var r=Yr.element(e).data("$binding");r&&a(r,function(r){if(n){var a=new RegExp("(^|\\s)"+t+"(\\s|\\||$)");a.test(r)&&i.push(e)}else-1!=r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var a=n?"=":"*=",o="["+r[i]+"model"+a+'"'+t+'"]',s=e.querySelectorAll(o);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function Yn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function a(a,s,u){var l,c=v(u)&&!u,f=(c?r:n).defer(),d=f.promise;return l=t.defer(function(){try{f.resolve(a())}catch(t){f.reject(t),i(t)}finally{delete o[d.$$timeoutId]}c||e.$apply()},s),d.$$timeoutId=l,o[l]=f,d}var o={};return a.cancel=function(e){return e&&e.$$timeoutId in o?(o[e.$$timeoutId].reject("canceled"),delete o[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},a}]}function Kn(e){var t=e;return Rr&&(zi.setAttribute("href",t),t=zi.href),zi.setAttribute("href",t),{href:zi.href,protocol:zi.protocol?zi.protocol.replace(/:$/,""):"",host:zi.host,search:zi.search?zi.search.replace(/^\?/,""):"",hash:zi.hash?zi.hash.replace(/^#/,""):"",hostname:zi.hostname,port:zi.port,pathname:"/"===zi.pathname.charAt(0)?zi.pathname:"/"+zi.pathname}}function Gn(e){var t=b(e)?Kn(e):e;return t.protocol===Wi.protocol&&t.host===Wi.host}function Qn(){this.$get=g(e)}function Jn(e){function t(r,i){if(y(r)){var o={};return a(r,function(e,n){o[n]=t(n,e)}),o}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Zn),t("date",cr),t("filter",Xn),t("json",fr),t("limitTo",dr),t("lowercase",Ji),t("number",er),t("orderBy",pr),t("uppercase",Xi)}function Xn(){return function(e,t,n){if(!Qr(e))return e;var r=typeof n,i=[];i.check=function(e,t){for(var n=0;n<i.length;n++)if(!i[n](e,t))return!1;return!0},"function"!==r&&(n="boolean"===r&&n?function(e,t){return Yr.equals(e,t)}:function(e,t){if(e&&t&&"object"==typeof e&&"object"==typeof t){for(var r in e)if("$"!==r.charAt(0)&&Fr.call(e,r)&&n(e[r],t[r]))return!0;return!1}return t=(""+t).toLowerCase(),(""+e).toLowerCase().indexOf(t)>-1});var a=function(e,t){if("string"==typeof t&&"!"===t.charAt(0))return!a(e,t.substr(1));switch(typeof e){case"boolean":case"number":case"string":return n(e,t);case"object":switch(typeof t){case"object":return n(e,t);default:for(var r in e)if("$"!==r.charAt(0)&&a(e[r],t))return!0}return!1;case"array":for(var i=0;i<e.length;i++)if(a(e[i],t))return!0;return!1;default:return!1}};switch(typeof t){case"boolean":case"number":case"string":t={$:t};case"object":for(var o in t)!function(e){"undefined"!=typeof t[e]&&i.push(function(n){return a("$"==e?n:n&&n[e],t[e])})}(o);break;case"function":i.push(t);break;default:return e}for(var s=[],u=0;u<e.length;u++){var l=e[u];i.check(l,u)&&s.push(l)}return s}}function Zn(e){var t=e.NUMBER_FORMATS;return function(e,n){return m(n)&&(n=t.CURRENCY_SYM),null==e?e:tr(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,2).replace(/\u00A4/g,n)}}function er(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:tr(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function tr(e,t,n,r,i){if(!isFinite(e)||y(e))return"";var a=0>e;e=Math.abs(e);var o=e+"",s="",u=[],l=!1;if(-1!==o.indexOf("e")){var c=o.match(/([\d\.]+)e(-?)(\d+)/);c&&"-"==c[2]&&c[3]>i+1?(o="0",e=0):(s=o,l=!0)}if(l)i>0&&e>-1&&1>e&&(s=e.toFixed(i));else{var f=(o.split(Yi)[1]||"").length;m(i)&&(i=Math.min(Math.max(t.minFrac,f),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+i)).toString()+"e"+-i),0===e&&(a=!1);var d=(""+e).split(Yi),p=d[0];d=d[1]||"";var h,$=0,g=t.lgSize,v=t.gSize;if(p.length>=g+v)for($=p.length-g,h=0;$>h;h++)($-h)%v===0&&0!==h&&(s+=n),s+=p.charAt(h);for(h=$;h<p.length;h++)(p.length-h)%g===0&&0!==h&&(s+=n),s+=p.charAt(h);for(;d.length<i;)d+="0";i&&"0"!==i&&(s+=r+d.substr(0,i))}return u.push(a?t.negPre:t.posPre),u.push(s),u.push(a?t.negSuf:t.posSuf),u.join("")}function nr(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function rr(e,t,n,r){return n=n||0,function(i){var a=i["get"+e]();return(n>0||a>-n)&&(a+=n),0===a&&-12==n&&(a=12),nr(a,t,r)}}function ir(e,t){return function(n,r){var i=n["get"+e](),a=Ir(t?"SHORT"+e:e);return r[a][i]}}function ar(e){var t=-1*e.getTimezoneOffset(),n=t>=0?"+":"";return n+=nr(Math[t>0?"floor":"ceil"](t/60),2)+nr(Math.abs(t%60),2)}function or(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function sr(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function ur(e){return function(t){var n=or(t.getFullYear()),r=sr(t),i=+r-+n,a=1+Math.round(i/6048e5);return nr(a,e)}}function lr(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function cr(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,a=0,o=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=d(t[9]+t[10]),a=d(t[9]+t[11])),o.call(r,d(t[1]),d(t[2])-1,d(t[3]));var u=d(t[4]||0)-i,l=d(t[5]||0)-a,c=d(t[6]||0),f=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,u,l,c,f),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var o,s,u="",l=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,b(n)&&(n=Qi.test(n)?d(n):t(n)),w(n)&&(n=new Date(n)),!x(n))return n;for(;r;)s=Gi.exec(r),s?(l=R(l,s,1),r=l.pop()):(l.push(r),r=null);return i&&"UTC"===i&&(n=new Date(n.getTime()),n.setMinutes(n.getMinutes()+n.getTimezoneOffset())),a(l,function(t){o=Ki[t],u+=o?o(n,e.DATETIME_FORMATS):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function fr(){return function(e){return U(e,!0)}}function dr(){return function(e,t){if(w(e)&&(e=e.toString()),!Qr(e)&&!b(e))return e;if(t=1/0===Math.abs(Number(t))?Number(t):d(t),b(e))return t?t>=0?e.slice(0,t):e.slice(t,e.length):"";var n,r,i=[];for(t>e.length?t=e.length:t<-e.length&&(t=-e.length),t>0?(n=0,r=t):(n=e.length+t,r=e.length);r>n;n++)i.push(e[n]);return i}}function pr(e){return function(t,n,r){function a(e,t){for(var r=0;r<n.length;r++){var i=n[r](e,t);if(0!==i)return i}return 0}function o(e,t){return t?function(t,n){return e(n,t)}:e}function s(e,t){var n=typeof e,r=typeof t;return n==r?(x(e)&&x(t)&&(e=e.valueOf(),t=t.valueOf()),"string"==n&&(e=e.toLowerCase(),t=t.toLowerCase()),e===t?0:t>e?-1:1):r>n?-1:1}if(!i(t))return t;if(!n)return t;n=Qr(n)?n:[n],n=N(n,function(t){var n=!1,r=t||$;if(b(t)&&(("+"==t.charAt(0)||"-"==t.charAt(0))&&(n="-"==t.charAt(0),t=t.substring(1)),r=e(t),r.constant)){var i=r();return o(function(e,t){return s(e[i],t[i])},n)}return o(function(e,t){return s(r(e),r(t))},n)});for(var u=[],l=0;l<t.length;l++)u.push(t[l]);return u.sort(o(a,r))}}function hr(e){return k(e)&&(e={link:e}),e.restrict=e.restrict||"AC",g(e)}function $r(e,t,r,i){var o=this,s=e.parent().controller("form")||ta,u=[];o.$error={},o.$$success={},o.$pending=n,o.$name=t.name||t.ngForm,o.$dirty=!1,o.$pristine=!0,o.$valid=!0,o.$invalid=!1,o.$submitted=!1,s.$addControl(o),e.addClass(wa),o.$rollbackViewValue=function(){a(u,function(e){e.$rollbackViewValue()})},o.$commitViewValue=function(){a(u,function(e){e.$commitViewValue()})},o.$addControl=function(e){ot(e.$name,"input"),u.push(e),e.$name&&(o[e.$name]=e)},o.$removeControl=function(e){e.$name&&o[e.$name]===e&&delete o[e.$name],a(o.$pending,function(t,n){o.$setValidity(n,null,e)}),a(o.$error,function(t,n){o.$setValidity(n,null,e)}),F(u,e)},Tr({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(F(r,n),0===r.length&&delete e[t])},parentForm:s,$animate:i}),o.$setDirty=function(){i.removeClass(e,wa),i.addClass(e,xa),o.$dirty=!0,o.$pristine=!1,s.$setDirty()},o.$setPristine=function(){i.setClass(e,wa,xa+" "+na),o.$dirty=!1,o.$pristine=!0,o.$submitted=!1,a(u,function(e){e.$setPristine()})},o.$setSubmitted=function(){i.addClass(e,na),o.$submitted=!0,s.$setSubmitted()}}function gr(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function mr(e,t,n,r,i,a){vr(e,t,n,r,i,a),gr(r)}function vr(e,t,n,r,i,a){var o=(t.prop(_r),t[0].placeholder),s={},u=Nr(t[0].type);if(!i.android){var l=!1;t.on("compositionstart",function(){l=!0}),t.on("compositionend",function(){l=!1,c()})}var c=function(e){if(!l){var i=t.val(),a=e&&e.type;if(Rr&&"input"===(e||s).type&&t[0].placeholder!==o)return void(o=t[0].placeholder);"password"===u||n.ngTrim&&"false"===n.ngTrim||(i=Jr(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,a)}};if(i.hasEvent("input"))t.on("input",c);else{var f,d=function(e){f||(f=a.defer(function(){c(e),f=null}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||d(e)}),i.hasEvent("paste")&&t.on("paste cut",d)}t.on("change",c),r.$render=function(){t.val(r.$isEmpty(r.$modelValue)?"":r.$viewValue)}}function yr(e,t){if(x(e))return e;if(b(e)){da.lastIndex=0;var n=da.exec(e);if(n){var r=+n[1],i=+n[2],a=0,o=0,s=0,u=0,l=or(r),c=7*(i-1);return t&&(a=t.getHours(),o=t.getMinutes(),s=t.getSeconds(),u=t.getMilliseconds()),new Date(r,0,l.getDate()+c,a,o,s,u)}}return 0/0}function br(e,t){return function(n,r){var i,o;if(x(n))return n;if(b(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),oa.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),o=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},a(i,function(e,n){n<t.length&&(o[t[n]]=+e)}),new Date(o.yyyy,o.MM-1,o.dd,o.HH,o.mm,o.ss||0,o.sss||0)}return 0/0}}function wr(e,t,r,i){return function(a,o,s,u,l,c,f){function d(e){return v(e)?x(e)?e:r(e):n}xr(a,o,s,u),vr(a,o,s,u,l,c);var p=u&&u.$options&&u.$options.timezone;if(u.$$parserName=e,u.$parsers.push(function(e){if(u.$isEmpty(e))return null;if(t.test(e)){var i=u.$modelValue;if(i&&"UTC"===p){var a=6e4*i.getTimezoneOffset();i=new Date(i.getTime()+a)}var o=r(e,i);return"UTC"===p&&o.setMinutes(o.getMinutes()-o.getTimezoneOffset()),o}return n}),u.$formatters.push(function(e){return x(e)?f("date")(e,i,p):""}),v(s.min)||s.ngMin){var h;u.$validators.min=function(e){return u.$isEmpty(e)||m(h)||r(e)>=h},s.$observe("min",function(e){h=d(e),u.$validate()})}if(v(s.max)||s.ngMax){var $;u.$validators.max=function(e){return u.$isEmpty(e)||m($)||r(e)<=$},s.$observe("max",function(e){$=d(e),u.$validate()})}}}function xr(e,t,r,i){var a=t[0],o=i.$$hasNativeValidators=y(a.validity);o&&i.$parsers.push(function(e){var r=t.prop(_r)||{};return r.badInput&&!r.typeMismatch?n:e})}function kr(e,t,r,i,a,o){if(xr(e,t,r,i),vr(e,t,r,i,a,o),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:la.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!w(e))throw ga("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),r.min||r.ngMin){var s;i.$validators.min=function(e){return i.$isEmpty(e)||m(s)||e>=s},r.$observe("min",function(e){v(e)&&!w(e)&&(e=parseFloat(e,10)),s=w(e)&&!isNaN(e)?e:n,i.$validate()})}if(r.max||r.ngMax){var u;i.$validators.max=function(e){return i.$isEmpty(e)||m(u)||u>=e},r.$observe("max",function(e){v(e)&&!w(e)&&(e=parseFloat(e,10)),u=w(e)&&!isNaN(e)?e:n,i.$validate()})}}function Cr(e,t,n,r,i,a){vr(e,t,n,r,i,a),gr(r),r.$$parserName="url",r.$validators.url=function(e){return r.$isEmpty(e)||sa.test(e)}}function Sr(e,t,n,r,i,a){vr(e,t,n,r,i,a),gr(r),r.$$parserName="email",r.$validators.email=function(e){return r.$isEmpty(e)||ua.test(e)}}function Dr(e,t,n,r){m(n.name)&&t.attr("name",l());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function Ar(e,t,n,i,a){var o;if(v(i)){if(o=e(i),!o.constant)throw r("ngModel")("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,i);return o(t)}return a}function Er(e,t,n,r,i,a,o,s){var u=Ar(s,e,"ngTrueValue",n.ngTrueValue,!0),l=Ar(s,e,"ngFalseValue",n.ngFalseValue,!1),c=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",c),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e!==u},r.$formatters.push(function(e){return P(e,u)}),r.$parsers.push(function(e){return e?u:l})}function Tr(e){function t(e,t,u){t===n?r("$pending",e,u):i("$pending",e,u),T(t)?t?(f(s.$error,e,u),c(s.$$success,e,u)):(c(s.$error,e,u),f(s.$$success,e,u)):(f(s.$error,e,u),f(s.$$success,e,u)),s.$pending?(a(Sa,!0),s.$valid=s.$invalid=n,o("",null)):(a(Sa,!1),s.$valid=Mr(s.$error),s.$invalid=!s.$valid,o("",s.$valid));var l;l=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,o(e,l),d.$setValidity(e,l,s)}function r(e,t,n){s[e]||(s[e]={}),c(s[e],t,n)}function i(e,t,r){s[e]&&f(s[e],t,r),Mr(s[e])&&(s[e]=n)}function a(e,t){t&&!l[e]?(p.addClass(u,e),l[e]=!0):!t&&l[e]&&(p.removeClass(u,e),l[e]=!1)}function o(e,t){e=e?"-"+nt(e,"-"):"",a(ya+e,t===!0),a(ba+e,t===!1)}var s=e.ctrl,u=e.$element,l={},c=e.set,f=e.unset,d=e.parentForm,p=e.$animate;s.$setValidity=t,o("",!0)}function Mr(e){if(e)for(var t in e)return!1;return!0}function Or(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],a=0;a<t.length;a++)if(i==t[a])continue e;n.push(i)}return n}function i(e){if(Qr(e))return e;if(b(e))return e.split(" ");if(y(e)){var t=[];return a(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t}return e}return{restrict:"AC",link:function(o,s,u){function l(e){var t=f(e,1);u.$addClass(t)}function c(e){var t=f(e,-1);u.$removeClass(t)}function f(e,t){var n=s.data("$classCounts")||{},r=[];return a(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function d(e,t){var i=r(t,e),a=r(e,t);i=f(i,1),a=f(a,-1),i&&i.length&&n.addClass(s,i),a&&a.length&&n.removeClass(s,a)}function p(e){if(t===!0||o.$index%2===t){var n=i(e||[]);if(h){if(!P(e,h)){var r=i(h);d(r,n)}}else l(n)}h=j(e)}var h;o.$watch(u[e],p,!0),u.$observe("class",function(){p(o.$eval(u[e]))}),"ngClass"!==e&&o.$watch("$index",function(n,r){var a=1&n;if(a!==(1&r)){var s=i(o.$eval(u[e]));a===t?l(s):c(s)}})}}}]}var Vr=/^\/(.+)\/([a-z]*)$/,_r="validity",Nr=function(e){return b(e)?e.toLowerCase():e},Fr=Object.prototype.hasOwnProperty,Ir=function(e){return b(e)?e.toUpperCase():e},jr=function(e){return b(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},Pr=function(e){return b(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Nr=jr,Ir=Pr);var Rr,qr,Hr,Lr,Ur=[].slice,Br=[].push,zr=Object.prototype.toString,Wr=r("ng"),Yr=e.angular||(e.angular={}),Kr=0;Rr=d((/msie (\d+)/.exec(Nr(navigator.userAgent))||[])[1]),isNaN(Rr)&&(Rr=d((/trident\/.*; rv:(\d+)/.exec(Nr(navigator.userAgent))||[])[1])),h.$inject=[],$.$inject=[];var Gr,Qr=Array.isArray,Jr=function(e){return b(e)?e.trim():e},Xr=function(){if(v(Xr.isActive_))return Xr.isActive_;var e=!(!t.querySelector("[ng-csp]")&&!t.querySelector("[data-ng-csp]"));if(!e)try{new Function("")}catch(n){e=!0}return Xr.isActive_=e},Zr=["ng-","data-ng-","ng:","x-ng-"],ei=/[A-Z]/g,ti=!1,ni={full:"1.3.0-rc.2",major:1,minor:3,dot:0,codeName:"tactile-perception"};vt.expando="ng339";var ri=vt.cache={},ii=1,ai=function(e,t,n){e.addEventListener(t,n,!1)},oi=function(e,t,n){e.removeEventListener(t,n,!1)};vt._data=function(e){return this.cache[e[this.expando]]||{}};var si=/([\:\-\_]+(.))/g,ui=/^moz([A-Z])/,li={mouseleave:"mouseout",mouseenter:"mouseover"},ci=r("jqLite"),fi=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,di=/<|&#?\w+;/,pi=/<([\w:]+)/,hi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,$i={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};$i.optgroup=$i.option,$i.tbody=$i.tfoot=$i.colgroup=$i.caption=$i.thead,$i.th=$i.td;var gi=vt.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),vt(e).on("load",r),this.on("DOMContentLoaded",r))},toString:function(){var e=[];return a(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return qr(e>=0?this[e]:this[this.length+e])},length:0,push:Br,sort:[].sort,splice:[].splice},mi={};a("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){mi[Nr(e)]=e});var vi={};a("input,select,option,textarea,button,form,details".split(","),function(e){vi[e]=!0});var yi={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};a({data:Ct,removeData:xt},function(e,t){vt[t]=e}),a({data:Ct,inheritedData:Mt,scope:function(e){return qr.data(e,"$scope")||Mt(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return qr.data(e,"$isolateScope")||qr.data(e,"$isolateScopeNoTemplate")},controller:Tt,injector:function(e){return Mt(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:St,css:function(e,t,n){return t=pt(t),v(n)?void(e.style[t]=n):e.style[t]},attr:function(e,t,r){var i=Nr(t);if(mi[i]){if(!v(r))return e[t]||(e.attributes.getNamedItem(t)||h).specified?i:n;r?(e[t]=!0,e.setAttribute(t,i)):(e[t]=!1,e.removeAttribute(i))}else if(v(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}},prop:function(e,t,n){return v(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(m(t)){var n=e.nodeType;return 1===n||3===n?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(m(t)){if(e.multiple&&"select"===_(e)){var n=[];return a(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return m(t)?e.innerHTML:(bt(e,!0),void(e.innerHTML=t))},empty:Ot},function(e,t){vt.prototype[t]=function(t,r){var i,a,o=this.length;if(e!==Ot&&(2==e.length&&e!==St&&e!==Tt?t:r)===n){if(y(t)){for(i=0;o>i;i++)if(e===Ct)e(this[i],t);else for(a in t)e(this[i],a,t[a]);return this}for(var s=e.$dv,u=s===n?Math.min(o,1):o,l=0;u>l;l++){var c=e(this[l],t,r);s=s?s+c:c}return s}for(i=0;o>i;i++)e(this[i],t,r);return this}}),a({removeData:xt,on:function ho(e,t,n,r){if(v(r))throw ci("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if($t(e)){var i=kt(e,!0),a=i.events,o=i.handle;o||(o=i.handle=Ft(e,a));for(var s=t.indexOf(" ")>=0?t.split(" "):[t],u=s.length;u--;){t=s[u];var l=a[t];l||(a[t]=[],"mouseenter"===t||"mouseleave"===t?ho(e,li[t],function(e){var n=this,r=e.relatedTarget;(!r||r!==n&&!n.contains(r))&&o(e,t)}):"$destroy"!==t&&ai(e,t,o),l=a[t]),l.push(n)}}},off:wt,one:function(e,t,n){e=qr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;bt(e),a(new vt(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return a(e.childNodes,function(e){1===e.nodeType&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(1===n||11===n){t=new vt(t);for(var r=0,i=t.length;i>r;r++){var a=t[r];e.appendChild(a)}}},prepend:function(e,t){if(1===e.nodeType){var n=e.firstChild;a(new vt(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=qr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:Vt,detach:function(e){Vt(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new vt(t);for(var i=0,a=t.length;a>i;i++){var o=t[i];r.insertBefore(o,n.nextSibling),n=o}},addClass:At,removeClass:Dt,toggleClass:function(e,t,n){t&&a(t.split(" "),function(t){var r=n;m(r)&&(r=!St(e,t)),(r?At:Dt)(e,t)})},parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:yt,triggerHandler:function(e,t,n){var r,i,o,s=t.type||t,u=kt(e),l=u&&u.events,c=l&&l[s];c&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:h,type:s,target:e},t.type&&(r=f(r,t)),i=j(c),o=n?[r].concat(n):[r],a(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,o)}))}},function(e,t){vt.prototype[t]=function(t,n,r){for(var i,a=0,o=this.length;o>a;a++)m(i)?(i=e(this[a],t,n,r),v(i)&&(i=qr(i))):Et(i,e(this[a],t,n,r));return v(i)?i:this},vt.prototype.bind=vt.prototype.on,vt.prototype.unbind=vt.prototype.off}),jt.prototype={put:function(e,t){this[It(e,this.nextUid)]=t},get:function(e){return this[It(e,this.nextUid)]},remove:function(e){var t=this[e=It(e,this.nextUid)];return delete this[e],t}};var bi=/^function\s*[^\(]*\(\s*([^\)]*)\)/m,wi=/,/,xi=/^\s*(_?)(\S+?)\1\s*$/,ki=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ci=r("$injector");qt.$$annotate=Rt;var Si=r("$animate"),Di=["$provide",function(e){this.$$selectors={},this.register=function(t,n){var r=t+"-animation";if(t&&"."!=t.charAt(0))throw Si("notcsel","Expecting class selector starting with '.' got '{0}'.",t);this.$$selectors[t.substr(1)]=r,e.factory(r,n)},this.classNameFilter=function(e){return 1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null),this.$$classNameFilter},this.$get=["$$q","$$asyncCallback",function(e,t){function n(){return r||(r=e.defer(),t(function(){r.resolve(),r=null})),r.promise}var r;return{enter:function(e,t,r){return r?r.after(e):t.prepend(e),n()},leave:function(e){return e.remove(),n()},move:function(e,t,n){return this.enter(e,t,n)},addClass:function(e,t){return t=b(t)?t:Qr(t)?t.join(" "):"",a(e,function(e){At(e,t)}),n()},removeClass:function(e,t){return t=b(t)?t:Qr(t)?t.join(" "):"",a(e,function(e){Dt(e,t)}),n()},setClass:function(e,t,r){return this.addClass(e,t),this.removeClass(e,r),n()},enabled:h,cancel:h}}]}],Ai=r("$compile");Yt.$inject=["$provide","$$sanitizeUriProvider"];var Ei=/^(x[\:\-_]|data[\:\-_])/i,Ti=r("$interpolate"),Mi=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Oi={http:80,https:443,ftp:21},Vi=r("$location");bn.prototype=yn.prototype=vn.prototype={$$html5:!1,$$replace:!1,absUrl:wn("$$absUrl"),url:function(e){if(m(e))return this.$$url;var t=Mi.exec(e);return t[1]&&this.path(decodeURIComponent(t[1])),(t[2]||t[1])&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:wn("$$protocol"),host:wn("$$host"),port:wn("$$port"),path:xn("$$path",function(e){return e=e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(b(e)||w(e))e=e.toString(),this.$$search=Y(e);else{if(!y(e))throw Vi("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");a(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:m(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:xn("$$hash",function(e){return e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};var _i=r("$parse"),Ni=Function.prototype.call,Fi=Function.prototype.apply,Ii=Function.prototype.bind,ji=lt();a({"null":function(){return null},"true":function(){return!0},"false":function(){return!1},undefined:function(){}},function(e,t){e.constant=e.literal=e.sharedGetter=!0,ji[t]=e});var Pi=f(lt(),{"+":function(e,t,r,i){return r=r(e,t),i=i(e,t),v(r)?v(i)?r+i:r:v(i)?i:n},"-":function(e,t,n,r){return n=n(e,t),r=r(e,t),(v(n)?n:0)-(v(r)?r:0)},"*":function(e,t,n,r){return n(e,t)*r(e,t)},"/":function(e,t,n,r){return n(e,t)/r(e,t)},"%":function(e,t,n,r){return n(e,t)%r(e,t)},"^":function(e,t,n,r){return n(e,t)^r(e,t)},"===":function(e,t,n,r){return n(e,t)===r(e,t)},"!==":function(e,t,n,r){return n(e,t)!==r(e,t)},"==":function(e,t,n,r){return n(e,t)==r(e,t)},"!=":function(e,t,n,r){return n(e,t)!=r(e,t)},"<":function(e,t,n,r){return n(e,t)<r(e,t)},">":function(e,t,n,r){return n(e,t)>r(e,t)},"<=":function(e,t,n,r){return n(e,t)<=r(e,t)},">=":function(e,t,n,r){return n(e,t)>=r(e,t)},"&&":function(e,t,n,r){return n(e,t)&&r(e,t)},"||":function(e,t,n,r){return n(e,t)||r(e,t)},"&":function(e,t,n,r){return n(e,t)&r(e,t)},"!":function(e,t,n){return!n(e,t)},"=":!0,"|":!0}),Ri={n:"\n",f:"\f",r:"\r",t:"	",v:"","'":"'",'"':'"'},qi=function(e){this.options=e};qi.prototype={constructor:qi,lex:function(e){for(this.text=e,this.index=0,this.ch=n,this.tokens=[];this.index<this.text.length;)if(this.ch=this.text.charAt(this.index),this.is("\"'"))this.readString(this.ch);else if(this.isNumber(this.ch)||this.is(".")&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(this.ch))this.readIdent();else if(this.is("(){}[].,;:?"))this.tokens.push({index:this.index,text:this.ch}),this.index++;else if(this.isWhitespace(this.ch))this.index++;else{var t=this.ch+this.peek(),r=t+this.peek(2),i=Pi[this.ch],a=Pi[t],o=Pi[r];o?(this.tokens.push({index:this.index,text:r,fn:o}),this.index+=3):a?(this.tokens.push({index:this.index,text:t,fn:a}),this.index+=2):i?(this.tokens.push({index:this.index,text:this.ch,fn:i}),this.index+=1):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(e){return-1!==e.indexOf(this.ch)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||""===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=v(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw _i("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Nr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}e=1*e,this.tokens.push({index:t,text:e,constant:!0,fn:function(){return e}})},readIdent:function(){for(var e,t,r,i,a=this.text,o="",s=this.index;this.index<this.text.length&&(i=this.text.charAt(this.index),"."===i||this.isIdent(i)||this.isNumber(i));)"."===i&&(e=this.index),o+=i,this.index++;if(e&&"."===o[o.length-1]&&(this.index--,o=o.slice(0,-1),e=o.lastIndexOf("."),-1===e&&(e=n)),e)for(t=this.index;t<this.text.length;){if(i=this.text.charAt(t),"("===i){r=o.substr(e-s+1),o=o.substr(0,e-s),this.index=t;break}if(!this.isWhitespace(i))break;
t++}this.tokens.push({index:s,text:o,fn:ji[o]||On(o,this.options,a)}),r&&(this.tokens.push({index:e,text:"."}),this.tokens.push({index:e+1,text:r}))},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var a=this.text.charAt(this.index);if(r+=a,i){if("u"===a){var o=this.text.substring(this.index+1,this.index+5);o.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+o+"]"),this.index+=4,n+=String.fromCharCode(parseInt(o,16))}else{var s=Ri[a];n+=s||a}i=!1}else if("\\"===a)i=!0;else{if(a===e)return this.index++,void this.tokens.push({index:t,text:r,string:n,constant:!0,fn:function(){return n}});n+=a}this.index++}this.throwError("Unterminated quote",t)}};var Hi=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n};Hi.ZERO=f(function(){return 0},{sharedGetter:!0,constant:!0}),Hi.prototype={constructor:Hi,parse:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.statements();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t.literal=!!t.literal,t.constant=!!t.constant,t},primary:function(){var e;if(this.expect("("))e=this.filterChain(),this.consume(")");else if(this.expect("["))e=this.arrayDeclaration();else if(this.expect("{"))e=this.object();else{var t=this.expect();e=t.fn,e||this.throwError("not a primary expression",t),t.constant&&(e.constant=!0,e.literal=!0)}for(var n,r;n=this.expect("(","[",".");)"("===n.text?(e=this.functionCall(e,r),r=null):"["===n.text?(r=e,e=this.objectIndex(e)):"."===n.text?(r=e,e=this.fieldAccess(e)):this.throwError("IMPOSSIBLE");return e},throwError:function(e,t){throw _i("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},peekToken:function(){if(0===this.tokens.length)throw _i("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){if(this.tokens.length>0){var i=this.tokens[0],a=i.text;if(a===e||a===t||a===n||a===r||!e&&!t&&!n&&!r)return i}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},consume:function(e){this.expect(e)||this.throwError("is unexpected, expecting ["+e+"]",this.peek())},unaryFn:function(e,t){return f(function(n,r){return e(n,r,t)},{constant:t.constant,inputs:[t]})},binaryFn:function(e,t,n,r){return f(function(r,i){return t(r,i,e,n)},{constant:e.constant&&n.constant,inputs:!r&&[e,n]})},statements:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.filterChain()),!this.expect(";"))return 1===e.length?e[0]:function(t,n){for(var r,i=0,a=e.length;a>i;i++)r=e[i](t,n);return r}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},filter:function(e){var t,r,i=this.expect(),a=this.$filter(i.text);if(this.peek(":"))for(t=[],r=[];this.expect(":");)t.push(this.expression());var o=[e].concat(t||[]);return f(function(i,o){var s=e(i,o);if(r){r[0]=s;for(var u=t.length;u--;)r[u+1]=t[u](i,o);return a.apply(n,r)}return a(s)},{constant:!a.$stateful&&o.every(En),inputs:!a.$stateful&&o})},expression:function(){return this.assignment()},assignment:function(){var e,t,n=this.ternary();return(t=this.expect("="))?(n.assign||this.throwError("implies assignment but ["+this.text.substring(0,t.index)+"] can not be assigned to",t),e=this.ternary(),f(function(t,r){return n.assign(t,e(t,r),r)},{inputs:[n,e]})):n},ternary:function(){var e,t,n=this.logicalOR();if(t=this.expect("?")){if(e=this.assignment(),t=this.expect(":")){var r=this.assignment();return f(function(t,i){return n(t,i)?e(t,i):r(t,i)},{constant:n.constant&&e.constant&&r.constant})}this.throwError("expected :",t)}return n},logicalOR:function(){for(var e,t=this.logicalAND();e=this.expect("||");)t=this.binaryFn(t,e.fn,this.logicalAND(),!0);return t},logicalAND:function(){var e,t=this.equality();return(e=this.expect("&&"))&&(t=this.binaryFn(t,e.fn,this.logicalAND(),!0)),t},equality:function(){var e,t=this.relational();return(e=this.expect("==","!=","===","!=="))&&(t=this.binaryFn(t,e.fn,this.equality())),t},relational:function(){var e,t=this.additive();return(e=this.expect("<",">","<=",">="))&&(t=this.binaryFn(t,e.fn,this.relational())),t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t=this.binaryFn(t,e.fn,this.multiplicative());return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t=this.binaryFn(t,e.fn,this.unary());return t},unary:function(){var e;return this.expect("+")?this.primary():(e=this.expect("-"))?this.binaryFn(Hi.ZERO,e.fn,this.unary()):(e=this.expect("!"))?this.unaryFn(e.fn,this.unary()):this.primary()},fieldAccess:function(e){var t=this.text,n=this.expect().text,r=On(n,this.options,t);return f(function(t,n,i){return r(i||e(t,n))},{assign:function(r,i,a){var o=e(r,a);return o||e.assign(r,o={}),Tn(o,n,i,t)}})},objectIndex:function(e){var t=this.text,r=this.expression();return this.consume("]"),f(function(i,a){var o,s=e(i,a),u=r(i,a);return Sn(u,t),s?o=Dn(s[u],t):n},{assign:function(n,i,a){var o=Sn(r(n,a),t),s=Dn(e(n,a),t);return s||e.assign(n,s={}),s[o]=i}})},functionCall:function(e,t){var n=[];if(")"!==this.peekToken().text)do n.push(this.expression());while(this.expect(","));this.consume(")");var r=this.text,i=n.length?[]:null;return function(a,o){var s=t?t(a,o):a,u=e(a,o,s)||h;if(i)for(var l=n.length;l--;)i[l]=Dn(n[l](a,o),r);Dn(s,r),An(u,r);var c=u.apply?u.apply(s,i):u(i[0],i[1],i[2],i[3],i[4]);return Dn(c,r)}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;var t=this.expression();e.push(t)}while(this.expect(","));return this.consume("]"),f(function(t,n){for(var r=[],i=0,a=e.length;a>i;i++)r.push(e[i](t,n));return r},{literal:!0,constant:e.every(En),inputs:e})},object:function(){var e=[],t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;var n=this.expect();e.push(n.string||n.text),this.consume(":");var r=this.expression();t.push(r)}while(this.expect(","));return this.consume("}"),f(function(n,r){for(var i={},a=0,o=t.length;o>a;a++)i[e[a]]=t[a](n,r);return i},{literal:!0,constant:t.every(En),inputs:t})}};var Li=lt(),Ui=r("$sce"),Bi={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Ai=r("$compile"),zi=t.createElement("a"),Wi=Kn(e.location.href,!0);Jn.$inject=["$provide"],Zn.$inject=["$locale"],er.$inject=["$locale"];var Yi=".",Ki={yyyy:rr("FullYear",4),yy:rr("FullYear",2,0,!0),y:rr("FullYear",1),MMMM:ir("Month"),MMM:ir("Month",!0),MM:rr("Month",2,1),M:rr("Month",1,1),dd:rr("Date",2),d:rr("Date",1),HH:rr("Hours",2),H:rr("Hours",1),hh:rr("Hours",2,-12),h:rr("Hours",1,-12),mm:rr("Minutes",2),m:rr("Minutes",1),ss:rr("Seconds",2),s:rr("Seconds",1),sss:rr("Milliseconds",3),EEEE:ir("Day"),EEE:ir("Day",!0),a:lr,Z:ar,ww:ur(2),w:ur(1)},Gi=/((?:[^yMdHhmsaZEw']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|w+))(.*)/,Qi=/^\-?\d+$/;cr.$inject=["$locale"];var Ji=g(Nr),Xi=g(Ir);pr.$inject=["$parse"];var Zi=g({restrict:"E",compile:function(e,n){return 8>=Rr&&(n.href||n.name||n.$set("href",""),e.append(t.createComment("IE fix"))),n.href||n.xlinkHref||n.name?void 0:function(e,t){var n="[object SVGAnimatedString]"===zr.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}),ea={};a(mi,function(e,t){if("multiple"!=e){var n=Kt("ng-"+t);ea[n]=function(){return{restrict:"A",priority:100,link:function(e,r,i){e.$watch(i[n],function(e){i.$set(t,!!e)})}}}}}),a(yi,function(e,t){ea[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(Vr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),a(["src","srcset","href"],function(e){var t=Kt("ng-"+e);ea[t]=function(){return{priority:99,link:function(n,r,i){var a=e,o=e;"href"===e&&"[object SVGAnimatedString]"===zr.call(r.prop("href"))&&(o="xlinkHref",i.$attr[o]="xlink:href",a=null),i.$observe(t,function(t){return t?(i.$set(o,t),void(Rr&&a&&r.prop(a,i[o]))):void("href"===e&&i.$set(o,null))})}}}});var ta={$addControl:h,$removeControl:h,$setValidity:h,$$setPending:h,$setDirty:h,$setPristine:h,$setSubmitted:h,$$clearControlValidity:h},na="ng-submitted";$r.$inject=["$element","$attrs","$scope","$animate"];var ra=function(e){return["$timeout",function(t){var r={name:"form",restrict:e?"EAC":"E",controller:$r,compile:function(){return{pre:function(e,r,i,a){if(!i.action){var o=function(t){e.$apply(function(){a.$commitViewValue(),a.$setSubmitted()}),t.preventDefault?t.preventDefault():t.returnValue=!1};ai(r[0],"submit",o),r.on("$destroy",function(){t(function(){oi(r[0],"submit",o)},0,!1)})}var s=r.parent().controller("form"),u=i.name||i.ngForm;u&&Tn(e,u,a,u),s&&r.on("$destroy",function(){s.$removeControl(a),u&&Tn(e,u,n,u),f(a,ta)})}}}};return r}]},ia=ra(),aa=ra(!0),oa=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,sa=/^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/,ua=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,la=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/,ca=/^(\d{4})-(\d{2})-(\d{2})$/,fa=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d))?$/,da=/^(\d{4})-W(\d\d)$/,pa=/^(\d{4})-(\d\d)$/,ha=/^(\d\d):(\d\d)(?::(\d\d))?$/,$a=/(\s+|^)default(\s+|$)/,ga=new r("ngModel"),ma={text:mr,date:wr("date",ca,br(ca,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":wr("datetimelocal",fa,br(fa,["yyyy","MM","dd","HH","mm","ss"]),"yyyy-MM-ddTHH:mm:ss"),time:wr("time",ha,br(ha,["HH","mm","ss"]),"HH:mm:ss"),week:wr("week",da,yr,"yyyy-Www"),month:wr("month",pa,br(pa,["yyyy","MM"]),"yyyy-MM"),number:kr,url:Cr,email:Sr,radio:Dr,checkbox:Er,hidden:h,button:h,submit:h,reset:h,file:h},va=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:function(i,a,o,s){s[0]&&(ma[Nr(o.type)]||ma.text)(i,a,o,s[0],t,e,n,r)}}}],ya="ng-valid",ba="ng-invalid",wa="ng-pristine",xa="ng-dirty",ka="ng-untouched",Ca="ng-touched",Sa="ng-pending",Da=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q",function(e,t,r,i,o,s,u,l,c){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=r.name;var f=o(r.ngModel),d=null,p=this,$=function(){var t=f(e);return p.$options&&p.$options.getterSetter&&k(t)&&(t=t()),t},g=function(){var t;p.$options&&p.$options.getterSetter&&k(t=f(e))?t(p.$modelValue):f.assign(e,p.$modelValue)};this.$$setOptions=function(e){if(p.$options=e,!(f.assign||e&&e.getterSetter))throw ga("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,z(i))},this.$render=h,this.$isEmpty=function(e){return m(e)||""===e||null===e||e!==e};var y=i.inheritedData("$formController")||ta,b=0;i.addClass(wa).addClass(ka),Tr({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},parentForm:y,$animate:s}),this.$setPristine=function(){p.$dirty=!1,p.$pristine=!0,s.removeClass(i,xa),s.addClass(i,wa)},this.$setUntouched=function(){p.$touched=!1,p.$untouched=!0,s.setClass(i,ka,Ca)},this.$setTouched=function(){p.$touched=!0,p.$untouched=!1,s.setClass(i,Ca,ka)},this.$rollbackViewValue=function(){u.cancel(d),p.$viewValue=p.$$lastCommittedViewValue,p.$render()},this.$validate=function(){w(p.$modelValue)&&isNaN(p.$modelValue)||this.$$parseAndValidate()},this.$$runValidators=function(e,t,r,i){function o(e){var t=p.$$parserName||"parse";if(e===n)l(t,null);else if(l(t,e),!e)return a(p.$validators,function(e,t){l(t,null)}),a(p.$asyncValidators,function(e,t){l(t,null)}),!1;return!0}function s(){var e=!0;return a(p.$validators,function(n,i){var a=n(t,r);e=e&&a,l(i,a)}),e?!0:(a(p.$asyncValidators,function(e,t){l(t,null)}),!1)}function u(){var e=[],i=!0;a(p.$asyncValidators,function(a,o){var s=a(t,r);if(!M(s))throw ga("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);l(o,n),e.push(s.then(function(){l(o,!0)},function(){i=!1,l(o,!1)}))}),e.length?c.all(e).then(function(){f(i)},h):f(!0)}function l(e,t){d===b&&p.$setValidity(e,t)}function f(e){d===b&&i(e)}b++;var d=b;return o(e)&&s()?void u():void f(!1)},this.$commitViewValue=function(){var e=p.$viewValue;u.cancel(d),(p.$$lastCommittedViewValue!==e||""===e&&p.$$hasNativeValidators)&&(p.$$lastCommittedViewValue=e,p.$pristine&&(p.$dirty=!0,p.$pristine=!1,s.removeClass(i,wa),s.addClass(i,xa),y.$setDirty()),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function e(){p.$modelValue!==o&&p.$$writeModelToScope()}for(var t=!0,r=p.$$lastCommittedViewValue,i=r,a=0;a<p.$parsers.length;a++)if(i=p.$parsers[a](i),m(i)){t=!1;break}w(p.$modelValue)&&isNaN(p.$modelValue)&&(p.$modelValue=$());var o=p.$modelValue,s=p.$options&&p.$options.allowInvalid;s&&(p.$modelValue=i,e()),p.$$runValidators(t,i,r,function(t){s||(p.$modelValue=t?i:n,e())})},this.$$writeModelToScope=function(){g(p.$modelValue),a(p.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){p.$viewValue=e,(!p.$options||p.$options.updateOnDefault)&&p.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=p.$options;i&&v(i.debounce)&&(n=i.debounce,w(n)?r=n:w(n[t])?r=n[t]:w(n["default"])&&(r=n["default"])),u.cancel(d),r?d=u(function(){p.$commitViewValue()},r):l.$$phase?p.$commitViewValue():e.$apply(function(){p.$commitViewValue()})},e.$watch(function(){var e=$();if(e!==p.$modelValue){p.$modelValue=e;for(var t=p.$formatters,r=t.length,i=e;r--;)i=t[r](i);p.$viewValue!==i&&(p.$viewValue=p.$$lastCommittedViewValue=i,p.$render(),p.$$runValidators(n,e,i,h))}return e})}],Aa=function(){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Da,link:{pre:function(e,t,n,r){var i=r[0],a=r[1]||ta;i.$$setOptions(r[2]&&r[2].$options),a.$addControl(i),e.$on("$destroy",function(){a.$removeControl(i)})},post:function(e,t,n,r){var i=r[0];i.$options&&i.$options.updateOn&&t.on(i.$options.updateOn,function(e){i.$$debounceViewValueCommit(e&&e.type)}),t.on("blur",function(){i.$touched||e.$apply(function(){i.$setTouched()})})}}}},Ea=g({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Ta=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},Ma=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,a){if(a){var o,s=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(b(e)&&e.length>0&&(e=new RegExp(e)),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,z(t));o=e||n,a.$validate()}),a.$validators.pattern=function(e){return a.$isEmpty(e)||m(o)||o.test(e)}}}}},Oa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("maxlength",function(e){i=d(e)||0,r.$validate()}),r.$validators.maxlength=function(e,t){return r.$isEmpty(e)||t.length<=i}}}}},Va=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=d(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(e)||t.length>=i}}}}},_a=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var o=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,u=s?Jr(o):o,l=function(e){if(!m(e)){var t=[];return e&&a(e.split(u),function(e){e&&t.push(s?Jr(e):e)}),t}};i.$parsers.push(l),i.$formatters.push(function(e){return Qr(e)?e.join(o):n}),i.$isEmpty=function(e){return!e||!e.length}}}},Na=/^(true|false|\d+)$/,Fa=function(){return{restrict:"A",priority:100,compile:function(e,t){return Na.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Ia=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var r=this;this.$options=e.$eval(t.ngModelOptions),this.$options.updateOn!==n?(this.$options.updateOnDefault=!1,this.$options.updateOn=Jr(this.$options.updateOn.replace($a,function(){return r.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ja=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,r,i){e.$$addBindingInfo(r,i.ngBind),t.$watch(i.ngBind,function(e){r.text(e==n?"":e)})}}}}],Pa=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var a=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,a.expressions),i.$observe("ngBindTemplate",function(e){r.text(e)})}}}}],Ra=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var a=t(i.ngBindHtml),o=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(o,function(){r.html(e.getTrustedHtml(a(t))||"")})}}}}],qa=Or("",!0),Ha=Or("Odd",0),La=Or("Even",1),Ua=hr({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),Ba=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],za={},Wa={blur:!0,focus:!0};a("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=Kt("ng-"+e);za[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,a){var o=n(a[t]);return function(t,n){n.on(e,function(n){var i=function(){o(t,{$event:n})};Wa[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var Ya=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,a,o){var s,u,l;n.$watch(i.ngIf,function(n){n?u||o(function(n,a){u=a,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(l&&(l.remove(),l=null),u&&(u.$destroy(),u=null),s&&(l=ut(s.clone),e.leave(l).then(function(){l=null}),s=null))})}}}],Ka=["$templateRequest","$anchorScroll","$animate","$sce",function(e,t,n,r){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Yr.noop,compile:function(i,a){var o=a.ngInclude||a.src,s=a.onload||"",u=a.autoscroll;return function(i,a,l,c,f){var d,p,h,$=0,g=function(){p&&(p.remove(),p=null),d&&(d.$destroy(),d=null),h&&(n.leave(h).then(function(){p=null}),p=h,h=null)};i.$watch(r.parseAsResourceUrl(o),function(r){var o=function(){!v(u)||u&&!i.$eval(u)||t()},l=++$;r?(e(r,!0).then(function(e){if(l===$){var t=i.$new();c.template=e;var u=f(t,function(e){g(),n.enter(e,null,a).then(o)});d=t,h=u,d.$emit("$includeContentLoaded",r),i.$eval(s)}},function(){l===$&&(g(),i.$emit("$includeContentError",r))}),i.$emit("$includeContentRequested",r)):(g(),c.template=null)})}}}}],Ga=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(r,i,a,o){return/SVG/.test(i[0].toString())?(i.empty(),void e(gt(o.template,t).childNodes)(r,function(e){i.append(e)},n,n,i)):(i.html(o.template),void e(i.contents())(r))}}}],Qa=hr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),Ja=hr({terminal:!0,priority:1e3}),Xa=["$locale","$interpolate",function(e,t){var n=/{}/g;return{restrict:"EA",link:function(r,i,o){var s=o.count,u=o.$attr.when&&i.attr(o.$attr.when),l=o.offset||0,c=r.$eval(u)||{},f={},d=t.startSymbol(),p=t.endSymbol(),h=/^when(Minus)?(.+)$/;a(o,function(e,t){h.test(t)&&(c[Nr(t.replace("when","").replace("Minus","-"))]=i.attr(o.$attr[t]))}),a(c,function(e,r){f[r]=t(e.replace(n,d+s+"-"+l+p))}),r.$watch(function(){var t=parseFloat(r.$eval(s));return isNaN(t)?"":(t in c||(t=e.pluralCat(t-l)),f[t](r))},function(e){i.text(e)})}}}],Za=["$parse","$animate",function(e,o){var s="$$NG_REMOVED",u=r("ngRepeat"),l=function(e,t,n,r,i,a,o){e[n]=r,i&&(e[i]=a),e.$index=t,e.$first=0===t,e.$last=t===o-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},c=function(e){return e.clone[0]},f=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,d){var p=d.ngRepeat,h=t.createComment(" end ngRepeat: "+p+" "),$=p.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!$)throw u("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",p);var g=$[1],m=$[2],v=$[3],y=$[4];if($=g.match(/^(?:([\$\w]+)|\(([\$\w]+)\s*,\s*([\$\w]+)\))$/),!$)throw u("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",g);var b=$[3]||$[1],w=$[2];if(v&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(v)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent)$/.test(v)))throw u("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",v);var x,k,C,S,D={$id:It};return y?x=e(y):(C=function(e,t){return It(t)},S=function(e){return e}),function(e,t,r,d,$){x&&(k=function(t,n,r){return w&&(D[w]=t),D[b]=n,D.$index=r,x(e,D)});var g=lt();e.$watchCollection(m,function(r){var d,m,y,x,D,A,E,T,M,O,V,_,N=t[0],F=lt();if(v&&(e[v]=r),i(r))M=r,T=k||C;else{T=k||S,M=[];for(var I in r)r.hasOwnProperty(I)&&"$"!=I.charAt(0)&&M.push(I);M.sort()}for(x=M.length,V=new Array(x),d=0;x>d;d++)if(D=r===M?d:M[d],A=r[D],E=T(D,A,d),g[E])O=g[E],delete g[E],F[E]=O,V[d]=O;else{if(F[E])throw a(V,function(e){e&&e.scope&&(g[e.id]=e)}),u("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",p,E,U(A));V[d]={id:E,scope:n,clone:n},F[E]=!0}for(var j in g){if(O=g[j],_=ut(O.clone),o.leave(_),_[0].parentNode)for(d=0,m=_.length;m>d;d++)_[d][s]=!0;O.scope.$destroy()}for(d=0;x>d;d++)if(D=r===M?d:M[d],A=r[D],O=V[d],O.scope){y=N;do y=y.nextSibling;while(y&&y[s]);c(O)!=y&&o.move(ut(O.clone),null,qr(N)),N=f(O),l(O.scope,d,b,A,w,D,x)}else $(function(e,t){O.scope=t;var n=h.cloneNode(!1);e[e.length++]=n,o.enter(e,null,qr(N)),N=n,O.clone=e,F[O.id]=O,l(O.scope,d,b,A,w,D,x)});g=F})}}}}],eo=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,"ng-hide")})}}}],to=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,"ng-hide")})}}}],no=hr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&a(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),ro=["$animate",function(e){return{restrict:"EA",require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,o){var s=i.ngSwitch||i.on,u=[],l=[],c=[],f=[],d=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,i;for(r=0,i=c.length;i>r;++r)e.cancel(c[r]);for(c.length=0,r=0,i=f.length;i>r;++r){var s=ut(l[r].clone);f[r].$destroy();var p=c[r]=e.leave(s);p.then(d(c,r))}l.length=0,f.length=0,(u=o.cases["!"+n]||o.cases["?"])&&a(u,function(n){n.transclude(function(r,i){f.push(i);var a=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var o={clone:r};l.push(o),e.enter(r,a.parent(),a)})})})}}}],io=hr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),ao=hr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),oo=hr({restrict:"EAC",link:function(e,t,n,i,a){if(!a)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",z(t));a(function(e){t.empty(),t.append(e)})}}),so=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],uo=r("ngOptions"),lo=g({restrict:"A",terminal:!0}),co=["$compile","$parse",function(e,r){var i=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,s={$setViewValue:h};return{restrict:"E",require:["select","?ngModel"],controller:["$element","$scope","$attrs",function(e,t,n){var r,i,a=this,o={},u=s;a.databound=n.ngModel,a.init=function(e,t,n){u=e,r=t,i=n},a.addOption=function(t,n){ot(t,'"option value"'),o[t]=!0,u.$viewValue==t&&(e.val(t),i.parent()&&i.remove()),n[0].hasAttribute("selected")&&(n[0].selected=!0)},a.removeOption=function(e){this.hasOption(e)&&(delete o[e],u.$viewValue==e&&this.renderUnknownOption(e))},a.renderUnknownOption=function(t){var n="? "+It(t)+" ?";i.val(n),e.prepend(i),e.val(n),i.prop("selected",!0)},a.hasOption=function(e){return o.hasOwnProperty(e)},t.$on("$destroy",function(){a.renderUnknownOption=h})}],link:function(s,u,l,c){function f(e,t,n,r){n.$render=function(){var e=n.$viewValue;r.hasOption(e)?(S.parent()&&S.remove(),t.val(e),""===e&&h.prop("selected",!0)):m(e)&&h?t.val(""):r.renderUnknownOption(e)},t.on("change",function(){e.$apply(function(){S.parent()&&S.remove(),n.$setViewValue(t.val())})})}function d(e,t,n){var r;n.$render=function(){var e=new jt(n.$viewValue);a(t.find("option"),function(t){t.selected=v(e.get(t.value))})},e.$watch(function(){P(r,n.$viewValue)||(r=j(n.$viewValue),n.$render())}),t.on("change",function(){e.$apply(function(){var e=[];a(t.find("option"),function(t){t.selected&&e.push(t.value)}),n.$setViewValue(e)})})}function p(t,a,s){function u(){var e=!1;if(y){var n=s.$modelValue;if(D&&Qr(n)){e=new jt([]);for(var r={},i=0;i<n.length;i++)r[p]=n[i],e.put(D(t,r),n[i])}else e=new jt(n)}return e}function l(){x||(t.$$postDigest(c),x=!0)}function c(){x=!1;var e,n,r,i,l,c,f,b,S,E,T,M,O,V,_,N={"":[]},F=[""],I=s.$modelValue,j=m(t)||[],P=h?o(j):j,R={},q=u();for(T=0;S=P.length,S>T;T++){if(f=T,h){if(f=P[T],"$"===f.charAt(0))continue;R[h]=f}if(R[p]=j[f],e=$(t,R)||"",(n=N[e])||(n=N[e]=[],F.push(e)),y)M=v(q.remove(D?D(t,R):g(t,R)));else{if(D){var H={};H[p]=I,M=D(t,H)===D(t,R)}else M=I===g(t,R);q=q||M}_=d(t,R),_=v(_)?_:"",n.push({id:D?D(t,R):h?P[T]:T,label:_,selected:M})}for(y||(w||null===I?N[""].unshift({id:"",label:"",selected:!q}):q||N[""].unshift({id:"?",label:"",selected:!0})),E=0,b=F.length;b>E;E++){for(e=F[E],n=N[e],A.length<=E?(i={element:C.clone().attr("label",e),label:n.label},l=[i],A.push(l),a.append(i.element)):(l=A[E],i=l[0],i.label!=e&&i.element.attr("label",i.label=e)),O=null,T=0,S=n.length;S>T;T++)r=n[T],(c=l[T+1])?(O=c.element,c.label!==r.label&&O.text(c.label=r.label),c.id!==r.id&&O.val(c.id=r.id),O[0].selected!==r.selected&&(O.prop("selected",c.selected=r.selected),Rr&&O.prop("selected",c.selected))):(""===r.id&&w?V=w:(V=k.clone()).val(r.id).prop("selected",r.selected).attr("selected",r.selected).text(r.label),l.push(c={element:V,label:r.label,id:r.id,selected:r.selected}),O?O.after(V):i.element.append(V),O=V);for(T++;l.length>T;)l.pop().element.remove()}for(;A.length>E;)A.pop()[0].element.remove()}var f;if(!(f=b.match(i)))throw uo("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",b,z(a));var d=r(f[2]||f[1]),p=f[4]||f[6],h=f[5],$=r(f[3]||""),g=r(f[2]?f[1]:p),m=r(f[7]),S=f[8],D=S?r(f[8]):null,A=[[{element:a,label:""}]];w&&(e(w)(t),w.removeClass("ng-scope"),w.remove()),a.empty(),a.on("change",function(){t.$apply(function(){var e,r,i,o,u,l,f,d,$,v=m(t)||[],b={};if(y){for(i=[],l=0,d=A.length;d>l;l++)for(e=A[l],u=1,f=e.length;f>u;u++)if((o=e[u].element)[0].selected){if(r=o.val(),h&&(b[h]=r),D)for($=0;$<v.length&&(b[p]=v[$],D(t,b)!=r);$++);else b[p]=v[r];i.push(g(t,b))}}else if(r=a.val(),"?"==r)i=n;else if(""===r)i=null;else if(D){for($=0;$<v.length;$++)if(b[p]=v[$],D(t,b)==r){i=g(t,b);break}}else b[p]=v[r],h&&(b[h]=r),i=g(t,b);s.$setViewValue(i),c()})}),s.$render=c,t.$watchCollection(m,l),t.$watchCollection(function(){var e={},n=m(t);if(n){for(var r=new Array(n.length),i=0,a=n.length;a>i;i++)e[p]=n[i],r[i]=d(t,e);return r}},l),y&&t.$watchCollection(function(){return s.$modelValue},l)}if(c[1]){for(var h,$=c[0],g=c[1],y=l.multiple,b=l.ngOptions,w=!1,x=!1,k=qr(t.createElement("option")),C=qr(t.createElement("optgroup")),S=k.clone(),D=0,A=u.children(),E=A.length;E>D;D++)if(""===A[D].value){h=w=A.eq(D);break}$.init(g,w,S),y&&(g.$isEmpty=function(e){return!e||0===e.length}),b?p(s,u,g):y?d(s,u,g):f(s,u,g,$)}}}}],fo=["$interpolate",function(e){var t={addOption:h,removeOption:h};return{restrict:"E",priority:100,compile:function(n,r){if(m(r.value)){var i=e(n.text(),!0);i||r.$set("value",n.text())}return function(e,n,r){var a="$selectController",o=n.parent(),s=o.data(a)||o.parent().data(a);s&&s.databound?n.prop("selected",!1):s=t,i?e.$watch(i,function(e,t){r.$set("value",e),t!==e&&s.removeOption(t),s.addOption(e,n)}):s.addOption(r.value,n),n.on("$destroy",function(){s.removeOption(r.value)})}}}}],po=g({restrict:"E",terminal:!1});return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(rt(),ft(Yr),void qr(t).ready(function(){X(t,Z)}))}(window,document),!window.angular.$$csp()&&window.angular.element(document).find("head").prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-animate){display:none !important;}ng\\:form{display:block;}</style>'),function(e,t,n){"use strict";t.module("ngAnimate",["ng"]).directive("ngAnimateChildren",function(){var e="$$ngAnimateChildren";return function(n,r,i){var a=i.ngAnimateChildren;t.isString(a)&&0===a.length?r.data(e,!0):n.$watch(a,function(t){r.data(e,!!t)})}}).factory("$$animateReflow",["$$rAF","$document",function(e,t){var n=t[0].body;return function(t){return e(function(){n.offsetWidth+1;t()})}}]).config(["$provide","$animateProvider",function(r,i){function a(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType==p)return n}}function o(e){return e&&t.element(e)}function s(e){return t.element(a(e))}function u(e,t){return a(e)==a(t)}var l=t.noop,c=t.forEach,f=i.$$selectors,d=t.isArray,p=1,h="$$ngAnimateState",$="$$ngAnimateChildren",g="ng-animate",m={running:!0};r.decorator("$animate",["$delegate","$$q","$injector","$sniffer","$rootElement","$$asyncCallback","$rootScope","$document","$templateRequest",function(e,n,r,p,v,y,b,w,x){function k(e,t){var n=e.data(h)||{};return t&&(n.running=!0,n.structural=!0,e.data(h,n)),n.disabled||n.running&&n.structural}function C(e){var t,r=n.defer();return r.promise.$$cancelFn=function(){t&&t()},b.$$postDigest(function(){t=e(function(){r.resolve()})}),r.promise}function S(e,n,r){r=r||{};var i={};c(n.add,function(e){e&&e.length&&(i[e]=i[e]||0,i[e]++)}),c(n.remove,function(e){e&&e.length&&(i[e]=i[e]||0,i[e]--)});var a=[];c(r,function(e,t){c(t.split(" "),function(t){a[t]=e})});var o=[],s=[];return c(i,function(n,r){var i=t.$$hasClass(e[0],r),u=a[r]||{};0>n?(i||"addClass"==u.event)&&s.push(r):n>0&&(i&&"removeClass"!=u.event||o.push(r))}),o.length+s.length>0&&[o.join(" "),s.join(" ")]}function D(e){if(e){var t=[],n={},i=e.substr(1).split(".");(p.transitions||p.animations)&&t.push(r.get(f[""]));for(var a=0;a<i.length;a++){var o=i[a],s=f[o];s&&!n[o]&&(t.push(r.get(s)),n[o]=!0)}return t}}function A(e,t,n){function r(e,t){var n=e[t],r=e["before"+t.charAt(0).toUpperCase()+t.substr(1)];return n||r?("leave"==t&&(r=n,n=null),b.push({event:t,fn:n}),m.push({event:t,fn:r}),!0):void 0
}function i(t,r,i){function a(e){if(r){if((r[e]||l)(),++f<u.length)return;r=null}i()}var u=[];c(t,function(e){e.fn&&u.push(e)});var f=0;c(u,function(t,i){var u=function(){a(i)};switch(t.event){case"setClass":r.push(t.fn(e,o,s,u));break;case"addClass":r.push(t.fn(e,o||n,u));break;case"removeClass":r.push(t.fn(e,s||n,u));break;default:r.push(t.fn(e,u))}}),r&&0===r.length&&i()}var a=e[0];if(a){var o,s;d(n)&&(o=n[0],s=n[1],o?s?n=o+" "+s:(n=o,t="addClass"):(n=s,t="removeClass"));var u="setClass"==t,f=u||"addClass"==t||"removeClass"==t,p=e.attr("class"),h=p+" "+n;if(F(h)){var $=l,g=[],m=[],v=l,y=[],b=[],w=(" "+h).replace(/\s+/g,".");return c(D(w),function(e){var n=r(e,t);!n&&u&&(r(e,"addClass"),r(e,"removeClass"))}),{node:a,event:t,className:n,isClassBased:f,isSetClassOperation:u,before:function(e){$=e,i(m,g,function(){$=l,e()})},after:function(e){v=e,i(b,y,function(){v=l,e()})},cancel:function(){g&&(c(g,function(e){(e||l)(!0)}),$(!0)),y&&(c(y,function(e){(e||l)(!0)}),v(!0))}}}}}function E(e,n,r,i,a,o,s){function u(t){var i="$animate:"+t;w&&w[i]&&w[i].length>0&&y(function(){r.triggerHandler(i,{event:e,className:n})})}function f(){u("before")}function d(){u("after")}function p(){u("close"),s()}function $(){$.hasBeenRun||($.hasBeenRun=!0,o())}function m(){if(!m.hasBeenRun){m.hasBeenRun=!0;var t=r.data(h);t&&(b&&b.isClassBased?M(r,n):(y(function(){var t=r.data(h)||{};N==t.index&&M(r,n,e)}),r.data(h,t))),p()}}var v=l,b=A(r,e,n);if(!b)return $(),f(),d(),m(),v;e=b.event,n=b.className;var w=t.element._data(b.node);if(w=w&&w.events,i||(i=a?a.parent():r.parent()),O(r,i))return $(),f(),d(),m(),v;var x=r.data(h)||{},k=x.active||{},C=x.totalActive||0,S=x.last,D=!1;if(C>0){var E=[];if(b.isClassBased){if("setClass"==S.event)E.push(S),M(r,n);else if(k[n]){var T=k[n];T.event==e?D=!0:(E.push(T),M(r,n))}}else if("leave"==e&&k["ng-leave"])D=!0;else{for(var V in k)E.push(k[V]);x={},M(r,!0)}E.length>0&&c(E,function(e){e.cancel()})}if(!b.isClassBased||b.isSetClassOperation||D||(D="addClass"==e==r.hasClass(n)),D)return $(),f(),d(),p(),v;k=x.active||{},C=x.totalActive||0,"leave"==e&&r.one("$destroy",function(){var e=t.element(this),n=e.data(h);if(n){var r=n.active["ng-leave"];r&&(r.cancel(),M(e,"ng-leave"))}}),r.addClass(g);var N=_++;return C++,k[n]=b,r.data(h,{last:b,active:k,index:N,totalActive:C}),f(),b.before(function(t){var i=r.data(h);t=t||!i||!i.active[n]||b.isClassBased&&i.active[n].event!=e,$(),t===!0?m():(d(),b.after(m))}),b.cancel}function T(e){var n=a(e);if(n){var r=t.isFunction(n.getElementsByClassName)?n.getElementsByClassName(g):n.querySelectorAll("."+g);c(r,function(e){e=t.element(e);var n=e.data(h);n&&n.active&&c(n.active,function(e){e.cancel()})})}}function M(e,t){if(u(e,v))m.disabled||(m.running=!1,m.structural=!1);else if(t){var n=e.data(h)||{},r=t===!0;!r&&n.active&&n.active[t]&&(n.totalActive--,delete n.active[t]),(r||!n.totalActive)&&(e.removeClass(g),e.removeData(h))}}function O(e,n){if(m.disabled)return!0;if(u(e,v))return m.running;var r,i,a;do{if(0===n.length)break;var o=u(n,v),s=o?m:n.data(h)||{};if(s.disabled)return!0;if(o&&(a=!0),r!==!1){var l=n.data($);t.isDefined(l)&&(r=l)}i=i||s.running||s.last&&!s.last.isClassBased}while(n=n.parent());return!a||!r&&i}v.data(h,m);var V=b.$watch(function(){return x.totalPendingRequests},function(e){0===e&&(V(),b.$$postDigest(function(){b.$$postDigest(function(){m.running=!1})}))}),_=0,N=i.classNameFilter(),F=N?function(e){return N.test(e)}:function(){return!0};return{enter:function(n,r,i){return n=t.element(n),r=o(r),i=o(i),k(n,!0),e.enter(n,r,i),C(function(e){return E("enter","ng-enter",s(n),r,i,l,e)})},leave:function(n){return n=t.element(n),T(n),k(n,!0),this.enabled(!1,n),C(function(t){return E("leave","ng-leave",s(n),null,null,function(){e.leave(n)},t)})},move:function(n,r,i){return n=t.element(n),r=o(r),i=o(i),T(n),k(n,!0),e.move(n,r,i),C(function(e){return E("move","ng-move",s(n),r,i,l,e)})},addClass:function(e,t){return this.setClass(e,t,[])},removeClass:function(e,t){return this.setClass(e,[],t)},setClass:function(n,r,i){var a="$$animateClasses";if(n=t.element(n),n=s(n),k(n))return e.setClass(n,r,i);r=d(r)?r:r.split(" "),i=d(i)?i:i.split(" ");var o=n.data(a);return o?(o.add=o.add.concat(r),o.remove=o.remove.concat(i),o.promise):(n.data(a,o={add:r,remove:i}),o.promise=C(function(t){var r=n.data(a);n.removeData(a);var i=n.data(h)||{},o=S(n,r,i.active);return o?E("setClass",o,n,null,null,function(){e.setClass(n,o[0],o[1])},t):t()}))},cancel:function(e){e.$$cancelFn()},enabled:function(e,t){switch(arguments.length){case 2:if(e)M(t);else{var n=t.data(h)||{};n.disabled=!0,t.data(h,n)}break;case 1:m.disabled=!e;break;default:e=!m.disabled}return!!e}}}]),i.register("",["$window","$sniffer","$timeout","$$animateReflow",function(r,i,o,s){function u(e,t){V&&V(),z.push(t),V=s(function(){c(z,function(e){e()}),z=[],V=null,U={}})}function f(e,n){var r=a(e);e=t.element(r),K.push(e);var i=Date.now()+n;Y>=i||(o.cancel(W),Y=i,W=o(function(){h(K),K=[]},n,!1))}function h(e){c(e,function(e){var t=e.data(R);t&&c(t.closeAnimationFns,function(e){e()})})}function $(e,t){var n=t?U[t]:null;if(!n){var i=0,a=0,o=0,s=0;c(e,function(e){if(e.nodeType==p){var t=r.getComputedStyle(e)||{},n=t[A+_];i=Math.max(g(n),i);var u=t[A+F];a=Math.max(g(u),a);{t[T+F]}s=Math.max(g(t[T+F]),s);var l=g(t[T+_]);l>0&&(l*=parseInt(t[T+I],10)||1),o=Math.max(l,o)}}),n={total:0,transitionDelay:a,transitionDuration:i,animationDelay:s,animationDuration:o},t&&(U[t]=n)}return n}function g(e){var n=0,r=t.isString(e)?e.split(/\s*,\s*/):[];return c(r,function(e){n=Math.max(parseFloat(e)||0,n)}),n}function m(e){var t=e.parent(),n=t.data(P);return n||(t.data(P,++B),n=B),n+"-"+a(e).getAttribute("class")}function v(e,t,n){var r=["ng-enter","ng-leave","ng-move"].indexOf(n)>=0,i=m(t),o=i+" "+n,s=U[o]?++U[o].total:0,u={};if(s>0){var l=n+"-stagger",c=i+" "+l,f=!U[c];f&&t.addClass(l),u=$(t,c),f&&t.removeClass(l)}t.addClass(n);var d=t.data(R)||{},p=$(t,o),h=p.transitionDuration,g=p.animationDuration;if(r&&0===h&&0===g)return t.removeClass(n),!1;var v=r&&h>0,y=g>0&&u.animationDelay>0&&0===u.animationDuration,x=d.closeAnimationFns||[];t.data(R,{stagger:u,cacheKey:o,running:d.running||0,itemIndex:s,blockTransition:v,closeAnimationFns:x});var k=a(t);return v&&b(k,!0),y&&w(k,!0),!0}function y(e,t,n,r){function i(){t.off(I,s),t.removeClass(d),t.removeClass(p),N&&o.cancel(N),S(t,n);var e=a(t);for(var r in g)e.style.removeProperty(g[r])}function s(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||t.timeStamp||Date.now(),i=parseFloat(t.elapsedTime.toFixed(q));Math.max(n-F,0)>=V&&i>=A&&r()}var u=a(t),l=t.data(R);if(-1==u.getAttribute("class").indexOf(n)||!l)return void r();l.blockTransition&&b(u,!1);var d="",p="";c(n.split(" "),function(e,t){var n=(t>0?" ":"")+e;d+=n+"-active",p+=n+"-pending"});var h="",g=[],m=l.itemIndex,v=l.stagger,y=0;if(m>0){var x=0;v.transitionDelay>0&&0===v.transitionDuration&&(x=v.transitionDelay*m);var k=0;v.animationDelay>0&&0===v.animationDuration&&(k=v.animationDelay*m,g.push(O+"animation-play-state")),y=Math.round(100*Math.max(x,k))/100}y||t.addClass(d);var C=l.cacheKey+" "+d,D=$(t,C),A=Math.max(D.transitionDuration,D.animationDuration);if(0===A)return t.removeClass(d),S(t,n),void r();var T=Math.max(D.transitionDelay,D.animationDelay),V=T*L;if(g.length>0){var _=u.getAttribute("style")||"";";"!==_.charAt(_.length-1)&&(_+=";"),u.setAttribute("style",_+" "+h)}var N,F=Date.now(),I=M+" "+E,j=(T+A)*H,P=(y+j)*L;return y>0&&(t.addClass(p),N=o(function(){N=null,t.addClass(d),t.removeClass(p),D.animationDuration>0&&w(u,!1)},y*L,!1)),t.on(I,s),l.closeAnimationFns.push(function(){i(),r()}),l.running++,f(t,P),i}function b(e,t){e.style[A+N]=t?"none":""}function w(e,t){e.style[T+j]=t?"paused":""}function x(e,t,n,r){return v(e,t,n,r)?function(e){e&&S(t,n)}:void 0}function k(e,t,n,r){return t.data(R)?y(e,t,n,r):(S(t,n),void r())}function C(e,t,n,r){var i=x(e,t,n);if(!i)return void r();var a=i;return u(t,function(){a=k(e,t,n,r)}),function(e){(a||l)(e)}}function S(e,t){e.removeClass(t);var n=e.data(R);n&&(n.running&&n.running--,n.running&&0!==n.running||e.removeData(R))}function D(e,t){var n="";return e=d(e)?e:e.split(/\s+/),c(e,function(e,r){e&&e.length>0&&(n+=(r>0?" ":"")+e+t)}),n}var A,E,T,M,O="";e.ontransitionend===n&&e.onwebkittransitionend!==n?(O="-webkit-",A="WebkitTransition",E="webkitTransitionEnd transitionend"):(A="transition",E="transitionend"),e.onanimationend===n&&e.onwebkitanimationend!==n?(O="-webkit-",T="WebkitAnimation",M="webkitAnimationEnd animationend"):(T="animation",M="animationend");var V,_="Duration",N="Property",F="Delay",I="IterationCount",j="PlayState",P="$$ngAnimateKey",R="$$ngAnimateCSS3Data",q=3,H=1.5,L=1e3,U={},B=0,z=[],W=null,Y=0,K=[];return{enter:function(e,t){return C("enter",e,"ng-enter",t)},leave:function(e,t){return C("leave",e,"ng-leave",t)},move:function(e,t){return C("move",e,"ng-move",t)},beforeSetClass:function(e,t,n,r){var i=D(n,"-remove")+" "+D(t,"-add"),a=x("setClass",e,i);return a?(u(e,r),a):void r()},beforeAddClass:function(e,t,n){var r=x("addClass",e,D(t,"-add"));return r?(u(e,n),r):void n()},beforeRemoveClass:function(e,t,n){var r=x("removeClass",e,D(t,"-remove"));return r?(u(e,n),r):void n()},setClass:function(e,t,n,r){n=D(n,"-remove"),t=D(t,"-add");var i=n+" "+t;return k("setClass",e,i,r)},addClass:function(e,t,n){return k("addClass",e,D(t,"-add"),n)},removeClass:function(e,t,n){return k("removeClass",e,D(t,"-remove"),n)}}}])}])}(window,window.angular),function(e,t){"use strict";angular.module("mgcrea.ngStrap",["mgcrea.ngStrap.modal","mgcrea.ngStrap.aside","mgcrea.ngStrap.alert","mgcrea.ngStrap.button","mgcrea.ngStrap.select","mgcrea.ngStrap.datepicker","mgcrea.ngStrap.timepicker","mgcrea.ngStrap.navbar","mgcrea.ngStrap.tooltip","mgcrea.ngStrap.popover","mgcrea.ngStrap.dropdown","mgcrea.ngStrap.typeahead","mgcrea.ngStrap.scrollspy","mgcrea.ngStrap.affix","mgcrea.ngStrap.tab","mgcrea.ngStrap.collapse"]),angular.module("mgcrea.ngStrap.affix",["mgcrea.ngStrap.helpers.dimensions","mgcrea.ngStrap.helpers.debounce"]).provider("$affix",function(){var e=this.defaults={offsetTop:"auto"};this.$get=["$window","debounce","dimensions",function(t,n,r){function i(i,s){function u(e,t,n){var r=l(),i=c();return m>=r?"top":null!==e&&r+e<=t.top?"middle":null!==v&&t.top+n+$>=i-v?"bottom":"middle"}function l(){return p[0]===t?t.pageYOffset:p[0].scrollTop}function c(){return p[0]===t?t.document.body.scrollHeight:p[0].scrollHeight}var f={},d=angular.extend({},e,s),p=d.target,h="affix affix-top affix-bottom",$=0,g=0,m=0,v=0,y=null,b=null,w=i.parent();if(d.offsetParent)if(d.offsetParent.match(/^\d+$/))for(var x=0;x<1*d.offsetParent-1;x++)w=w.parent();else w=angular.element(d.offsetParent);return f.init=function(){f.$parseOffsets(),g=r.offset(i[0]).top+$,p.on("scroll",f.checkPosition),p.on("click",f.checkPositionWithEventLoop),o.on("resize",f.$debouncedOnResize),f.checkPosition(),f.checkPositionWithEventLoop()},f.destroy=function(){p.off("scroll",f.checkPosition),p.off("click",f.checkPositionWithEventLoop),o.off("resize",f.$debouncedOnResize)},f.checkPositionWithEventLoop=function(){setTimeout(f.checkPosition,1)},f.checkPosition=function(){var e=l(),t=r.offset(i[0]),n=r.height(i[0]),o=u(b,t,n);y!==o&&(y=o,i.removeClass(h).addClass("affix"+("middle"!==o?"-"+o:"")),"top"===o?(b=null,i.css("position",d.offsetParent?"":"relative"),i.css("top","")):"bottom"===o?(b=d.offsetUnpin?-(1*d.offsetUnpin):t.top-e,i.css("position",d.offsetParent?"":"relative"),i.css("top",d.offsetParent?"":a[0].offsetHeight-v-n-g+"px")):(b=null,i.css("position","fixed"),i.css("top",$+"px")))},f.$onResize=function(){f.$parseOffsets(),f.checkPosition()},f.$debouncedOnResize=n(f.$onResize,50),f.$parseOffsets=function(){i.css("position",d.offsetParent?"":"relative"),d.offsetTop&&("auto"===d.offsetTop&&(d.offsetTop="+0"),d.offsetTop.match(/^[-+]\d+$/)?($=1*-d.offsetTop,m=d.offsetParent?r.offset(w[0]).top+1*d.offsetTop:r.offset(i[0]).top-r.css(i[0],"marginTop",!0)+1*d.offsetTop):m=1*d.offsetTop),d.offsetBottom&&(v=d.offsetParent&&d.offsetBottom.match(/^[-+]\d+$/)?c()-(r.offset(w[0]).top+r.height(w[0]))+1*d.offsetBottom+1:1*d.offsetBottom)},f.init(),f}var a=angular.element(t.document.body),o=angular.element(t);return i}]}).directive("bsAffix",["$affix","$window",function(e,t){return{restrict:"EAC",require:"^?bsAffixTarget",link:function(n,r,i,a){var o={scope:n,offsetTop:"auto",target:a?a.$element:angular.element(t)};angular.forEach(["offsetTop","offsetBottom","offsetParent","offsetUnpin"],function(e){angular.isDefined(i[e])&&(o[e]=i[e])});var s=e(r,o);n.$on("$destroy",function(){s&&s.destroy(),o=null,s=null})}}}]).directive("bsAffixTarget",function(){return{controller:["$element",function(e){this.$element=e}]}}),angular.module("mgcrea.ngStrap.aside",["mgcrea.ngStrap.modal"]).provider("$aside",function(){var e=this.defaults={animation:"am-fade-and-slide-right",prefixClass:"aside",placement:"right",template:"aside/aside.tpl.html",contentTemplate:!1,container:!1,element:null,backdrop:!0,keyboard:!0,html:!1,show:!0};this.$get=["$modal",function(t){function n(n){var r={},i=angular.extend({},e,n);return r=t(i)}return n}]}).directive("bsAside",["$window","$sce","$aside",function(e,t,n){e.requestAnimationFrame||e.setTimeout;return{restrict:"EAC",scope:!0,link:function(e,r,i){var a={scope:e,element:r,show:!1};angular.forEach(["template","contentTemplate","placement","backdrop","keyboard","html","container","animation"],function(e){angular.isDefined(i[e])&&(a[e]=i[e])}),angular.forEach(["title","content"],function(n){i[n]&&i.$observe(n,function(r){e[n]=t.trustAsHtml(r)})}),i.bsAside&&e.$watch(i.bsAside,function(t){angular.isObject(t)?angular.extend(e,t):e.content=t},!0);var o=n(a);r.on(i.trigger||"click",o.toggle),e.$on("$destroy",function(){o&&o.destroy(),a=null,o=null})}}}]),angular.module("mgcrea.ngStrap.alert",["mgcrea.ngStrap.modal"]).provider("$alert",function(){var e=this.defaults={animation:"am-fade",prefixClass:"alert",placement:null,template:"alert/alert.tpl.html",container:!1,element:null,backdrop:!1,keyboard:!0,show:!0,duration:!1,type:!1,dismissable:!0};this.$get=["$modal","$timeout",function(t,n){function r(r){var i={},a=angular.extend({},e,r);i=t(a),i.$scope.dismissable=!!a.dismissable,a.type&&(i.$scope.type=a.type);var o=i.show;return a.duration&&(i.show=function(){o(),n(function(){i.hide()},1e3*a.duration)}),i}return r}]}).directive("bsAlert",["$window","$sce","$alert",function(e,t,n){e.requestAnimationFrame||e.setTimeout;return{restrict:"EAC",scope:!0,link:function(e,r,i){var a={scope:e,element:r,show:!1};angular.forEach(["template","placement","keyboard","html","container","animation","duration","dismissable"],function(e){angular.isDefined(i[e])&&(a[e]=i[e])}),angular.forEach(["title","content","type"],function(n){i[n]&&i.$observe(n,function(r){e[n]=t.trustAsHtml(r)})}),i.bsAlert&&e.$watch(i.bsAlert,function(t){angular.isObject(t)?angular.extend(e,t):e.content=t},!0);var o=n(a);r.on(i.trigger||"click",o.toggle),e.$on("$destroy",function(){o&&o.destroy(),a=null,o=null})}}}]),angular.module("mgcrea.ngStrap.button",[]).provider("$button",function(){var e=this.defaults={activeClass:"active",toggleEvent:"click"};this.$get=function(){return{defaults:e}}}).directive("bsCheckboxGroup",function(){return{restrict:"A",require:"ngModel",compile:function(e,t){e.attr("data-toggle","buttons"),e.removeAttr("ng-model");var n=e[0].querySelectorAll('input[type="checkbox"]');angular.forEach(n,function(e){var n=angular.element(e);n.attr("bs-checkbox",""),n.attr("ng-model",t.ngModel+"."+n.attr("value"))})}}}).directive("bsCheckbox",["$button","$$rAF",function(e,t){var n=e.defaults,r=/^(true|false|\d+)$/;return{restrict:"A",require:"ngModel",link:function(e,i,a,o){var s=n,u="INPUT"===i[0].nodeName,l=u?i.parent():i,c=angular.isDefined(a.trueValue)?a.trueValue:!0;r.test(a.trueValue)&&(c=e.$eval(a.trueValue));var f=angular.isDefined(a.falseValue)?a.falseValue:!1;r.test(a.falseValue)&&(f=e.$eval(a.falseValue));var d="boolean"!=typeof c||"boolean"!=typeof f;d&&(o.$parsers.push(function(e){return e?c:f}),e.$watch(a.ngModel,function(){o.$render()})),o.$render=function(){var e=angular.equals(o.$modelValue,c);t(function(){u&&(i[0].checked=e),l.toggleClass(s.activeClass,e)})},i.bind(s.toggleEvent,function(){e.$apply(function(){u||o.$setViewValue(!l.hasClass("active")),d||o.$render()})})}}}]).directive("bsRadioGroup",function(){return{restrict:"A",require:"ngModel",compile:function(e,t){e.attr("data-toggle","buttons"),e.removeAttr("ng-model");var n=e[0].querySelectorAll('input[type="radio"]');angular.forEach(n,function(e){angular.element(e).attr("bs-radio",""),angular.element(e).attr("ng-model",t.ngModel)})}}}).directive("bsRadio",["$button","$$rAF",function(e,t){var n=e.defaults,r=/^(true|false|\d+)$/;return{restrict:"A",require:"ngModel",link:function(e,i,a,o){var s=n,u="INPUT"===i[0].nodeName,l=u?i.parent():i,c=r.test(a.value)?e.$eval(a.value):a.value;o.$render=function(){var e=angular.equals(o.$modelValue,c);t(function(){u&&(i[0].checked=e),l.toggleClass(s.activeClass,e)})},i.bind(s.toggleEvent,function(){e.$apply(function(){o.$setViewValue(c),o.$render()})})}}}]),angular.module("mgcrea.ngStrap.collapse",[]).provider("$collapse",function(){var e=this.defaults={animation:"am-collapse",disallowToggle:!1,activeClass:"in"},t=this.controller=function(t,n,r){var i=this;i.$options=angular.copy(e),angular.forEach(["animation","disallowToggle","activeClass"],function(e){angular.isDefined(r[e])&&(i.$options[e]=r[e])}),i.$toggles=[],i.$targets=[],i.$viewChangeListeners=[],i.$registerToggle=function(e){i.$toggles.push(e)},i.$registerTarget=function(e){i.$targets.push(e)},i.$targets.$active=0,i.$setActive=t.$setActive=function(e){i.$targets.$active=i.$options.disallowToggle?e:i.$targets.$active===e?-1:e,i.$viewChangeListeners.forEach(function(e){e()})}};this.$get=function(){var n={};return n.defaults=e,n.controller=t,n}}).directive("bsCollapse",["$window","$animate","$collapse",function(e,t,n){n.defaults;return{require:["?ngModel","bsCollapse"],controller:["$scope","$element","$attrs",n.controller],link:function(e,t,n,r){var i=r[0],a=r[1];i&&(a.$viewChangeListeners.push(function(){i.$setViewValue(a.$targets.$active)}),i.$formatters.push(function(e){return a.$setActive(1*e),e}))}}}]).directive("bsCollapseToggle",function(){return{require:["^?ngModel","^bsCollapse"],link:function(e,t,n,r){var i=(r[0],r[1]);t.attr("data-toggle","collapse"),i.$registerToggle(t),t.on("click",function(){var r=n.bsCollapseToggle||i.$toggles.indexOf(t);i.$setActive(1*r),e.$apply()})}}}).directive("bsCollapseTarget",["$animate",function(e){return{require:["^?ngModel","^bsCollapse"],link:function(t,n,r,i){function a(){var t=o.$targets.indexOf(n),r=o.$targets.$active;e[t===r?"addClass":"removeClass"](n,o.$options.activeClass)}var o=(i[0],i[1]);n.addClass("collapse"),o.$options.animation&&n.addClass(o.$options.animation),o.$registerTarget(n),o.$viewChangeListeners.push(function(){a()}),a()}}}]),angular.module("mgcrea.ngStrap.datepicker",["mgcrea.ngStrap.helpers.dateParser","mgcrea.ngStrap.tooltip"]).provider("$datepicker",function(){var e=this.defaults={animation:"am-fade",prefixClass:"datepicker",placement:"bottom-left",template:"datepicker/datepicker.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,useNative:!1,dateType:"date",dateFormat:"shortDate",modelDateFormat:null,dayFormat:"dd",strictFormat:!1,autoclose:!1,minDate:-1/0,maxDate:+1/0,startView:0,minView:0,startWeek:0,daysOfWeekDisabled:"",iconLeft:"glyphicon glyphicon-chevron-left",iconRight:"glyphicon glyphicon-chevron-right"};this.$get=["$window","$document","$rootScope","$sce","$locale","dateFilter","datepickerViews","$tooltip",function(t,n,r,i,a,o,s,u){function l(t,n,r){function i(e){e.selected=o.$isSelected(e.date)}function a(){t[0].focus()}var o=u(t,angular.extend({},e,r)),l=r.scope,d=o.$options,p=o.$scope;d.startView&&(d.startView-=d.minView);var h=s(o);o.$views=h.views;var $=h.viewDate;p.$mode=d.startView,p.$iconLeft=d.iconLeft,p.$iconRight=d.iconRight;var g=o.$views[p.$mode];p.$select=function(e){o.select(e)},p.$selectPane=function(e){o.$selectPane(e)},p.$toggleMode=function(){o.setMode((p.$mode+1)%o.$views.length)},o.update=function(e){angular.isDate(e)&&!isNaN(e.getTime())&&(o.$date=e,g.update.call(g,e)),o.$build(!0)},o.updateDisabledDates=function(e){d.disabledDateRanges=e;for(var t=0,n=p.rows.length;n>t;t++)angular.forEach(p.rows[t],o.$setDisabledEl)},o.select=function(e,t){angular.isDate(n.$dateValue)||(n.$dateValue=new Date(e)),!p.$mode||t?(n.$setViewValue(angular.copy(e)),n.$render(),d.autoclose&&!t&&o.hide(!0)):(angular.extend($,{year:e.getFullYear(),month:e.getMonth(),date:e.getDate()}),o.setMode(p.$mode-1),o.$build())},o.setMode=function(e){p.$mode=e,g=o.$views[p.$mode],o.$build()},o.$build=function(e){e===!0&&g.built||(e!==!1||g.built)&&g.build.call(g)},o.$updateSelected=function(){for(var e=0,t=p.rows.length;t>e;e++)angular.forEach(p.rows[e],i)},o.$isSelected=function(e){return g.isSelected(e)},o.$setDisabledEl=function(e){e.disabled=g.isDisabled(e.date)},o.$selectPane=function(e){var t=g.steps,n=new Date(Date.UTC($.year+(t.year||0)*e,$.month+(t.month||0)*e,$.date+(t.day||0)*e));angular.extend($,{year:n.getUTCFullYear(),month:n.getUTCMonth(),date:n.getUTCDate()}),o.$build()},o.$onMouseDown=function(e){if(e.preventDefault(),e.stopPropagation(),f){var t=angular.element(e.target);"button"!==t[0].nodeName.toLowerCase()&&(t=t.parent()),t.triggerHandler("click")}},o.$onKeyDown=function(e){if(/(38|37|39|40|13)/.test(e.keyCode)&&!e.shiftKey&&!e.altKey){if(e.preventDefault(),e.stopPropagation(),13===e.keyCode)return p.$mode?p.$apply(function(){o.setMode(p.$mode-1)}):o.hide(!0);g.onKeyDown(e),l.$digest()}};var m=o.init;o.init=function(){return c&&d.useNative?(t.prop("type","date"),void t.css("-webkit-appearance","textfield")):(f&&(t.prop("type","text"),t.attr("readonly","true"),t.on("click",a)),void m())};var v=o.destroy;o.destroy=function(){c&&d.useNative&&t.off("click",a),v()};var y=o.show;o.show=function(){y(),setTimeout(function(){o.$element.on(f?"touchstart":"mousedown",o.$onMouseDown),d.keyboard&&t.on("keydown",o.$onKeyDown)})};var b=o.hide;return o.hide=function(e){o.$element.off(f?"touchstart":"mousedown",o.$onMouseDown),d.keyboard&&t.off("keydown",o.$onKeyDown),b(e)},o}var c=(angular.element(t.document.body),/(ip(a|o)d|iphone|android)/gi.test(t.navigator.userAgent)),f="createTouch"in t.document&&c;return e.lang||(e.lang=a.id),l.defaults=e,l}]}).directive("bsDatepicker",["$window","$parse","$q","$locale","dateFilter","$datepicker","$dateParser","$timeout",function(e,t,n,r,i,a,o){var s=(a.defaults,/(ip(a|o)d|iphone|android)/gi.test(e.navigator.userAgent)),u=function(e){return!isNaN(parseFloat(e))&&isFinite(e)};return{restrict:"EAC",require:"ngModel",link:function(e,t,n,r){function l(e){return e&&e.length?e:null}var c={scope:e,controller:r};angular.forEach(["placement","container","delay","trigger","keyboard","html","animation","template","autoclose","dateType","dateFormat","modelDateFormat","dayFormat","strictFormat","startWeek","startDate","useNative","lang","startView","minView","iconLeft","iconRight","daysOfWeekDisabled"],function(e){angular.isDefined(n[e])&&(c[e]=n[e])}),n.bsShow&&e.$watch(n.bsShow,function(e){f&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(",?(datepicker),?")),e===!0?f.show():f.hide())});var f=a(t,r,c);c=f.$options,s&&c.useNative&&(c.dateFormat="yyyy-MM-dd"),angular.forEach(["minDate","maxDate"],function(e){angular.isDefined(n[e])&&n.$observe(e,function(t){if("today"===t){var n=new Date;f.$options[e]=+new Date(n.getFullYear(),n.getMonth(),n.getDate()+("maxDate"===e?1:0),0,0,0,"minDate"===e?0:-1)}else f.$options[e]=angular.isString(t)&&t.match(/^".+"$/)?+new Date(t.substr(1,t.length-2)):u(t)?+new Date(parseInt(t,10)):angular.isString(t)&&0===t.length?"maxDate"===e?+1/0:-1/0:+new Date(t);!isNaN(f.$options[e])&&f.$build(!1)})}),e.$watch(n.ngModel,function(){f.update(r.$dateValue)},!0),angular.isDefined(n.disabledDates)&&e.$watch(n.disabledDates,function(e,t){e=l(e),t=l(t),e!==t&&f.updateDisabledDates(e)});var d=o({format:c.dateFormat,lang:c.lang,strict:c.strictFormat});r.$parsers.unshift(function(e){if(!e)return void r.$setValidity("date",!0);var t=d.parse(e,r.$dateValue);if(!t||isNaN(t.getTime()))return void r.$setValidity("date",!1);var n=isNaN(f.$options.minDate)||t.getTime()>=f.$options.minDate,a=isNaN(f.$options.maxDate)||t.getTime()<=f.$options.maxDate,o=n&&a;return r.$setValidity("date",o),r.$setValidity("min",n),r.$setValidity("max",a),o&&(r.$dateValue=t),"string"===c.dateType?i(t,c.modelDateFormat||c.dateFormat):"number"===c.dateType?r.$dateValue.getTime():"iso"===c.dateType?r.$dateValue.toISOString():new Date(r.$dateValue)}),r.$formatters.push(function(e){var t;return t=angular.isUndefined(e)||null===e?0/0:angular.isDate(e)?e:"string"===c.dateType?d.parse(e,null,c.modelDateFormat):new Date(e),r.$dateValue=t,r.$dateValue}),r.$render=function(){t.val(!r.$dateValue||isNaN(r.$dateValue.getTime())?"":i(r.$dateValue,c.dateFormat))},e.$on("$destroy",function(){f&&f.destroy(),c=null,f=null})}}}]).provider("datepickerViews",function(){function e(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n}function t(e,t){return(e%t+t)%t}this.defaults={dayFormat:"dd",daySplit:7};this.$get=["$locale","$sce","dateFilter",function(n,r,i){return function(a){var o=a.$scope,s=a.$options,u=n.DATETIME_FORMATS.SHORTDAY,l=u.slice(s.startWeek).concat(u.slice(0,s.startWeek)),c=r.trustAsHtml('<th class="dow text-center">'+l.join('</th><th class="dow text-center">')+"</th>"),f=a.$date||(s.startDate?new Date(s.startDate):new Date),d={year:f.getFullYear(),month:f.getMonth(),date:f.getDate()},p=(6e4*f.getTimezoneOffset(),[{format:s.dayFormat,split:7,steps:{month:1},update:function(e,t){!this.built||t||e.getFullYear()!==d.year||e.getMonth()!==d.month?(angular.extend(d,{year:a.$date.getFullYear(),month:a.$date.getMonth(),date:a.$date.getDate()}),a.$build()):e.getDate()!==d.date&&(d.date=a.$date.getDate(),a.$updateSelected())},build:function(){var n=new Date(d.year,d.month,1),r=n.getTimezoneOffset(),u=new Date(+n-864e5*t(n.getDay()-s.startWeek,7)),l=u.getTimezoneOffset(),f=(new Date).toDateString();l!==r&&(u=new Date(+u+6e4*(l-r)));for(var p,h=[],$=0;42>$;$++)p=new Date(u.getFullYear(),u.getMonth(),u.getDate()+$),h.push({date:p,isToday:p.toDateString()===f,label:i(p,this.format),selected:a.$date&&this.isSelected(p),muted:p.getMonth()!==d.month,disabled:this.isDisabled(p)});o.title=i(n,"MMMM yyyy"),o.showLabels=!0,o.labels=c,o.rows=e(h,this.split),this.built=!0},isSelected:function(e){return a.$date&&e.getFullYear()===a.$date.getFullYear()&&e.getMonth()===a.$date.getMonth()&&e.getDate()===a.$date.getDate()},isDisabled:function(e){var t=e.getTime();if(t<s.minDate||t>s.maxDate)return!0;if(-1!==s.daysOfWeekDisabled.indexOf(e.getDay()))return!0;if(s.disabledDateRanges)for(var n=0;n<s.disabledDateRanges.length;n++)if(t>=s.disabledDateRanges[n].start)return t<=s.disabledDateRanges[n].end?!0:!1;return!1},onKeyDown:function(e){var t,n=a.$date.getTime();37===e.keyCode?t=new Date(n-864e5):38===e.keyCode?t=new Date(n-6048e5):39===e.keyCode?t=new Date(n+864e5):40===e.keyCode&&(t=new Date(n+6048e5)),this.isDisabled(t)||a.select(t,!0)}},{name:"month",format:"MMM",split:4,steps:{year:1},update:function(e){this.built&&e.getFullYear()===d.year?e.getMonth()!==d.month&&(angular.extend(d,{month:a.$date.getMonth(),date:a.$date.getDate()}),a.$updateSelected()):(angular.extend(d,{year:a.$date.getFullYear(),month:a.$date.getMonth(),date:a.$date.getDate()}),a.$build())},build:function(){for(var t,n=(new Date(d.year,0,1),[]),r=0;12>r;r++)t=new Date(d.year,r,1),n.push({date:t,label:i(t,this.format),selected:a.$isSelected(t),disabled:this.isDisabled(t)});o.title=i(t,"yyyy"),o.showLabels=!1,o.rows=e(n,this.split),this.built=!0},isSelected:function(e){return a.$date&&e.getFullYear()===a.$date.getFullYear()&&e.getMonth()===a.$date.getMonth()},isDisabled:function(e){var t=+new Date(e.getFullYear(),e.getMonth()+1,0);return t<s.minDate||e.getTime()>s.maxDate},onKeyDown:function(e){var t=a.$date.getMonth(),n=new Date(a.$date);37===e.keyCode?n.setMonth(t-1):38===e.keyCode?n.setMonth(t-4):39===e.keyCode?n.setMonth(t+1):40===e.keyCode&&n.setMonth(t+4),this.isDisabled(n)||a.select(n,!0)}},{name:"year",format:"yyyy",split:4,steps:{year:12},update:function(e,t){!this.built||t||parseInt(e.getFullYear()/20,10)!==parseInt(d.year/20,10)?(angular.extend(d,{year:a.$date.getFullYear(),month:a.$date.getMonth(),date:a.$date.getDate()}),a.$build()):e.getFullYear()!==d.year&&(angular.extend(d,{year:a.$date.getFullYear(),month:a.$date.getMonth(),date:a.$date.getDate()}),a.$updateSelected())},build:function(){for(var t,n=d.year-d.year%(3*this.split),r=[],s=0;12>s;s++)t=new Date(n+s,0,1),r.push({date:t,label:i(t,this.format),selected:a.$isSelected(t),disabled:this.isDisabled(t)});o.title=r[0].label+"-"+r[r.length-1].label,o.showLabels=!1,o.rows=e(r,this.split),this.built=!0},isSelected:function(e){return a.$date&&e.getFullYear()===a.$date.getFullYear()},isDisabled:function(e){var t=+new Date(e.getFullYear()+1,0,0);return t<s.minDate||e.getTime()>s.maxDate},onKeyDown:function(e){var t=a.$date.getFullYear(),n=new Date(a.$date);37===e.keyCode?n.setYear(t-1):38===e.keyCode?n.setYear(t-4):39===e.keyCode?n.setYear(t+1):40===e.keyCode&&n.setYear(t+4),this.isDisabled(n)||a.select(n,!0)}}]);return{views:s.minView?Array.prototype.slice.call(p,s.minView):p,viewDate:d}}}]}),angular.module("mgcrea.ngStrap.dropdown",["mgcrea.ngStrap.tooltip"]).provider("$dropdown",function(){var e=this.defaults={animation:"am-fade",prefixClass:"dropdown",placement:"bottom-left",template:"dropdown/dropdown.tpl.html",trigger:"click",container:!1,keyboard:!0,html:!1,delay:0};this.$get=["$window","$rootScope","$tooltip",function(t,n,r){function i(t,i){function s(e){return e.target!==t[0]?e.target!==t[0]&&u.hide():void 0}{var u={},l=angular.extend({},e,i);u.$scope=l.scope&&l.scope.$new()||n.$new()}u=r(t,l);var c=t.parent();u.$onKeyDown=function(e){if(/(38|40)/.test(e.keyCode)){e.preventDefault(),e.stopPropagation();var t=angular.element(u.$element[0].querySelectorAll("li:not(.divider) a"));if(t.length){var n;angular.forEach(t,function(e,t){o&&o.call(e,":focus")&&(n=t)}),38===e.keyCode&&n>0?n--:40===e.keyCode&&n<t.length-1?n++:angular.isUndefined(n)&&(n=0),t.eq(n)[0].focus()}}};var f=u.show;u.show=function(){f(),setTimeout(function(){l.keyboard&&u.$element.on("keydown",u.$onKeyDown),a.on("click",s)}),c.hasClass("dropdown")&&c.addClass("open")};var d=u.hide;return u.hide=function(){l.keyboard&&u.$element.off("keydown",u.$onKeyDown),a.off("click",s),c.hasClass("dropdown")&&c.removeClass("open"),d()},u}var a=angular.element(t.document.body),o=Element.prototype.matchesSelector||Element.prototype.webkitMatchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector;return i}]}).directive("bsDropdown",["$window","$sce","$dropdown",function(e,t,n){return{restrict:"EAC",scope:!0,link:function(e,t,r){var i={scope:e};angular.forEach(["placement","container","delay","trigger","keyboard","html","animation","template"],function(e){angular.isDefined(r[e])&&(i[e]=r[e])}),r.bsDropdown&&e.$watch(r.bsDropdown,function(t){e.content=t},!0),r.bsShow&&e.$watch(r.bsShow,function(e){a&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(",?(dropdown),?")),e===!0?a.show():a.hide())});var a=n(t,i);e.$on("$destroy",function(){a&&a.destroy(),i=null,a=null})}}}]),angular.module("mgcrea.ngStrap.helpers.dateParser",[]).provider("$dateParser",["$localeProvider",function(){function e(){}var t=Date.prototype,n=this.defaults={format:"shortDate",strict:!1};this.$get=["$locale","dateFilter",function(r,i){var a=function(a){function o(e){var t,n=Object.keys(h),r=[],i=[],a=e;for(t=0;t<n.length;t++)if(e.split(n[t]).length>1){var o=a.search(n[t]);e=e.split(n[t]).join(""),h[n[t]]&&(r[o]=h[n[t]])}return angular.forEach(r,function(e){e&&i.push(e)
}),i}function s(e){return e.replace(/\//g,"[\\/]").replace("/-/g","[-]").replace(/\./g,"[.]").replace(/\\s/g,"[\\s]")}function u(e){var t,n=Object.keys(p),r=e;for(t=0;t<n.length;t++)r=r.split(n[t]).join("${"+t+"}");for(t=0;t<n.length;t++)r=r.split("${"+t+"}").join("("+p[n[t]]+")");return e=s(e),new RegExp("^"+r+"$",["i"])}var l,c,f=angular.extend({},n,a),d={},p={sss:"[0-9]{3}",ss:"[0-5][0-9]",s:f.strict?"[1-5]?[0-9]":"[0-9]|[0-5][0-9]",mm:"[0-5][0-9]",m:f.strict?"[1-5]?[0-9]":"[0-9]|[0-5][0-9]",HH:"[01][0-9]|2[0-3]",H:f.strict?"1?[0-9]|2[0-3]":"[01]?[0-9]|2[0-3]",hh:"[0][1-9]|[1][012]",h:f.strict?"[1-9]|1[012]":"0?[1-9]|1[012]",a:"AM|PM",EEEE:r.DATETIME_FORMATS.DAY.join("|"),EEE:r.DATETIME_FORMATS.SHORTDAY.join("|"),dd:"0[1-9]|[12][0-9]|3[01]",d:f.strict?"[1-9]|[1-2][0-9]|3[01]":"0?[1-9]|[1-2][0-9]|3[01]",MMMM:r.DATETIME_FORMATS.MONTH.join("|"),MMM:r.DATETIME_FORMATS.SHORTMONTH.join("|"),MM:"0[1-9]|1[012]",M:f.strict?"[1-9]|1[012]":"0?[1-9]|1[012]",yyyy:"[1]{1}[0-9]{3}|[2]{1}[0-9]{3}",yy:"[0-9]{2}",y:f.strict?"-?(0|[1-9][0-9]{0,3})":"-?0*[0-9]{1,4}"},h={sss:t.setMilliseconds,ss:t.setSeconds,s:t.setSeconds,mm:t.setMinutes,m:t.setMinutes,HH:t.setHours,H:t.setHours,hh:t.setHours,h:t.setHours,EEEE:e,EEE:e,dd:t.setDate,d:t.setDate,a:function(e){var t=this.getHours();return this.setHours(e.match(/pm/i)?t+12:t)},MMMM:function(e){return this.setMonth(r.DATETIME_FORMATS.MONTH.indexOf(e))},MMM:function(e){return this.setMonth(r.DATETIME_FORMATS.SHORTMONTH.indexOf(e))},MM:function(e){return this.setMonth(1*e-1)},M:function(e){return this.setMonth(1*e-1)},yyyy:t.setFullYear,yy:function(e){return this.setFullYear(2e3+1*e)},y:t.setFullYear};return d.init=function(){d.$format=r.DATETIME_FORMATS[f.format]||f.format,l=u(d.$format),c=o(d.$format)},d.isValid=function(e){return angular.isDate(e)?!isNaN(e.getTime()):l.test(e)},d.parse=function(e,t,n){angular.isDate(e)&&(e=i(e,n||d.$format));var r=n?u(n):l,a=n?o(n):c,s=r.exec(e);if(!s)return!1;for(var f=t||new Date(0,0,1),p=0;p<s.length-1;p++)a[p]&&a[p].call(f,s[p+1]);return f},d.init(),d};return a}]}]),angular.module("mgcrea.ngStrap.helpers.debounce",[]).constant("debounce",function(e,t,n){var r,i,a,o,s;return function(){a=this,i=arguments,o=new Date;var u=function(){var l=new Date-o;t>l?r=setTimeout(u,t-l):(r=null,n||(s=e.apply(a,i)))},l=n&&!r;return r||(r=setTimeout(u,t)),l&&(s=e.apply(a,i)),s}}).constant("throttle",function(e,t,n){var r,i,a,o=null,s=0;n||(n={});var u=function(){s=n.leading===!1?0:new Date,o=null,a=e.apply(r,i)};return function(){var l=new Date;s||n.leading!==!1||(s=l);var c=t-(l-s);return r=this,i=arguments,0>=c?(clearTimeout(o),o=null,s=l,a=e.apply(r,i)):o||n.trailing===!1||(o=setTimeout(u,c)),a}}),angular.module("mgcrea.ngStrap.helpers.dimensions",[]).factory("dimensions",["$document","$window",function(){var t=(angular.element,{}),n=t.nodeName=function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()};t.css=function(t,n,r){var i;return i=t.currentStyle?t.currentStyle[n]:e.getComputedStyle?e.getComputedStyle(t)[n]:t.style[n],r===!0?parseFloat(i)||0:i},t.offset=function(t){var n=t.getBoundingClientRect(),r=t.ownerDocument;return{width:n.width||t.offsetWidth,height:n.height||t.offsetHeight,top:n.top+(e.pageYOffset||r.documentElement.scrollTop)-(r.documentElement.clientTop||0),left:n.left+(e.pageXOffset||r.documentElement.scrollLeft)-(r.documentElement.clientLeft||0)}},t.position=function(e){var i,a,o={top:0,left:0};return"fixed"===t.css(e,"position")?a=e.getBoundingClientRect():(i=r(e),a=t.offset(e),a=t.offset(e),n(i,"html")||(o=t.offset(i)),o.top+=t.css(i,"borderTopWidth",!0),o.left+=t.css(i,"borderLeftWidth",!0)),{width:e.offsetWidth,height:e.offsetHeight,top:a.top-o.top-t.css(e,"marginTop",!0),left:a.left-o.left-t.css(e,"marginLeft",!0)}};var r=function(e){var r=e.ownerDocument,i=e.offsetParent||r;if(n(i,"#document"))return r.documentElement;for(;i&&!n(i,"html")&&"static"===t.css(i,"position");)i=i.offsetParent;return i||r.documentElement};return t.height=function(e,n){var r=e.offsetHeight;return n?r+=t.css(e,"marginTop",!0)+t.css(e,"marginBottom",!0):r-=t.css(e,"paddingTop",!0)+t.css(e,"paddingBottom",!0)+t.css(e,"borderTopWidth",!0)+t.css(e,"borderBottomWidth",!0),r},t.width=function(e,n){var r=e.offsetWidth;return n?r+=t.css(e,"marginLeft",!0)+t.css(e,"marginRight",!0):r-=t.css(e,"paddingLeft",!0)+t.css(e,"paddingRight",!0)+t.css(e,"borderLeftWidth",!0)+t.css(e,"borderRightWidth",!0),r},t}]),angular.module("mgcrea.ngStrap.helpers.parseOptions",[]).provider("$parseOptions",function(){var e=this.defaults={regexp:/^\s*(.*?)(?:\s+as\s+(.*?))?(?:\s+group\s+by\s+(.*))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(.*?)(?:\s+track\s+by\s+(.*?))?$/};this.$get=["$parse","$q",function(t,n){function r(r,i){function a(e,t){return e.map(function(e,n){var r,i,a={};return a[c]=e,r=l(t,a),i=p(t,a)||n,{label:r,value:i}})}var o={},s=angular.extend({},e,i);o.$values=[];var u,l,c,f,d,p,h;return o.init=function(){o.$match=u=r.match(s.regexp),l=t(u[2]||u[1]),c=u[4]||u[6],f=u[5],d=t(u[3]||""),p=t(u[2]?u[1]:c),h=t(u[7])},o.valuesFn=function(e,t){return n.when(h(e,t)).then(function(t){return o.$values=t?a(t,e):{},o.$values})},o.init(),o}return r}]}),angular.version.minor<3&&angular.version.dot<14&&angular.module("ng").factory("$$rAF",["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.mozCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,a=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return a.supported=i,a}]),angular.module("mgcrea.ngStrap.modal",["mgcrea.ngStrap.helpers.dimensions"]).provider("$modal",function(){var e=this.defaults={animation:"am-fade",backdropAnimation:"am-fade",prefixClass:"modal",prefixEvent:"modal",placement:"top",template:"modal/modal.tpl.html",contentTemplate:!1,container:!1,element:null,backdrop:!0,keyboard:!0,html:!1,show:!0};this.$get=["$window","$rootScope","$compile","$q","$templateCache","$http","$animate","$timeout","$sce","dimensions",function(n,r,i,a,o,s,u,l,c){function f(t){function n(e){e.target===e.currentTarget&&("static"===o.backdrop?a.focus():a.hide())}var a={},o=a.$options=angular.extend({},e,t);a.$promise=p(o.template);var s=a.$scope=o.scope&&o.scope.$new()||r.$new();o.element||o.container||(o.container="body"),h(["title","content"],function(e){o[e]&&(s[e]=c.trustAsHtml(o[e]))}),s.$hide=function(){s.$$postDigest(function(){a.hide()})},s.$show=function(){s.$$postDigest(function(){a.show()})},s.$toggle=function(){s.$$postDigest(function(){a.toggle()})},o.contentTemplate&&(a.$promise=a.$promise.then(function(e){var n=angular.element(e);return p(o.contentTemplate).then(function(e){var r=d('[ng-bind="content"]',n[0]).removeAttr("ng-bind").html(e);return t.template||r.next().remove(),n[0].outerHTML})}));var l,f,y=angular.element('<div class="'+o.prefixClass+'-backdrop"/>');return a.$promise.then(function(e){angular.isObject(e)&&(e=e.data),o.html&&(e=e.replace(v,'ng-bind-html="')),e=$.apply(e),l=i(e),a.init()}),a.init=function(){o.show&&s.$$postDigest(function(){a.show()})},a.destroy=function(){f&&(f.remove(),f=null),y&&(y.remove(),y=null),s.$destroy()},a.show=function(){s.$emit(o.prefixEvent+".show.before",a);var e;e=angular.isElement(o.container)?o.container:o.container?d(o.container):null;var t=o.container?null:o.element;f=a.$element=l(s,function(){}),f.css({display:"block"}).addClass(o.placement),o.animation&&(o.backdrop&&y.addClass(o.backdropAnimation),f.addClass(o.animation)),o.backdrop&&u.enter(y,m,null,function(){}),u.enter(f,e,t,function(){s.$emit(o.prefixEvent+".show",a)}),s.$isShown=!0,s.$$phase||s.$root&&s.$root.$$phase||s.$digest();var r=f[0];g(function(){r.focus()}),m.addClass(o.prefixClass+"-open"),o.animation&&m.addClass(o.prefixClass+"-with-"+o.animation),o.backdrop&&(f.on("click",n),y.on("click",n)),o.keyboard&&f.on("keyup",a.$onKeyUp)},a.hide=function(){s.$emit(o.prefixEvent+".hide.before",a),u.leave(f,function(){s.$emit(o.prefixEvent+".hide",a),m.removeClass(o.prefixClass+"-open"),o.animation&&m.removeClass(o.prefixClass+"-with-"+o.animation)}),o.backdrop&&u.leave(y,function(){}),s.$isShown=!1,s.$$phase||s.$root&&s.$root.$$phase||s.$digest(),o.backdrop&&(f.off("click",n),y.off("click",n)),o.keyboard&&f.off("keyup",a.$onKeyUp)},a.toggle=function(){s.$isShown?a.hide():a.show()},a.focus=function(){f[0].focus()},a.$onKeyUp=function(e){27===e.which&&s.$isShown&&(a.hide(),e.stopPropagation())},a}function d(e,n){return angular.element((n||t).querySelectorAll(e))}function p(e){return a.when(o.get(e)||s.get(e)).then(function(t){return angular.isObject(t)?(o.put(e,t.data),t.data):t})}var h=angular.forEach,$=String.prototype.trim,g=n.requestAnimationFrame||n.setTimeout,m=angular.element(n.document.body),v=/ng-bind="/gi;return f}]}).directive("bsModal",["$window","$sce","$modal",function(e,t,n){return{restrict:"EAC",scope:!0,link:function(e,r,i){var a={scope:e,element:r,show:!1};angular.forEach(["template","contentTemplate","placement","backdrop","keyboard","html","container","animation"],function(e){angular.isDefined(i[e])&&(a[e]=i[e])}),angular.forEach(["title","content"],function(n){i[n]&&i.$observe(n,function(r){e[n]=t.trustAsHtml(r)})}),i.bsModal&&e.$watch(i.bsModal,function(t){angular.isObject(t)?angular.extend(e,t):e.content=t},!0);var o=n(a);r.on(i.trigger||"click",o.toggle),e.$on("$destroy",function(){o&&o.destroy(),a=null,o=null})}}}]),angular.module("mgcrea.ngStrap.navbar",[]).provider("$navbar",function(){var e=this.defaults={activeClass:"active",routeAttr:"data-match-route",strict:!1};this.$get=function(){return{defaults:e}}}).directive("bsNavbar",["$window","$location","$navbar",function(e,t,n){var r=n.defaults;return{restrict:"A",link:function(e,n,i){var a=angular.copy(r);angular.forEach(Object.keys(r),function(e){angular.isDefined(i[e])&&(a[e]=i[e])}),e.$watch(function(){return t.path()},function(e){var t=n[0].querySelectorAll("li["+a.routeAttr+"]");angular.forEach(t,function(t){var n=angular.element(t),r=n.attr(a.routeAttr).replace("/","\\/");a.strict&&(r="^"+r+"$");var i=new RegExp(r,["i"]);i.test(e)?n.addClass(a.activeClass):n.removeClass(a.activeClass)})})}}}]),angular.module("mgcrea.ngStrap.popover",["mgcrea.ngStrap.tooltip"]).provider("$popover",function(){var e=this.defaults={animation:"am-fade",customClass:"",container:!1,target:!1,placement:"right",template:"popover/popover.tpl.html",contentTemplate:!1,trigger:"click",keyboard:!0,html:!1,title:"",content:"",delay:0};this.$get=["$tooltip",function(t){function n(n,r){var i=angular.extend({},e,r),a=t(n,i);return i.content&&(a.$scope.content=i.content),a}return n}]}).directive("bsPopover",["$window","$sce","$popover",function(e,t,n){var r=e.requestAnimationFrame||e.setTimeout;return{restrict:"EAC",scope:!0,link:function(e,i,a){var o={scope:e};angular.forEach(["template","contentTemplate","placement","container","target","delay","trigger","keyboard","html","animation","customClass"],function(e){angular.isDefined(a[e])&&(o[e]=a[e])}),angular.forEach(["title","content"],function(n){a[n]&&a.$observe(n,function(i,a){e[n]=t.trustAsHtml(i),angular.isDefined(a)&&r(function(){s&&s.$applyPlacement()})})}),a.bsPopover&&e.$watch(a.bsPopover,function(t,n){angular.isObject(t)?angular.extend(e,t):e.content=t,angular.isDefined(n)&&r(function(){s&&s.$applyPlacement()})},!0),a.bsShow&&e.$watch(a.bsShow,function(e){s&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(",?(popover),?")),e===!0?s.show():s.hide())});var s=n(i,o);e.$on("$destroy",function(){s&&s.destroy(),o=null,s=null})}}}]),angular.module("mgcrea.ngStrap.scrollspy",["mgcrea.ngStrap.helpers.debounce","mgcrea.ngStrap.helpers.dimensions"]).provider("$scrollspy",function(){var e=this.$$spies={},n=this.defaults={debounce:150,throttle:100,offset:100};this.$get=["$window","$document","$rootScope","dimensions","debounce","throttle",function(r,i,a,o,s,u){function l(e,t){return e[0].nodeName&&e[0].nodeName.toLowerCase()===t.toLowerCase()}function c(i){var c=angular.extend({},n,i);c.element||(c.element=p);var h=l(c.element,"body"),$=h?f:c.element,g=h?"window":c.id;if(e[g])return e[g].$$count++,e[g];var m,v,y,b,w,x,k,C,S={},D=S.$trackedElements=[],A=[];return S.init=function(){this.$$count=1,b=s(this.checkPosition,c.debounce),w=u(this.checkPosition,c.throttle),$.on("click",this.checkPositionWithEventLoop),f.on("resize",b),$.on("scroll",w),x=s(this.checkOffsets,c.debounce),m=a.$on("$viewContentLoaded",x),v=a.$on("$includeContentLoaded",x),x(),g&&(e[g]=S)},S.destroy=function(){this.$$count--,this.$$count>0||($.off("click",this.checkPositionWithEventLoop),f.off("resize",b),$.off("scroll",b),m(),v(),g&&delete e[g])},S.checkPosition=function(){if(A.length){if(C=(h?r.pageYOffset:$.prop("scrollTop"))||0,k=Math.max(r.innerHeight,d.prop("clientHeight")),C<A[0].offsetTop&&y!==A[0].target)return S.$activateElement(A[0]);for(var e=A.length;e--;)if(!angular.isUndefined(A[e].offsetTop)&&null!==A[e].offsetTop&&y!==A[e].target&&!(C<A[e].offsetTop||A[e+1]&&C>A[e+1].offsetTop))return S.$activateElement(A[e])}},S.checkPositionWithEventLoop=function(){setTimeout(this.checkPosition,1)},S.$activateElement=function(e){if(y){var t=S.$getTrackedElement(y);t&&(t.source.removeClass("active"),l(t.source,"li")&&l(t.source.parent().parent(),"li")&&t.source.parent().parent().removeClass("active"))}y=e.target,e.source.addClass("active"),l(e.source,"li")&&l(e.source.parent().parent(),"li")&&e.source.parent().parent().addClass("active")},S.$getTrackedElement=function(e){return D.filter(function(t){return t.target===e})[0]},S.checkOffsets=function(){angular.forEach(D,function(e){var n=t.querySelector(e.target);e.offsetTop=n?o.offset(n).top:null,c.offset&&null!==e.offsetTop&&(e.offsetTop-=1*c.offset)}),A=D.filter(function(e){return null!==e.offsetTop}).sort(function(e,t){return e.offsetTop-t.offsetTop}),b()},S.trackElement=function(e,t){D.push({target:e,source:t})},S.untrackElement=function(e,t){for(var n,r=D.length;r--;)if(D[r].target===e&&D[r].source===t){n=r;break}D=D.splice(n,1)},S.activate=function(e){D[e].addClass("active")},S.init(),S}var f=angular.element(r),d=angular.element(i.prop("documentElement")),p=angular.element(r.document.body);return c}]}).directive("bsScrollspy",["$rootScope","debounce","dimensions","$scrollspy",function(e,t,n,r){return{restrict:"EAC",link:function(e,t,n){var i={scope:e};angular.forEach(["offset","target"],function(e){angular.isDefined(n[e])&&(i[e]=n[e])});var a=r(i);a.trackElement(i.target,t),e.$on("$destroy",function(){a&&(a.untrackElement(i.target,t),a.destroy()),i=null,a=null})}}}]).directive("bsScrollspyList",["$rootScope","debounce","dimensions","$scrollspy",function(){return{restrict:"A",compile:function(e){var t=e[0].querySelectorAll("li > a[href]");angular.forEach(t,function(e){var t=angular.element(e);t.parent().attr("bs-scrollspy","").attr("data-target",t.attr("href"))})}}}]),angular.module("mgcrea.ngStrap.select",["mgcrea.ngStrap.tooltip","mgcrea.ngStrap.helpers.parseOptions"]).provider("$select",function(){var e=this.defaults={animation:"am-fade",prefixClass:"select",prefixEvent:"$select",placement:"bottom-left",template:"select/select.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,multiple:!1,allNoneButtons:!1,sort:!0,caretHtml:'&nbsp;<span class="caret"></span>',placeholder:"Choose among the following...",maxLength:3,maxLengthHtml:"selected",iconCheckmark:"glyphicon glyphicon-ok"};this.$get=["$window","$document","$rootScope","$tooltip",function(t,n,r,i){function a(t,n,r){var a={},o=angular.extend({},e,r);a=i(t,o);var u=a.$scope;u.$matches=[],u.$activeIndex=0,u.$isMultiple=o.multiple,u.$showAllNoneButtons=o.allNoneButtons&&o.multiple,u.$iconCheckmark=o.iconCheckmark,u.$activate=function(e){u.$$postDigest(function(){a.activate(e)})},u.$select=function(e){u.$$postDigest(function(){a.select(e)})},u.$isVisible=function(){return a.$isVisible()},u.$isActive=function(e){return a.$isActive(e)},u.$selectAll=function(){for(var e=0;e<u.$matches.length;e++)u.$isActive(e)||u.$select(e)},u.$selectNone=function(){for(var e=0;e<u.$matches.length;e++)u.$isActive(e)&&u.$select(e)},a.update=function(e){u.$matches=e,a.$updateActiveIndex()},a.activate=function(e){return o.multiple?(u.$activeIndex.sort(),a.$isActive(e)?u.$activeIndex.splice(u.$activeIndex.indexOf(e),1):u.$activeIndex.push(e),o.sort&&u.$activeIndex.sort()):u.$activeIndex=e,u.$activeIndex},a.select=function(e){var t=u.$matches[e].value;u.$apply(function(){a.activate(e),o.multiple?n.$setViewValue(u.$activeIndex.map(function(e){return u.$matches[e].value})):(n.$setViewValue(t),a.hide())}),u.$emit(o.prefixEvent+".select",t,e)},a.$updateActiveIndex=function(){n.$modelValue&&u.$matches.length?u.$activeIndex=o.multiple&&angular.isArray(n.$modelValue)?n.$modelValue.map(function(e){return a.$getIndex(e)}):a.$getIndex(n.$modelValue):u.$activeIndex>=u.$matches.length&&(u.$activeIndex=o.multiple?[]:0)},a.$isVisible=function(){return o.minLength&&n?u.$matches.length&&n.$viewValue.length>=o.minLength:u.$matches.length},a.$isActive=function(e){return o.multiple?-1!==u.$activeIndex.indexOf(e):u.$activeIndex===e},a.$getIndex=function(e){var t=u.$matches.length,n=t;if(t){for(n=t;n--&&u.$matches[n].value!==e;);if(!(0>n))return n}},a.$onMouseDown=function(e){if(e.preventDefault(),e.stopPropagation(),s){var t=angular.element(e.target);t.triggerHandler("click")}},a.$onKeyDown=function(e){if(/(9|13|38|40)/.test(e.keyCode)){if(e.preventDefault(),e.stopPropagation(),!o.multiple&&(13===e.keyCode||9===e.keyCode))return a.select(u.$activeIndex);38===e.keyCode&&u.$activeIndex>0?u.$activeIndex--:40===e.keyCode&&u.$activeIndex<u.$matches.length-1?u.$activeIndex++:angular.isUndefined(u.$activeIndex)&&(u.$activeIndex=0),u.$digest()}};var l=a.show;a.show=function(){l(),o.multiple&&a.$element.addClass("select-multiple"),setTimeout(function(){a.$element.on(s?"touchstart":"mousedown",a.$onMouseDown),o.keyboard&&t.on("keydown",a.$onKeyDown)})};var c=a.hide;return a.hide=function(){a.$element.off(s?"touchstart":"mousedown",a.$onMouseDown),o.keyboard&&t.off("keydown",a.$onKeyDown),c(!0)},a}var o=(angular.element(t.document.body),/(ip(a|o)d|iphone|android)/gi.test(t.navigator.userAgent)),s="createTouch"in t.document&&o;return a.defaults=e,a}]}).directive("bsSelect",["$window","$parse","$q","$select","$parseOptions",function(e,t,n,r,i){var a=r.defaults;return{restrict:"EAC",require:"ngModel",link:function(e,t,n,o){var s={scope:e};if(angular.forEach(["placement","container","delay","trigger","keyboard","html","animation","template","placeholder","multiple","allNoneButtons","maxLength","maxLengthHtml"],function(e){angular.isDefined(n[e])&&(s[e]=n[e])}),"select"===t[0].nodeName.toLowerCase()){var u=t;u.css("display","none"),t=angular.element('<button type="button" class="btn btn-default"></button>'),u.after(t)}var l=i(n.ngOptions),c=r(t,o,s),f=l.$match[7].replace(/\|.+/,"").trim();e.$watch(f,function(){l.valuesFn(e,o).then(function(e){c.update(e),o.$render()})},!0),e.$watch(n.ngModel,function(){c.$updateActiveIndex(),o.$render()},!0),o.$render=function(){var e,r;s.multiple&&angular.isArray(o.$modelValue)?(e=o.$modelValue.map(function(e){return r=c.$getIndex(e),angular.isDefined(r)?c.$scope.$matches[r].label:!1}).filter(angular.isDefined),e=e.length>(s.maxLength||a.maxLength)?e.length+" "+(s.maxLengthHtml||a.maxLengthHtml):e.join(", ")):(r=c.$getIndex(o.$modelValue),e=angular.isDefined(r)?c.$scope.$matches[r].label:!1),t.html((e?e:n.placeholder||a.placeholder)+a.caretHtml)},e.$on("$destroy",function(){c&&c.destroy(),s=null,c=null})}}}]),angular.module("mgcrea.ngStrap.tab",[]).provider("$tab",function(){var e=this.defaults={animation:"am-fade",template:"tab/tab.tpl.html",navClass:"nav-tabs",activeClass:"active"},t=this.controller=function(t,n,r){var i=this;i.$options=angular.copy(e),angular.forEach(["animation","navClass","activeClass"],function(e){angular.isDefined(r[e])&&(i.$options[e]=r[e])}),t.$navClass=i.$options.navClass,t.$activeClass=i.$options.activeClass,i.$panes=t.$panes=[],i.$viewChangeListeners=[],i.$push=function(e){i.$panes.push(e)},i.$panes.$active=0,i.$setActive=t.$setActive=function(e){i.$panes.$active=e,i.$viewChangeListeners.forEach(function(e){e()})}};this.$get=function(){var n={};return n.defaults=e,n.controller=t,n}}).directive("bsTabs",["$window","$animate","$tab",function(e,t,n){var r=n.defaults;return{require:["?ngModel","bsTabs"],transclude:!0,scope:!0,controller:["$scope","$element","$attrs",n.controller],templateUrl:function(e,t){return t.template||r.template},link:function(e,t,n,r){var i=r[0],a=r[1];i&&(a.$viewChangeListeners.push(function(){i.$setViewValue(a.$panes.$active)}),i.$formatters.push(function(e){return a.$setActive(1*e),e}))}}}]).directive("bsPane",["$window","$animate","$sce",function(e,t,n){return{require:["^?ngModel","^bsTabs"],scope:!0,link:function(e,r,i,a){function o(){var n=s.$panes.indexOf(e),i=s.$panes.$active;t[n===i?"addClass":"removeClass"](r,s.$options.activeClass)}var s=(a[0],a[1]);r.addClass("tab-pane"),i.$observe("title",function(t){e.title=n.trustAsHtml(t)}),s.$options.animation&&r.addClass(s.$options.animation),s.$push(e),s.$viewChangeListeners.push(function(){o()}),o()}}}]),angular.module("mgcrea.ngStrap.timepicker",["mgcrea.ngStrap.helpers.dateParser","mgcrea.ngStrap.tooltip"]).provider("$timepicker",function(){var e=this.defaults={animation:"am-fade",prefixClass:"timepicker",placement:"bottom-left",template:"timepicker/timepicker.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,useNative:!0,timeType:"date",timeFormat:"shortTime",modelTimeFormat:null,autoclose:!1,minTime:-1/0,maxTime:+1/0,length:5,hourStep:1,minuteStep:5,iconUp:"glyphicon glyphicon-chevron-up",iconDown:"glyphicon glyphicon-chevron-down",arrowBehavior:"pager"};this.$get=["$window","$document","$rootScope","$sce","$locale","dateFilter","$tooltip",function(t,n,r,i,a,o,s){function u(t,n,r){function i(e,n){if(t[0].createTextRange){var r=t[0].createTextRange();r.collapse(!0),r.moveStart("character",e),r.moveEnd("character",n),r.select()}else t[0].setSelectionRange?t[0].setSelectionRange(e,n):angular.isUndefined(t[0].selectionStart)&&(t[0].selectionStart=e,t[0].selectionEnd=n)}function u(){t[0].focus()}var f=s(t,angular.extend({},e,r)),d=r.scope,p=f.$options,h=f.$scope,$=0,g=n.$dateValue||new Date,m={hour:g.getHours(),meridian:g.getHours()<12,minute:g.getMinutes(),second:g.getSeconds(),millisecond:g.getMilliseconds()},v=a.DATETIME_FORMATS[p.timeFormat]||p.timeFormat,y=/(h+)([:\.])?(m+)[ ]?(a?)/i.exec(v).slice(1);h.$iconUp=p.iconUp,h.$iconDown=p.iconDown,h.$select=function(e,t){f.select(e,t)},h.$moveIndex=function(e,t){f.$moveIndex(e,t)},h.$switchMeridian=function(e){f.switchMeridian(e)},f.update=function(e){angular.isDate(e)&&!isNaN(e.getTime())?(f.$date=e,angular.extend(m,{hour:e.getHours(),minute:e.getMinutes(),second:e.getSeconds(),millisecond:e.getMilliseconds()}),f.$build()):f.$isBuilt||f.$build()},f.select=function(e,t,r){(!n.$dateValue||isNaN(n.$dateValue.getTime()))&&(n.$dateValue=new Date(1970,0,1)),angular.isDate(e)||(e=new Date(e)),0===t?n.$dateValue.setHours(e.getHours()):1===t&&n.$dateValue.setMinutes(e.getMinutes()),n.$setViewValue(n.$dateValue),n.$render(),p.autoclose&&!r&&f.hide(!0)},f.switchMeridian=function(e){var t=(e||n.$dateValue).getHours();n.$dateValue.setHours(12>t?t+12:t-12),n.$setViewValue(n.$dateValue),n.$render()},f.$build=function(){var e,t,n=h.midIndex=parseInt(p.length/2,10),r=[];for(e=0;e<p.length;e++)t=new Date(1970,0,1,m.hour-(n-e)*p.hourStep),r.push({date:t,label:o(t,y[0]),selected:f.$date&&f.$isSelected(t,0),disabled:f.$isDisabled(t,0)});var i,a=[];for(e=0;e<p.length;e++)i=new Date(1970,0,1,0,m.minute-(n-e)*p.minuteStep),a.push({date:i,label:o(i,y[2]),selected:f.$date&&f.$isSelected(i,1),disabled:f.$isDisabled(i,1)});var s=[];for(e=0;e<p.length;e++)s.push([r[e],a[e]]);h.rows=s,h.showAM=!!y[3],h.isAM=(f.$date||r[n].date).getHours()<12,h.timeSeparator=y[1],f.$isBuilt=!0},f.$isSelected=function(e,t){return f.$date?0===t?e.getHours()===f.$date.getHours():1===t?e.getMinutes()===f.$date.getMinutes():void 0:!1},f.$isDisabled=function(e,t){var n;return 0===t?n=e.getTime()+6e4*m.minute:1===t&&(n=e.getTime()+36e5*m.hour),n<1*p.minTime||n>1*p.maxTime},h.$arrowAction=function(e,t){"picker"===p.arrowBehavior?f.$setTimeByStep(e,t):f.$moveIndex(e,t)},f.$setTimeByStep=function(e,t){{var n=new Date(f.$date),r=n.getHours(),i=(o(n,"h").length,n.getMinutes());o(n,"mm").length}0===t?n.setHours(r-parseInt(p.hourStep,10)*e):n.setMinutes(i-parseInt(p.minuteStep,10)*e),f.select(n,t,!0),d.$digest()},f.$moveIndex=function(e,t){var n;0===t?(n=new Date(1970,0,1,m.hour+e*p.length,m.minute),angular.extend(m,{hour:n.getHours()})):1===t&&(n=new Date(1970,0,1,m.hour,m.minute+e*p.length*p.minuteStep),angular.extend(m,{minute:n.getMinutes()})),f.$build()},f.$onMouseDown=function(e){if("input"!==e.target.nodeName.toLowerCase()&&e.preventDefault(),e.stopPropagation(),c){var t=angular.element(e.target);"button"!==t[0].nodeName.toLowerCase()&&(t=t.parent()),t.triggerHandler("click")}},f.$onKeyDown=function(e){if(/(38|37|39|40|13)/.test(e.keyCode)&&!e.shiftKey&&!e.altKey){if(e.preventDefault(),e.stopPropagation(),13===e.keyCode)return f.hide(!0);var t=new Date(f.$date),n=t.getHours(),r=o(t,"h").length,a=t.getMinutes(),s=o(t,"mm").length,u=/(37|39)/.test(e.keyCode),l=2+1*!!y[3];u&&(37===e.keyCode?$=1>$?l-1:$-1:39===e.keyCode&&($=l-1>$?$+1:0));var c=[0,r];0===$?(38===e.keyCode?t.setHours(n-parseInt(p.hourStep,10)):40===e.keyCode&&t.setHours(n+parseInt(p.hourStep,10)),c=[0,r]):1===$?(38===e.keyCode?t.setMinutes(a-parseInt(p.minuteStep,10)):40===e.keyCode&&t.setMinutes(a+parseInt(p.minuteStep,10)),c=[r+1,r+1+s]):2===$&&(u||f.switchMeridian(),c=[r+1+s+1,r+1+s+3]),f.select(t,$,!0),i(c[0],c[1]),d.$digest()}};var b=f.init;f.init=function(){return l&&p.useNative?(t.prop("type","time"),void t.css("-webkit-appearance","textfield")):(c&&(t.prop("type","text"),t.attr("readonly","true"),t.on("click",u)),void b())};var w=f.destroy;f.destroy=function(){l&&p.useNative&&t.off("click",u),w()};var x=f.show;f.show=function(){x(),setTimeout(function(){f.$element.on(c?"touchstart":"mousedown",f.$onMouseDown),p.keyboard&&t.on("keydown",f.$onKeyDown)})};var k=f.hide;return f.hide=function(e){f.$element.off(c?"touchstart":"mousedown",f.$onMouseDown),p.keyboard&&t.off("keydown",f.$onKeyDown),k(e)},f}var l=(angular.element(t.document.body),/(ip(a|o)d|iphone|android)/gi.test(t.navigator.userAgent)),c="createTouch"in t.document&&l;return e.lang||(e.lang=a.id),u.defaults=e,u}]}).directive("bsTimepicker",["$window","$parse","$q","$locale","dateFilter","$timepicker","$dateParser","$timeout",function(e,t,n,r,i,a,o){{var s=a.defaults,u=/(ip(a|o)d|iphone|android)/gi.test(e.navigator.userAgent);e.requestAnimationFrame||e.setTimeout}return{restrict:"EAC",require:"ngModel",link:function(e,t,n,r){var l={scope:e,controller:r};angular.forEach(["placement","container","delay","trigger","keyboard","html","animation","template","autoclose","timeType","timeFormat","modelTimeFormat","useNative","hourStep","minuteStep","length","arrowBehavior"],function(e){angular.isDefined(n[e])&&(l[e]=n[e])}),n.bsShow&&e.$watch(n.bsShow,function(e){c&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(",?(timepicker),?")),e===!0?c.show():c.hide())}),u&&(l.useNative||s.useNative)&&(l.timeFormat="HH:mm");var c=a(t,r,l);l=c.$options;var f=o({format:l.timeFormat,lang:l.lang});angular.forEach(["minTime","maxTime"],function(e){angular.isDefined(n[e])&&n.$observe(e,function(t){c.$options[e]="now"===t?(new Date).setFullYear(1970,0,1):angular.isString(t)&&t.match(/^".+"$/)?+new Date(t.substr(1,t.length-2)):f.parse(t,new Date(1970,0,1,0)),!isNaN(c.$options[e])&&c.$build()})}),e.$watch(n.ngModel,function(){c.update(r.$dateValue)},!0),r.$parsers.unshift(function(e){if(!e)return void r.$setValidity("date",!0);var t=angular.isDate(e)?e:f.parse(e,r.$dateValue);if(!t||isNaN(t.getTime()))r.$setValidity("date",!1);else{var n=t.getTime()>=l.minTime&&t.getTime()<=l.maxTime;r.$setValidity("date",n),n&&(r.$dateValue=t)}return"string"===l.timeType?i(t,l.modelTimeFormat||l.timeFormat):"number"===l.timeType?r.$dateValue.getTime():"iso"===l.timeType?r.$dateValue.toISOString():new Date(r.$dateValue)}),r.$formatters.push(function(e){var t;return t=angular.isUndefined(e)||null===e?0/0:angular.isDate(e)?e:"string"===l.timeType?f.parse(e,null,l.modelTimeFormat):new Date(e),r.$dateValue=t,r.$dateValue}),r.$render=function(){t.val(!r.$dateValue||isNaN(r.$dateValue.getTime())?"":i(r.$dateValue,l.timeFormat))},e.$on("$destroy",function(){c&&c.destroy(),l=null,c=null})}}}]),angular.module("mgcrea.ngStrap.tooltip",["mgcrea.ngStrap.helpers.dimensions"]).provider("$tooltip",function(){var e=this.defaults={animation:"am-fade",customClass:"",prefixClass:"tooltip",prefixEvent:"tooltip",container:!1,target:!1,placement:"top",template:"tooltip/tooltip.tpl.html",contentTemplate:!1,trigger:"hover focus",keyboard:!1,html:!1,show:!1,title:"",type:"",delay:0};this.$get=["$window","$rootScope","$compile","$q","$templateCache","$http","$animate","dimensions","$$rAF",function(n,r,i,a,o,s,u,l,c){function f(t,n){function a(){return"body"===m.container?l.offset(m.target[0]||t[0]):l.position(m.target[0]||t[0])}function o(e,t,n,r){var i,a=e.split("-");switch(a[0]){case"right":i={top:t.top+t.height/2-r/2,left:t.left+t.width};break;case"bottom":i={top:t.top+t.height,left:t.left+t.width/2-n/2};break;case"left":i={top:t.top+t.height/2-r/2,left:t.left-n};break;default:i={top:t.top-r,left:t.left+t.width/2-n/2}}if(!a[1])return i;if("top"===a[0]||"bottom"===a[0])switch(a[1]){case"left":i.left=t.left;break;case"right":i.left=t.left+t.width-n}else if("left"===a[0]||"right"===a[0])switch(a[1]){case"top":i.top=t.top-r;break;case"bottom":i.top=t.top+t.height}return i}var s={},f=t[0].nodeName.toLowerCase(),m=s.$options=angular.extend({},e,n);s.$promise=p(m.template);var v=s.$scope=m.scope&&m.scope.$new()||r.$new();m.delay&&angular.isString(m.delay)&&(m.delay=parseFloat(m.delay)),m.title&&(s.$scope.title=m.title),v.$hide=function(){v.$$postDigest(function(){s.hide()})},v.$show=function(){v.$$postDigest(function(){s.show()})},v.$toggle=function(){v.$$postDigest(function(){s.toggle()})},s.$isShown=v.$isShown=!1;var y,b;m.contentTemplate&&(s.$promise=s.$promise.then(function(e){var t=angular.element(e);return p(m.contentTemplate).then(function(e){var n=d('[ng-bind="content"]',t[0]);return n.length||(n=d('[ng-bind="title"]',t[0])),n.removeAttr("ng-bind").html(e),t[0].outerHTML})}));var w,x,k,C;return s.$promise.then(function(e){angular.isObject(e)&&(e=e.data),m.html&&(e=e.replace(g,'ng-bind-html="')),e=h.apply(e),k=e,w=i(e),s.init()}),s.init=function(){m.delay&&angular.isNumber(m.delay)&&(m.delay={show:m.delay,hide:m.delay}),"self"===m.container?C=t:angular.isElement(m.container)?C=m.container:m.container&&(C=d(m.container));var e=m.trigger.split(" ");angular.forEach(e,function(e){"click"===e?t.on("click",s.toggle):"manual"!==e&&(t.on("hover"===e?"mouseenter":"focus",s.enter),t.on("hover"===e?"mouseleave":"blur",s.leave),"button"===f&&"hover"!==e&&t.on($?"touchstart":"mousedown",s.$onFocusElementMouseDown))}),m.target&&(m.target=angular.isElement(m.target)?m.target:d(m.target)),m.show&&v.$$postDigest(function(){"focus"===m.trigger?t[0].focus():s.show()})},s.destroy=function(){for(var e=m.trigger.split(" "),n=e.length;n--;){var r=e[n];"click"===r?t.off("click",s.toggle):"manual"!==r&&(t.off("hover"===r?"mouseenter":"focus",s.enter),t.off("hover"===r?"mouseleave":"blur",s.leave),"button"===f&&"hover"!==r&&t.off($?"touchstart":"mousedown",s.$onFocusElementMouseDown))}x&&(x.remove(),x=null),clearTimeout(y),v.$destroy()},s.enter=function(){return clearTimeout(y),b="in",m.delay&&m.delay.show?void(y=setTimeout(function(){"in"===b&&s.show()},m.delay.show)):s.show()},s.show=function(){v.$emit(m.prefixEvent+".show.before",s);
var e=m.container?C:null,n=m.container?null:t;x&&x.remove(),x=s.$element=w(v,function(){}),x.css({top:"-9999px",left:"-9999px",display:"block",visibility:"hidden"}).addClass(m.placement),m.animation&&x.addClass(m.animation),m.type&&x.addClass(m.prefixClass+"-"+m.type),m.customClass&&x.addClass(m.customClass),u.enter(x,e,n,function(){v.$emit(m.prefixEvent+".show",s)}),s.$isShown=v.$isShown=!0,v.$$phase||v.$root&&v.$root.$$phase||v.$digest(),c(function(){s.$applyPlacement(),x.css({visibility:"visible"})}),m.keyboard&&("focus"!==m.trigger?(s.focus(),x.on("keyup",s.$onKeyUp)):t.on("keyup",s.$onFocusKeyUp))},s.leave=function(){return clearTimeout(y),b="out",m.delay&&m.delay.hide?void(y=setTimeout(function(){"out"===b&&s.hide()},m.delay.hide)):s.hide()},s.hide=function(e){s.$isShown&&(v.$emit(m.prefixEvent+".hide.before",s),u.leave(x,function(){return v.$emit(m.prefixEvent+".hide",s),e&&"focus"===m.trigger?t[0].blur():void 0}),s.$isShown=v.$isShown=!1,v.$$phase||v.$root&&v.$root.$$phase||v.$digest(),m.keyboard&&null!==x&&x.off("keyup",s.$onKeyUp))},s.toggle=function(){s.$isShown?s.leave():s.enter()},s.focus=function(){x[0].focus()},s.$applyPlacement=function(){if(x){var e=a(),t=x.prop("offsetWidth"),n=x.prop("offsetHeight"),r=o(m.placement,e,t,n);r.top+="px",r.left+="px",x.css(r)}},s.$onKeyUp=function(e){27===e.which&&s.$isShown&&(s.hide(),e.stopPropagation())},s.$onFocusKeyUp=function(e){27===e.which&&(t[0].blur(),e.stopPropagation())},s.$onFocusElementMouseDown=function(e){e.preventDefault(),e.stopPropagation(),s.$isShown?t[0].blur():t[0].focus()},s}function d(e,n){return angular.element((n||t).querySelectorAll(e))}function p(e){return a.when(o.get(e)||s.get(e)).then(function(t){return angular.isObject(t)?(o.put(e,t.data),t.data):t})}var h=String.prototype.trim,$="createTouch"in n.document,g=/ng-bind="/gi;return f}]}).directive("bsTooltip",["$window","$location","$sce","$tooltip","$$rAF",function(e,t,n,r,i){return{restrict:"EAC",scope:!0,link:function(e,t,a){var o={scope:e};angular.forEach(["template","contentTemplate","placement","container","target","delay","trigger","keyboard","html","animation","type","customClass"],function(e){angular.isDefined(a[e])&&(o[e]=a[e])}),angular.forEach(["title"],function(t){a.$observe(t,function(r,a){e[t]=n.trustAsHtml(r),angular.isDefined(a)&&i(function(){s&&s.$applyPlacement()})})}),a.bsTooltip&&e.$watch(a.bsTooltip,function(t,n){angular.isObject(t)?angular.extend(e,t):e.title=t,angular.isDefined(n)&&i(function(){s&&s.$applyPlacement()})},!0),a.bsShow&&e.$watch(a.bsShow,function(e){s&&angular.isDefined(e)&&(angular.isString(e)&&(e=!!e.match(",?(tooltip),?")),e===!0?s.show():s.hide())});var s=r(t,o);e.$on("$destroy",function(){s&&s.destroy(),o=null,s=null})}}}]),angular.module("mgcrea.ngStrap.typeahead",["mgcrea.ngStrap.tooltip","mgcrea.ngStrap.helpers.parseOptions"]).provider("$typeahead",function(){var e=this.defaults={animation:"am-fade",prefixClass:"typeahead",prefixEvent:"$typeahead",placement:"bottom-left",template:"typeahead/typeahead.tpl.html",trigger:"focus",container:!1,keyboard:!0,html:!1,delay:0,minLength:1,filter:"filter",limit:6};this.$get=["$window","$rootScope","$tooltip",function(t,n,r){function i(t,n,i){var a={},o=angular.extend({},e,i);a=r(t,o);var s=i.scope,u=a.$scope;u.$resetMatches=function(){u.$matches=[],u.$activeIndex=0},u.$resetMatches(),u.$activate=function(e){u.$$postDigest(function(){a.activate(e)})},u.$select=function(e){u.$$postDigest(function(){a.select(e)})},u.$isVisible=function(){return a.$isVisible()},a.update=function(e){u.$matches=e,u.$activeIndex>=e.length&&(u.$activeIndex=0)},a.activate=function(e){u.$activeIndex=e},a.select=function(e){var t=u.$matches[e].value;n.$setViewValue(t),n.$render(),u.$resetMatches(),s&&s.$digest(),u.$emit(o.prefixEvent+".select",t,e)},a.$isVisible=function(){return o.minLength&&n?u.$matches.length&&angular.isString(n.$viewValue)&&n.$viewValue.length>=o.minLength:!!u.$matches.length},a.$getIndex=function(e){var t=u.$matches.length,n=t;if(t){for(n=t;n--&&u.$matches[n].value!==e;);if(!(0>n))return n}},a.$onMouseDown=function(e){e.preventDefault(),e.stopPropagation()},a.$onKeyDown=function(e){/(38|40|13)/.test(e.keyCode)&&(a.$isVisible()&&(e.preventDefault(),e.stopPropagation()),13===e.keyCode&&u.$matches.length?a.select(u.$activeIndex):38===e.keyCode&&u.$activeIndex>0?u.$activeIndex--:40===e.keyCode&&u.$activeIndex<u.$matches.length-1?u.$activeIndex++:angular.isUndefined(u.$activeIndex)&&(u.$activeIndex=0),u.$digest())};var l=a.show;a.show=function(){l(),setTimeout(function(){a.$element.on("mousedown",a.$onMouseDown),o.keyboard&&t.on("keydown",a.$onKeyDown)})};var c=a.hide;return a.hide=function(){a.$element.off("mousedown",a.$onMouseDown),o.keyboard&&t.off("keydown",a.$onKeyDown),c()},a}angular.element(t.document.body);return i.defaults=e,i}]}).directive("bsTypeahead",["$window","$parse","$q","$typeahead","$parseOptions",function(e,t,n,r,i){var a=r.defaults;return{restrict:"EAC",require:"ngModel",link:function(e,t,n,o){var s={scope:e};angular.forEach(["placement","container","delay","trigger","keyboard","html","animation","template","filter","limit","minLength","watchOptions","selectMode"],function(e){angular.isDefined(n[e])&&(s[e]=n[e])});var u=s.filter||a.filter,l=s.limit||a.limit,c=n.ngOptions;u&&(c+=" | "+u+":$viewValue"),l&&(c+=" | limitTo:"+l);var f=i(c),d=r(t,o,s);if(s.watchOptions){var p=f.$match[7].replace(/\|.+/,"").replace(/\(.*\)/g,"").trim();e.$watch(p,function(){f.valuesFn(e,o).then(function(e){d.update(e),o.$render()})},!0)}e.$watch(n.ngModel,function(t){e.$modelValue=t,f.valuesFn(e,o).then(function(e){if(s.selectMode&&!e.length&&t.length>0)return void o.$setViewValue(o.$viewValue.substring(0,o.$viewValue.length-1));e.length>l&&(e=e.slice(0,l));var n=d.$isVisible();n&&d.update(e),(1!==e.length||e[0].value!==t)&&(!n&&d.update(e),o.$render())})}),o.$render=function(){if(o.$isEmpty(o.$viewValue))return t.val("");var e=d.$getIndex(o.$modelValue),n=angular.isDefined(e)?d.$scope.$matches[e].label:o.$viewValue;n=angular.isObject(n)?n.label:n,t.val(n.replace(/<(?:.|\n)*?>/gm,"").trim())},e.$on("$destroy",function(){d&&d.destroy(),s=null,d=null})}}}])}(window,document),function(){"use strict";angular.module("mgcrea.ngStrap.alert").run(["$templateCache",function(e){e.put("alert/alert.tpl.html",'<div class="alert" tabindex="-1" ng-class="[type ? \'alert-\' + type : null]"><button type="button" class="close" ng-if="dismissable" ng-click="$hide()">&times;</button> <strong ng-bind="title"></strong>&nbsp;<span ng-bind-html="content"></span></div>')}]),angular.module("mgcrea.ngStrap.aside").run(["$templateCache",function(e){e.put("aside/aside.tpl.html",'<div class="aside" tabindex="-1" role="dialog"><div class="aside-dialog"><div class="aside-content"><div class="aside-header" ng-show="title"><button type="button" class="close" ng-click="$hide()">&times;</button><h4 class="aside-title" ng-bind="title"></h4></div><div class="aside-body" ng-bind="content"></div><div class="aside-footer"><button type="button" class="btn btn-default" ng-click="$hide()">Close</button></div></div></div></div>')}]),angular.module("mgcrea.ngStrap.datepicker").run(["$templateCache",function(e){e.put("datepicker/datepicker.tpl.html",'<div class="dropdown-menu datepicker" ng-class="\'datepicker-mode-\' + $mode" style="max-width: 320px"><table style="table-layout: fixed; height: 100%; width: 100%"><thead><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$selectPane(-1)"><i class="{{$iconLeft}}"></i></button></th><th colspan="{{ rows[0].length - 2 }}"><button tabindex="-1" type="button" class="btn btn-default btn-block text-strong" ng-click="$toggleMode()"><strong style="text-transform: capitalize" ng-bind="title"></strong></button></th><th><button tabindex="-1" type="button" class="btn btn-default pull-right" ng-click="$selectPane(+1)"><i class="{{$iconRight}}"></i></button></th></tr><tr ng-show="showLabels" ng-bind-html="labels"></tr></thead><tbody><tr ng-repeat="(i, row) in rows" height="{{ 100 / rows.length }}%"><td class="text-center" ng-repeat="(j, el) in row"><button tabindex="-1" type="button" class="btn btn-default" style="width: 100%" ng-class="{\'btn-primary\': el.selected, \'btn-info btn-today\': el.isToday && !el.selected}" ng-click="$select(el.date)" ng-disabled="el.disabled"><span ng-class="{\'text-muted\': el.muted}" ng-bind="el.label"></span></button></td></tr></tbody></table></div>')}]),angular.module("mgcrea.ngStrap.dropdown").run(["$templateCache",function(e){e.put("dropdown/dropdown.tpl.html",'<ul tabindex="-1" class="dropdown-menu" role="menu"><li role="presentation" ng-class="{divider: item.divider}" ng-repeat="item in content"><a role="menuitem" tabindex="-1" ng-href="{{item.href}}" ng-if="!item.divider && item.href" target="{{item.target || \'\'}}" ng-bind="item.text"></a> <a role="menuitem" tabindex="-1" href="javascript:void(0)" ng-if="!item.divider && item.click" ng-click="$eval(item.click);$hide()" ng-bind="item.text"></a></li></ul>')}]),angular.module("mgcrea.ngStrap.modal").run(["$templateCache",function(e){e.put("modal/modal.tpl.html",'<div class="modal" tabindex="-1" role="dialog"><div class="modal-dialog"><div class="modal-content"><div class="modal-header" ng-show="title"><button type="button" class="close" ng-click="$hide()">&times;</button><h4 class="modal-title" ng-bind="title"></h4></div><div class="modal-body" ng-bind="content"></div><div class="modal-footer"><button type="button" class="btn btn-default" ng-click="$hide()">Close</button></div></div></div></div>')}]),angular.module("mgcrea.ngStrap.popover").run(["$templateCache",function(e){e.put("popover/popover.tpl.html",'<div class="popover"><div class="arrow"></div><h3 class="popover-title" ng-bind="title" ng-show="title"></h3><div class="popover-content" ng-bind="content"></div></div>')}]),angular.module("mgcrea.ngStrap.select").run(["$templateCache",function(e){e.put("select/select.tpl.html",'<ul tabindex="-1" class="select dropdown-menu" ng-show="$isVisible()" role="select"><li ng-if="$showAllNoneButtons"><div class="btn-group" style="margin-bottom: 5px; margin-left: 5px"><button class="btn btn-default btn-xs" ng-click="$selectAll()">All</button> <button class="btn btn-default btn-xs" ng-click="$selectNone()">None</button></div></li><li role="presentation" ng-repeat="match in $matches" ng-class="{active: $isActive($index)}"><a style="cursor: default" role="menuitem" tabindex="-1" ng-click="$select($index, $event)"><span ng-bind="match.label"></span> <i class="{{$iconCheckmark}} pull-right" ng-if="$isMultiple && $isActive($index)"></i></a></li></ul>')}]),angular.module("mgcrea.ngStrap.tab").run(["$templateCache",function(e){e.put("tab/tab.tpl.html",'<ul class="nav" ng-class="$navClass" role="tablist"><li ng-repeat="$pane in $panes" ng-class="$index == $panes.$active ? $activeClass : \'\'"><a role="tab" data-toggle="tab" ng-click="$setActive($index)" data-index="{{ $index }}" ng-bind-html="$pane.title"></a></li></ul><div ng-transclude class="tab-content"></div>')}]),angular.module("mgcrea.ngStrap.timepicker").run(["$templateCache",function(e){e.put("timepicker/timepicker.tpl.html",'<div class="dropdown-menu timepicker" style="min-width: 0px;width: auto"><table height="100%"><thead><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 0)"><i class="{{ $iconUp }}"></i></button></th><th>&nbsp;</th><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(-1, 1)"><i class="{{ $iconUp }}"></i></button></th></tr></thead><tbody><tr ng-repeat="(i, row) in rows"><td class="text-center"><button tabindex="-1" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[0].selected}" ng-click="$select(row[0].date, 0)" ng-disabled="row[0].disabled"><span ng-class="{\'text-muted\': row[0].muted}" ng-bind="row[0].label"></span></button></td><td><span ng-bind="i == midIndex ? timeSeparator : \' \'"></span></td><td class="text-center"><button tabindex="-1" ng-if="row[1].date" style="width: 100%" type="button" class="btn btn-default" ng-class="{\'btn-primary\': row[1].selected}" ng-click="$select(row[1].date, 1)" ng-disabled="row[1].disabled"><span ng-class="{\'text-muted\': row[1].muted}" ng-bind="row[1].label"></span></button></td><td ng-if="showAM">&nbsp;</td><td ng-if="showAM"><button tabindex="-1" ng-show="i == midIndex - !isAM * 1" style="width: 100%" type="button" ng-class="{\'btn-primary\': !!isAM}" class="btn btn-default" ng-click="$switchMeridian()" ng-disabled="el.disabled">AM</button> <button tabindex="-1" ng-show="i == midIndex + 1 - !isAM * 1" style="width: 100%" type="button" ng-class="{\'btn-primary\': !isAM}" class="btn btn-default" ng-click="$switchMeridian()" ng-disabled="el.disabled">PM</button></td></tr></tbody><tfoot><tr class="text-center"><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 0)"><i class="{{ $iconDown }}"></i></button></th><th>&nbsp;</th><th><button tabindex="-1" type="button" class="btn btn-default pull-left" ng-click="$arrowAction(1, 1)"><i class="{{ $iconDown }}"></i></button></th></tr></tfoot></table></div>')}]),angular.module("mgcrea.ngStrap.typeahead").run(["$templateCache",function(e){e.put("typeahead/typeahead.tpl.html",'<ul tabindex="-1" class="typeahead dropdown-menu" ng-show="$isVisible()" role="select"><li role="presentation" ng-repeat="match in $matches" ng-class="{active: $index == $activeIndex}"><a role="menuitem" tabindex="-1" ng-click="$select($index, $event)" ng-bind="match.label"></a></li></ul>')}]),angular.module("mgcrea.ngStrap.tooltip").run(["$templateCache",function(e){e.put("tooltip/tooltip.tpl.html",'<div class="tooltip in" ng-show="title"><div class="tooltip-arrow"></div><div class="tooltip-inner" ng-bind="title"></div></div>')}])}(window,document),function(){function e(e,t,n){for(var r=(n||0)-1,i=e?e.length:0;++r<i;)if(e[r]===t)return r;return-1}function t(t,n){var r=typeof n;if(t=t.cache,"boolean"==r||null==n)return t[n]?0:-1;"number"!=r&&"string"!=r&&(r="object");var i="number"==r?n:m+n;return t=(t=t[r])&&t[i],"object"==r?t&&e(t,n)>-1?0:-1:t?0:-1}function n(e){var t=this.cache,n=typeof e;if("boolean"==n||null==e)t[e]=!0;else{"number"!=n&&"string"!=n&&(n="object");var r="number"==n?e:m+e,i=t[n]||(t[n]={});"object"==n?(i[r]||(i[r]=[])).push(e):i[r]=!0}}function r(e){return e.charCodeAt(0)}function i(e,t){for(var n=e.criteria,r=t.criteria,i=-1,a=n.length;++i<a;){var o=n[i],s=r[i];if(o!==s){if(o>s||"undefined"==typeof o)return 1;if(s>o||"undefined"==typeof s)return-1}}return e.index-t.index}function a(e){var t=-1,r=e.length,i=e[0],a=e[r/2|0],o=e[r-1];if(i&&"object"==typeof i&&a&&"object"==typeof a&&o&&"object"==typeof o)return!1;var s=u();s["false"]=s["null"]=s["true"]=s.undefined=!1;var l=u();for(l.array=e,l.cache=s,l.push=n;++t<r;)l.push(e[t]);return l}function o(e){return"\\"+Y[e]}function s(){return h.pop()||[]}function u(){return $.pop()||{array:null,cache:null,criteria:null,"false":!1,index:0,"null":!1,number:null,object:null,push:null,string:null,"true":!1,undefined:!1,value:null}}function l(e){e.length=0,h.length<y&&h.push(e)}function c(e){var t=e.cache;t&&c(t),e.array=e.cache=e.criteria=e.object=e.number=e.string=e.value=null,$.length<y&&$.push(e)}function f(e,t,n){t||(t=0),"undefined"==typeof n&&(n=e?e.length:0);for(var r=-1,i=n-t||0,a=Array(0>i?0:i);++r<i;)a[r]=e[t+r];return a}function d(n){function h(e){return e&&"object"==typeof e&&!Xr(e)&&Nr.call(e,"__wrapped__")?e:new $(e)}function $(e,t){this.__chain__=!!t,this.__wrapped__=e}function y(e){function t(){if(r){var e=f(r);Fr.apply(e,arguments)}if(this instanceof t){var a=G(n.prototype),o=n.apply(a,e||arguments);return Mt(o)?o:a}return n.apply(i,e||arguments)}var n=e[0],r=e[2],i=e[4];return Jr(t,e),t}function Y(e,t,n,r,i){if(n){var a=n(e);if("undefined"!=typeof a)return a}var o=Mt(e);if(!o)return e;var u=Ar.call(e);if(!U[u])return e;var c=Gr[u];switch(u){case I:case j:return new c(+e);case R:case L:return new c(e);case H:return a=c(e.source,S.exec(e)),a.lastIndex=e.lastIndex,a}var d=Xr(e);if(t){var p=!r;r||(r=s()),i||(i=s());for(var h=r.length;h--;)if(r[h]==e)return i[h];a=d?c(e.length):{}}else a=d?f(e):ai({},e);return d&&(Nr.call(e,"index")&&(a.index=e.index),Nr.call(e,"input")&&(a.input=e.input)),t?(r.push(e),i.push(a),(d?Qt:ui)(e,function(e,o){a[o]=Y(e,t,n,r,i)}),p&&(l(r),l(i)),a):a}function G(e){return Mt(e)?qr(e):{}}function Q(e,t,n){if("function"!=typeof e)return Xn;if("undefined"==typeof t||!("prototype"in e))return e;var r=e.__bindData__;if("undefined"==typeof r&&(Qr.funcNames&&(r=!e.name),r=r||!Qr.funcDecomp,!r)){var i=Vr.call(e);Qr.funcNames||(r=!D.test(i)),r||(r=M.test(i),Jr(e,r))}if(r===!1||r!==!0&&1&r[1])return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)};case 4:return function(n,r,i,a){return e.call(t,n,r,i,a)}}return Fn(e,t)}function J(e){function t(){var e=u?o:this;if(i){var h=f(i);Fr.apply(h,arguments)}if((a||c)&&(h||(h=f(arguments)),a&&Fr.apply(h,a),c&&h.length<s))return r|=16,J([n,d?r:-4&r,h,null,o,s]);if(h||(h=arguments),l&&(n=e[p]),this instanceof t){e=G(n.prototype);var $=n.apply(e,h);return Mt($)?$:e}return n.apply(e,h)}var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],s=e[5],u=1&r,l=2&r,c=4&r,d=8&r,p=n;return Jr(t,e),t}function X(n,r){var i=-1,o=ut(),s=n?n.length:0,u=s>=v&&o===e,l=[];if(u){var f=a(r);f?(o=t,r=f):u=!1}for(;++i<s;){var d=n[i];o(r,d)<0&&l.push(d)}return u&&c(r),l}function et(e,t,n,r){for(var i=(r||0)-1,a=e?e.length:0,o=[];++i<a;){var s=e[i];if(s&&"object"==typeof s&&"number"==typeof s.length&&(Xr(s)||dt(s))){t||(s=et(s,t,n));var u=-1,l=s.length,c=o.length;for(o.length+=l;++u<l;)o[c++]=s[u]}else n||o.push(s)}return o}function tt(e,t,n,r,i,a){if(n){var o=n(e,t);if("undefined"!=typeof o)return!!o}if(e===t)return 0!==e||1/e==1/t;var u=typeof e,c=typeof t;if(!(e!==e||e&&W[u]||t&&W[c]))return!1;if(null==e||null==t)return e===t;var f=Ar.call(e),d=Ar.call(t);if(f==N&&(f=q),d==N&&(d=q),f!=d)return!1;switch(f){case I:case j:return+e==+t;case R:return e!=+e?t!=+t:0==e?1/e==1/t:e==+t;case H:case L:return e==xr(t)}var p=f==F;if(!p){var h=Nr.call(e,"__wrapped__"),$=Nr.call(t,"__wrapped__");if(h||$)return tt(h?e.__wrapped__:e,$?t.__wrapped__:t,n,r,i,a);if(f!=q)return!1;var g=e.constructor,m=t.constructor;if(g!=m&&!(Tt(g)&&g instanceof g&&Tt(m)&&m instanceof m)&&"constructor"in e&&"constructor"in t)return!1}var v=!i;i||(i=s()),a||(a=s());for(var y=i.length;y--;)if(i[y]==e)return a[y]==t;var b=0;if(o=!0,i.push(e),a.push(t),p){if(y=e.length,b=t.length,o=b==y,o||r)for(;b--;){var w=y,x=t[b];if(r)for(;w--&&!(o=tt(e[w],x,n,r,i,a)););else if(!(o=tt(e[b],x,n,r,i,a)))break}}else si(t,function(t,s,u){return Nr.call(u,s)?(b++,o=Nr.call(e,s)&&tt(e[s],t,n,r,i,a)):void 0}),o&&!r&&si(e,function(e,t,n){return Nr.call(n,t)?o=--b>-1:void 0});return i.pop(),a.pop(),v&&(l(i),l(a)),o}function nt(e,t,n,r,i){(Xr(t)?Qt:ui)(t,function(t,a){var o,s,u=t,l=e[a];if(t&&((s=Xr(t))||li(t))){for(var c=r.length;c--;)if(o=r[c]==t){l=i[c];break}if(!o){var f;n&&(u=n(l,t),(f="undefined"!=typeof u)&&(l=u)),f||(l=s?Xr(l)?l:[]:li(l)?l:{}),r.push(t),i.push(l),f||nt(l,t,n,r,i)}}else n&&(u=n(l,t),"undefined"==typeof u&&(u=t)),"undefined"!=typeof u&&(l=u);e[a]=l})}function rt(e,t){return e+Or(Kr()*(t-e+1))}function it(n,r,i){var o=-1,u=ut(),f=n?n.length:0,d=[],p=!r&&f>=v&&u===e,h=i||p?s():d;if(p){var $=a(h);u=t,h=$}for(;++o<f;){var g=n[o],m=i?i(g,o,n):g;(r?!o||h[h.length-1]!==m:u(h,m)<0)&&((i||p)&&h.push(m),d.push(g))}return p?(l(h.array),c(h)):i&&l(h),d}function at(e){return function(t,n,r){var i={};n=h.createCallback(n,r,3);var a=-1,o=t?t.length:0;if("number"==typeof o)for(;++a<o;){var s=t[a];e(i,s,n(s,a,t),t)}else ui(t,function(t,r,a){e(i,t,n(t,r,a),a)});return i}}function ot(e,t,n,r,i,a){var o=1&t,s=2&t,u=4&t,l=16&t,c=32&t;if(!s&&!Tt(e))throw new kr;l&&!n.length&&(t&=-17,l=n=!1),c&&!r.length&&(t&=-33,c=r=!1);var d=e&&e.__bindData__;if(d&&d!==!0)return d=f(d),d[2]&&(d[2]=f(d[2])),d[3]&&(d[3]=f(d[3])),!o||1&d[1]||(d[4]=i),!o&&1&d[1]&&(t|=8),!u||4&d[1]||(d[5]=a),l&&Fr.apply(d[2]||(d[2]=[]),n),c&&Pr.apply(d[3]||(d[3]=[]),r),d[1]|=t,ot.apply(null,d);var p=1==t||17===t?y:J;return p([e,t,n,r,i,a])}function st(e){return ti[e]}function ut(){var t=(t=h.indexOf)===vn?e:t;return t}function lt(e){return"function"==typeof e&&Er.test(e)}function ct(e){var t,n;return e&&Ar.call(e)==q&&(t=e.constructor,!Tt(t)||t instanceof t)?(si(e,function(e,t){n=t}),"undefined"==typeof n||Nr.call(e,n)):!1}function ft(e){return ni[e]}function dt(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Ar.call(e)==N||!1}function pt(e,t,n,r){return"boolean"!=typeof t&&null!=t&&(r=n,n=t,t=!1),Y(e,t,"function"==typeof n&&Q(n,r,1))}function ht(e,t,n){return Y(e,!0,"function"==typeof t&&Q(t,n,1))}function $t(e,t){var n=G(e);return t?ai(n,t):n}function gt(e,t,n){var r;return t=h.createCallback(t,n,3),ui(e,function(e,n,i){return t(e,n,i)?(r=n,!1):void 0}),r}function mt(e,t,n){var r;return t=h.createCallback(t,n,3),yt(e,function(e,n,i){return t(e,n,i)?(r=n,!1):void 0}),r}function vt(e,t,n){var r=[];si(e,function(e,t){r.push(t,e)});var i=r.length;for(t=Q(t,n,3);i--&&t(r[i--],r[i],e)!==!1;);return e}function yt(e,t,n){var r=ei(e),i=r.length;for(t=Q(t,n,3);i--;){var a=r[i];if(t(e[a],a,e)===!1)break}return e}function bt(e){var t=[];return si(e,function(e,n){Tt(e)&&t.push(n)}),t.sort()}function wt(e,t){return e?Nr.call(e,t):!1}function xt(e){for(var t=-1,n=ei(e),r=n.length,i={};++t<r;){var a=n[t];i[e[a]]=a}return i}function kt(e){return e===!0||e===!1||e&&"object"==typeof e&&Ar.call(e)==I||!1}function Ct(e){return e&&"object"==typeof e&&Ar.call(e)==j||!1}function St(e){return e&&1===e.nodeType||!1}function Dt(e){var t=!0;if(!e)return t;var n=Ar.call(e),r=e.length;return n==F||n==L||n==N||n==q&&"number"==typeof r&&Tt(e.splice)?!r:(ui(e,function(){return t=!1}),t)}function At(e,t,n,r){return tt(e,t,"function"==typeof n&&Q(n,r,2))}function Et(e){return Lr(e)&&!Ur(parseFloat(e))}function Tt(e){return"function"==typeof e}function Mt(e){return!(!e||!W[typeof e])}function Ot(e){return _t(e)&&e!=+e}function Vt(e){return null===e}function _t(e){return"number"==typeof e||e&&"object"==typeof e&&Ar.call(e)==R||!1}function Nt(e){return e&&"object"==typeof e&&Ar.call(e)==H||!1}function Ft(e){return"string"==typeof e||e&&"object"==typeof e&&Ar.call(e)==L||!1}function It(e){return"undefined"==typeof e}function jt(e,t,n){var r={};return t=h.createCallback(t,n,3),ui(e,function(e,n,i){r[n]=t(e,n,i)}),r}function Pt(e){var t=arguments,n=2;if(!Mt(e))return e;if("number"!=typeof t[2]&&(n=t.length),n>3&&"function"==typeof t[n-2])var r=Q(t[--n-1],t[n--],2);else n>2&&"function"==typeof t[n-1]&&(r=t[--n]);for(var i=f(arguments,1,n),a=-1,o=s(),u=s();++a<n;)nt(e,i[a],r,o,u);return l(o),l(u),e}function Rt(e,t,n){var r={};if("function"!=typeof t){var i=[];si(e,function(e,t){i.push(t)}),i=X(i,et(arguments,!0,!1,1));for(var a=-1,o=i.length;++a<o;){var s=i[a];r[s]=e[s]}}else t=h.createCallback(t,n,3),si(e,function(e,n,i){t(e,n,i)||(r[n]=e)});return r}function qt(e){for(var t=-1,n=ei(e),r=n.length,i=hr(r);++t<r;){var a=n[t];i[t]=[a,e[a]]}return i}function Ht(e,t,n){var r={};if("function"!=typeof t)for(var i=-1,a=et(arguments,!0,!1,1),o=Mt(e)?a.length:0;++i<o;){var s=a[i];s in e&&(r[s]=e[s])}else t=h.createCallback(t,n,3),si(e,function(e,n,i){t(e,n,i)&&(r[n]=e)});return r}function Lt(e,t,n,r){var i=Xr(e);if(null==n)if(i)n=[];else{var a=e&&e.constructor,o=a&&a.prototype;n=G(o)}return t&&(t=h.createCallback(t,r,4),(i?Qt:ui)(e,function(e,r,i){return t(n,e,r,i)})),n}function Ut(e){for(var t=-1,n=ei(e),r=n.length,i=hr(r);++t<r;)i[t]=e[n[t]];return i}function Bt(e){for(var t=arguments,n=-1,r=et(t,!0,!1,1),i=t[2]&&t[2][t[1]]===e?1:r.length,a=hr(i);++n<i;)a[n]=e[r[n]];return a}function zt(e,t,n){var r=-1,i=ut(),a=e?e.length:0,o=!1;return n=(0>n?zr(0,a+n):n)||0,Xr(e)?o=i(e,t,n)>-1:"number"==typeof a?o=(Ft(e)?e.indexOf(t,n):i(e,t,n))>-1:ui(e,function(e){return++r>=n?!(o=e===t):void 0}),o}function Wt(e,t,n){var r=!0;t=h.createCallback(t,n,3);var i=-1,a=e?e.length:0;if("number"==typeof a)for(;++i<a&&(r=!!t(e[i],i,e)););else ui(e,function(e,n,i){return r=!!t(e,n,i)});return r}function Yt(e,t,n){var r=[];t=h.createCallback(t,n,3);var i=-1,a=e?e.length:0;if("number"==typeof a)for(;++i<a;){var o=e[i];t(o,i,e)&&r.push(o)}else ui(e,function(e,n,i){t(e,n,i)&&r.push(e)});return r}function Kt(e,t,n){t=h.createCallback(t,n,3);var r=-1,i=e?e.length:0;if("number"!=typeof i){var a;return ui(e,function(e,n,r){return t(e,n,r)?(a=e,!1):void 0}),a}for(;++r<i;){var o=e[r];if(t(o,r,e))return o}}function Gt(e,t,n){var r;return t=h.createCallback(t,n,3),Jt(e,function(e,n,i){return t(e,n,i)?(r=e,!1):void 0}),r}function Qt(e,t,n){var r=-1,i=e?e.length:0;if(t=t&&"undefined"==typeof n?t:Q(t,n,3),"number"==typeof i)for(;++r<i&&t(e[r],r,e)!==!1;);else ui(e,t);return e}function Jt(e,t,n){var r=e?e.length:0;if(t=t&&"undefined"==typeof n?t:Q(t,n,3),"number"==typeof r)for(;r--&&t(e[r],r,e)!==!1;);else{var i=ei(e);r=i.length,ui(e,function(e,n,a){return n=i?i[--r]:--r,t(a[n],n,a)})}return e}function Xt(e,t){var n=f(arguments,2),r=-1,i="function"==typeof t,a=e?e.length:0,o=hr("number"==typeof a?a:0);return Qt(e,function(e){o[++r]=(i?t:e[t]).apply(e,n)}),o}function Zt(e,t,n){var r=-1,i=e?e.length:0;if(t=h.createCallback(t,n,3),"number"==typeof i)for(var a=hr(i);++r<i;)a[r]=t(e[r],r,e);else a=[],ui(e,function(e,n,i){a[++r]=t(e,n,i)});return a}function en(e,t,n){var i=-1/0,a=i;if("function"!=typeof t&&n&&n[t]===e&&(t=null),null==t&&Xr(e))for(var o=-1,s=e.length;++o<s;){var u=e[o];u>a&&(a=u)}else t=null==t&&Ft(e)?r:h.createCallback(t,n,3),Qt(e,function(e,n,r){var o=t(e,n,r);o>i&&(i=o,a=e)});return a}function tn(e,t,n){var i=1/0,a=i;if("function"!=typeof t&&n&&n[t]===e&&(t=null),null==t&&Xr(e))for(var o=-1,s=e.length;++o<s;){var u=e[o];a>u&&(a=u)}else t=null==t&&Ft(e)?r:h.createCallback(t,n,3),Qt(e,function(e,n,r){var o=t(e,n,r);i>o&&(i=o,a=e)});return a}function nn(e,t,n,r){if(!e)return n;var i=arguments.length<3;t=h.createCallback(t,r,4);var a=-1,o=e.length;if("number"==typeof o)for(i&&(n=e[++a]);++a<o;)n=t(n,e[a],a,e);else ui(e,function(e,r,a){n=i?(i=!1,e):t(n,e,r,a)});return n}function rn(e,t,n,r){var i=arguments.length<3;return t=h.createCallback(t,r,4),Jt(e,function(e,r,a){n=i?(i=!1,e):t(n,e,r,a)}),n}function an(e,t,n){return t=h.createCallback(t,n,3),Yt(e,function(e,n,r){return!t(e,n,r)})}function on(e,t,n){if(e&&"number"!=typeof e.length&&(e=Ut(e)),null==t||n)return e?e[rt(0,e.length-1)]:p;var r=sn(e);return r.length=Wr(zr(0,t),r.length),r}function sn(e){var t=-1,n=e?e.length:0,r=hr("number"==typeof n?n:0);return Qt(e,function(e){var n=rt(0,++t);r[t]=r[n],r[n]=e}),r}function un(e){var t=e?e.length:0;return"number"==typeof t?t:ei(e).length}function ln(e,t,n){var r;t=h.createCallback(t,n,3);var i=-1,a=e?e.length:0;if("number"==typeof a)for(;++i<a&&!(r=t(e[i],i,e)););else ui(e,function(e,n,i){return!(r=t(e,n,i))});return!!r}function cn(e,t,n){var r=-1,a=Xr(t),o=e?e.length:0,f=hr("number"==typeof o?o:0);for(a||(t=h.createCallback(t,n,3)),Qt(e,function(e,n,i){var o=f[++r]=u();a?o.criteria=Zt(t,function(t){return e[t]}):(o.criteria=s())[0]=t(e,n,i),o.index=r,o.value=e}),o=f.length,f.sort(i);o--;){var d=f[o];f[o]=d.value,a||l(d.criteria),c(d)}return f}function fn(e){return e&&"number"==typeof e.length?f(e):Ut(e)}function dn(e){for(var t=-1,n=e?e.length:0,r=[];++t<n;){var i=e[t];i&&r.push(i)}return r}function pn(e){return X(e,et(arguments,!0,!0,1))}function hn(e,t,n){var r=-1,i=e?e.length:0;for(t=h.createCallback(t,n,3);++r<i;)if(t(e[r],r,e))return r;return-1}function $n(e,t,n){var r=e?e.length:0;for(t=h.createCallback(t,n,3);r--;)if(t(e[r],r,e))return r;return-1}function gn(e,t,n){var r=0,i=e?e.length:0;if("number"!=typeof t&&null!=t){var a=-1;for(t=h.createCallback(t,n,3);++a<i&&t(e[a],a,e);)r++}else if(r=t,null==r||n)return e?e[0]:p;return f(e,0,Wr(zr(0,r),i))}function mn(e,t,n,r){return"boolean"!=typeof t&&null!=t&&(r=n,n="function"!=typeof t&&r&&r[t]===e?null:t,t=!1),null!=n&&(e=Zt(e,n,r)),et(e,t)}function vn(t,n,r){if("number"==typeof r){var i=t?t.length:0;r=0>r?zr(0,i+r):r||0}else if(r){var a=An(t,n);return t[a]===n?a:-1}return e(t,n,r)}function yn(e,t,n){var r=0,i=e?e.length:0;if("number"!=typeof t&&null!=t){var a=i;for(t=h.createCallback(t,n,3);a--&&t(e[a],a,e);)r++}else r=null==t||n?1:t||r;return f(e,0,Wr(zr(0,i-r),i))}function bn(){for(var n=[],r=-1,i=arguments.length,o=s(),u=ut(),f=u===e,d=s();++r<i;){var p=arguments[r];(Xr(p)||dt(p))&&(n.push(p),o.push(f&&p.length>=v&&a(r?n[r]:d)))}var h=n[0],$=-1,g=h?h.length:0,m=[];e:for(;++$<g;){var y=o[0];if(p=h[$],(y?t(y,p):u(d,p))<0){for(r=i,(y||d).push(p);--r;)if(y=o[r],(y?t(y,p):u(n[r],p))<0)continue e;m.push(p)}}for(;i--;)y=o[i],y&&c(y);return l(o),l(d),m}function wn(e,t,n){var r=0,i=e?e.length:0;if("number"!=typeof t&&null!=t){var a=i;for(t=h.createCallback(t,n,3);a--&&t(e[a],a,e);)r++}else if(r=t,null==r||n)return e?e[i-1]:p;return f(e,zr(0,i-r))}function xn(e,t,n){var r=e?e.length:0;for("number"==typeof n&&(r=(0>n?zr(0,r+n):Wr(n,r-1))+1);r--;)if(e[r]===t)return r;return-1}function kn(e){for(var t=arguments,n=0,r=t.length,i=e?e.length:0;++n<r;)for(var a=-1,o=t[n];++a<i;)e[a]===o&&(jr.call(e,a--,1),i--);return e}function Cn(e,t,n){e=+e||0,n="number"==typeof n?n:+n||1,null==t&&(t=e,e=0);for(var r=-1,i=zr(0,Tr((t-e)/(n||1))),a=hr(i);++r<i;)a[r]=e,e+=n;return a}function Sn(e,t,n){var r=-1,i=e?e.length:0,a=[];for(t=h.createCallback(t,n,3);++r<i;){var o=e[r];t(o,r,e)&&(a.push(o),jr.call(e,r--,1),i--)}return a}function Dn(e,t,n){if("number"!=typeof t&&null!=t){var r=0,i=-1,a=e?e.length:0;for(t=h.createCallback(t,n,3);++i<a&&t(e[i],i,e);)r++}else r=null==t||n?1:zr(0,t);return f(e,r)}function An(e,t,n,r){var i=0,a=e?e.length:i;for(n=n?h.createCallback(n,r,1):Xn,t=n(t);a>i;){var o=i+a>>>1;n(e[o])<t?i=o+1:a=o}return i}function En(){return it(et(arguments,!0,!0))}function Tn(e,t,n,r){return"boolean"!=typeof t&&null!=t&&(r=n,n="function"!=typeof t&&r&&r[t]===e?null:t,t=!1),null!=n&&(n=h.createCallback(n,r,3)),it(e,t,n)}function Mn(e){return X(e,f(arguments,1))}function On(){for(var e=-1,t=arguments.length;++e<t;){var n=arguments[e];if(Xr(n)||dt(n))var r=r?it(X(r,n).concat(X(n,r))):n}return r||[]}function Vn(){for(var e=arguments.length>1?arguments:arguments[0],t=-1,n=e?en(pi(e,"length")):0,r=hr(0>n?0:n);++t<n;)r[t]=pi(e,t);return r}function _n(e,t){var n=-1,r=e?e.length:0,i={};for(t||!r||Xr(e[0])||(t=[]);++n<r;){var a=e[n];t?i[a]=t[n]:a&&(i[a[0]]=a[1])}return i}function Nn(e,t){if(!Tt(t))throw new kr;return function(){return--e<1?t.apply(this,arguments):void 0}}function Fn(e,t){return arguments.length>2?ot(e,17,f(arguments,2),null,t):ot(e,1,null,null,t)}function In(e){for(var t=arguments.length>1?et(arguments,!0,!1,1):bt(e),n=-1,r=t.length;++n<r;){var i=t[n];e[i]=ot(e[i],1,null,null,e)}return e}function jn(e,t){return arguments.length>2?ot(t,19,f(arguments,2),null,e):ot(t,3,null,null,e)}function Pn(){for(var e=arguments,t=e.length;t--;)if(!Tt(e[t]))throw new kr;return function(){for(var t=arguments,n=e.length;n--;)t=[e[n].apply(this,t)];return t[0]}}function Rn(e,t){return t="number"==typeof t?t:+t||e.length,ot(e,4,null,null,null,t)}function qn(e,t,n){var r,i,a,o,s,u,l,c=0,f=!1,d=!0;if(!Tt(e))throw new kr;if(t=zr(0,t)||0,n===!0){var h=!0;d=!1}else Mt(n)&&(h=n.leading,f="maxWait"in n&&(zr(t,n.maxWait)||0),d="trailing"in n?n.trailing:d);var $=function(){var n=t-($i()-o);if(0>=n){i&&Mr(i);var f=l;i=u=l=p,f&&(c=$i(),a=e.apply(s,r),u||i||(r=s=null))}else u=Ir($,n)},g=function(){u&&Mr(u),i=u=l=p,(d||f!==t)&&(c=$i(),a=e.apply(s,r),u||i||(r=s=null))};return function(){if(r=arguments,o=$i(),s=this,l=d&&(u||!h),f===!1)var n=h&&!u;else{i||h||(c=o);var p=f-(o-c),m=0>=p;m?(i&&(i=Mr(i)),c=o,a=e.apply(s,r)):i||(i=Ir(g,p))}return m&&u?u=Mr(u):u||t===f||(u=Ir($,t)),n&&(m=!0,a=e.apply(s,r)),!m||u||i||(r=s=null),a
}}function Hn(e){if(!Tt(e))throw new kr;var t=f(arguments,1);return Ir(function(){e.apply(p,t)},1)}function Ln(e,t){if(!Tt(e))throw new kr;var n=f(arguments,2);return Ir(function(){e.apply(p,n)},t)}function Un(e,t){if(!Tt(e))throw new kr;var n=function(){var r=n.cache,i=t?t.apply(this,arguments):m+arguments[0];return Nr.call(r,i)?r[i]:r[i]=e.apply(this,arguments)};return n.cache={},n}function Bn(e){var t,n;if(!Tt(e))throw new kr;return function(){return t?n:(t=!0,n=e.apply(this,arguments),e=null,n)}}function zn(e){return ot(e,16,f(arguments,1))}function Wn(e){return ot(e,32,null,f(arguments,1))}function Yn(e,t,n){var r=!0,i=!0;if(!Tt(e))throw new kr;return n===!1?r=!1:Mt(n)&&(r="leading"in n?n.leading:r,i="trailing"in n?n.trailing:i),B.leading=r,B.maxWait=t,B.trailing=i,qn(e,t,B)}function Kn(e,t){return ot(t,16,[e])}function Gn(e){return function(){return e}}function Qn(e,t,n){var r=typeof e;if(null==e||"function"==r)return Q(e,t,n);if("object"!=r)return nr(e);var i=ei(e),a=i[0],o=e[a];return 1!=i.length||o!==o||Mt(o)?function(t){for(var n=i.length,r=!1;n--&&(r=tt(t[i[n]],e[i[n]],null,!0)););return r}:function(e){var t=e[a];return o===t&&(0!==o||1/o==1/t)}}function Jn(e){return null==e?"":xr(e).replace(ii,st)}function Xn(e){return e}function Zn(e,t,n){var r=!0,i=t&&bt(t);t&&(n||i.length)||(null==n&&(n=t),a=$,t=e,e=h,i=bt(t)),n===!1?r=!1:Mt(n)&&"chain"in n&&(r=n.chain);var a=e,o=Tt(a);Qt(i,function(n){var i=e[n]=t[n];o&&(a.prototype[n]=function(){var t=this.__chain__,n=this.__wrapped__,o=[n];Fr.apply(o,arguments);var s=i.apply(e,o);if(r||t){if(n===s&&Mt(s))return this;s=new a(s),s.__chain__=t}return s})})}function er(){return n._=Dr,this}function tr(){}function nr(e){return function(t){return t[e]}}function rr(e,t,n){var r=null==e,i=null==t;if(null==n&&("boolean"==typeof e&&i?(n=e,e=1):i||"boolean"!=typeof t||(n=t,i=!0)),r&&i&&(t=1),e=+e||0,i?(t=e,e=0):t=+t||0,n||e%1||t%1){var a=Kr();return Wr(e+a*(t-e+parseFloat("1e-"+((a+"").length-1))),t)}return rt(e,t)}function ir(e,t){if(e){var n=e[t];return Tt(n)?e[t]():n}}function ar(e,t,n){var r=h.templateSettings;e=xr(e||""),n=oi({},n,r);var i,a=oi({},n.imports,r.imports),s=ei(a),u=Ut(a),l=0,c=n.interpolate||T,f="__p += '",d=wr((n.escape||T).source+"|"+c.source+"|"+(c===A?C:T).source+"|"+(n.evaluate||T).source+"|$","g");e.replace(d,function(t,n,r,a,s,u){return r||(r=a),f+=e.slice(l,u).replace(O,o),n&&(f+="' +\n__e("+n+") +\n'"),s&&(i=!0,f+="';\n"+s+";\n__p += '"),r&&(f+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=u+t.length,t}),f+="';\n";var $=n.variable,g=$;g||($="obj",f="with ("+$+") {\n"+f+"\n}\n"),f=(i?f.replace(w,""):f).replace(x,"$1").replace(k,"$1;"),f="function("+$+") {\n"+(g?"":$+" || ("+$+" = {});\n")+"var __t, __p = '', __e = _.escape"+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var m="\n/*\n//# sourceURL="+(n.sourceURL||"/lodash/template/source["+_++ +"]")+"\n*/";try{var v=mr(s,"return "+f+m).apply(p,u)}catch(y){throw y.source=f,y}return t?v(t):(v.source=f,v)}function or(e,t,n){e=(e=+e)>-1?e:0;var r=-1,i=hr(e);for(t=Q(t,n,1);++r<e;)i[r]=t(r);return i}function sr(e){return null==e?"":xr(e).replace(ri,ft)}function ur(e){var t=++g;return xr(null==e?"":e)+t}function lr(e){return e=new $(e),e.__chain__=!0,e}function cr(e,t){return t(e),e}function fr(){return this.__chain__=!0,this}function dr(){return xr(this.__wrapped__)}function pr(){return this.__wrapped__}n=n?Z.defaults(K.Object(),n,Z.pick(K,V)):K;var hr=n.Array,$r=n.Boolean,gr=n.Date,mr=n.Function,vr=n.Math,yr=n.Number,br=n.Object,wr=n.RegExp,xr=n.String,kr=n.TypeError,Cr=[],Sr=br.prototype,Dr=n._,Ar=Sr.toString,Er=wr("^"+xr(Ar).replace(/[.*+?^${}()|[\]\\]/g,"\\$&").replace(/toString| for [^\]]+/g,".*?")+"$"),Tr=vr.ceil,Mr=n.clearTimeout,Or=vr.floor,Vr=mr.prototype.toString,_r=lt(_r=br.getPrototypeOf)&&_r,Nr=Sr.hasOwnProperty,Fr=Cr.push,Ir=n.setTimeout,jr=Cr.splice,Pr=Cr.unshift,Rr=function(){try{var e={},t=lt(t=br.defineProperty)&&t,n=t(e,e,e)&&t}catch(r){}return n}(),qr=lt(qr=br.create)&&qr,Hr=lt(Hr=hr.isArray)&&Hr,Lr=n.isFinite,Ur=n.isNaN,Br=lt(Br=br.keys)&&Br,zr=vr.max,Wr=vr.min,Yr=n.parseInt,Kr=vr.random,Gr={};Gr[F]=hr,Gr[I]=$r,Gr[j]=gr,Gr[P]=mr,Gr[q]=br,Gr[R]=yr,Gr[H]=wr,Gr[L]=xr,$.prototype=h.prototype;var Qr=h.support={};Qr.funcDecomp=!lt(n.WinRTError)&&M.test(d),Qr.funcNames="string"==typeof mr.name,h.templateSettings={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:A,variable:"",imports:{_:h}},qr||(G=function(){function e(){}return function(t){if(Mt(t)){e.prototype=t;var r=new e;e.prototype=null}return r||n.Object()}}());var Jr=Rr?function(e,t){z.value=t,Rr(e,"__bindData__",z)}:tr,Xr=Hr||function(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Ar.call(e)==F||!1},Zr=function(e){var t,n=e,r=[];if(!n)return r;if(!W[typeof e])return r;for(t in n)Nr.call(n,t)&&r.push(t);return r},ei=Br?function(e){return Mt(e)?Br(e):[]}:Zr,ti={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},ni=xt(ti),ri=wr("("+ei(ni).join("|")+")","g"),ii=wr("["+ei(ti).join("")+"]","g"),ai=function(e,t,n){var r,i=e,a=i;if(!i)return a;var o=arguments,s=0,u="number"==typeof n?2:o.length;if(u>3&&"function"==typeof o[u-2])var l=Q(o[--u-1],o[u--],2);else u>2&&"function"==typeof o[u-1]&&(l=o[--u]);for(;++s<u;)if(i=o[s],i&&W[typeof i])for(var c=-1,f=W[typeof i]&&ei(i),d=f?f.length:0;++c<d;)r=f[c],a[r]=l?l(a[r],i[r]):i[r];return a},oi=function(e,t,n){var r,i=e,a=i;if(!i)return a;for(var o=arguments,s=0,u="number"==typeof n?2:o.length;++s<u;)if(i=o[s],i&&W[typeof i])for(var l=-1,c=W[typeof i]&&ei(i),f=c?c.length:0;++l<f;)r=c[l],"undefined"==typeof a[r]&&(a[r]=i[r]);return a},si=function(e,t,n){var r,i=e,a=i;if(!i)return a;if(!W[typeof i])return a;t=t&&"undefined"==typeof n?t:Q(t,n,3);for(r in i)if(t(i[r],r,e)===!1)return a;return a},ui=function(e,t,n){var r,i=e,a=i;if(!i)return a;if(!W[typeof i])return a;t=t&&"undefined"==typeof n?t:Q(t,n,3);for(var o=-1,s=W[typeof i]&&ei(i),u=s?s.length:0;++o<u;)if(r=s[o],t(i[r],r,e)===!1)return a;return a},li=_r?function(e){if(!e||Ar.call(e)!=q)return!1;var t=e.valueOf,n=lt(t)&&(n=_r(t))&&_r(n);return n?e==n||_r(e)==n:ct(e)}:ct,ci=at(function(e,t,n){Nr.call(e,n)?e[n]++:e[n]=1}),fi=at(function(e,t,n){(Nr.call(e,n)?e[n]:e[n]=[]).push(t)}),di=at(function(e,t,n){e[n]=t}),pi=Zt,hi=Yt,$i=lt($i=gr.now)&&$i||function(){return(new gr).getTime()},gi=8==Yr(b+"08")?Yr:function(e,t){return Yr(Ft(e)?e.replace(E,""):e,t||0)};return h.after=Nn,h.assign=ai,h.at=Bt,h.bind=Fn,h.bindAll=In,h.bindKey=jn,h.chain=lr,h.compact=dn,h.compose=Pn,h.constant=Gn,h.countBy=ci,h.create=$t,h.createCallback=Qn,h.curry=Rn,h.debounce=qn,h.defaults=oi,h.defer=Hn,h.delay=Ln,h.difference=pn,h.filter=Yt,h.flatten=mn,h.forEach=Qt,h.forEachRight=Jt,h.forIn=si,h.forInRight=vt,h.forOwn=ui,h.forOwnRight=yt,h.functions=bt,h.groupBy=fi,h.indexBy=di,h.initial=yn,h.intersection=bn,h.invert=xt,h.invoke=Xt,h.keys=ei,h.map=Zt,h.mapValues=jt,h.max=en,h.memoize=Un,h.merge=Pt,h.min=tn,h.omit=Rt,h.once=Bn,h.pairs=qt,h.partial=zn,h.partialRight=Wn,h.pick=Ht,h.pluck=pi,h.property=nr,h.pull=kn,h.range=Cn,h.reject=an,h.remove=Sn,h.rest=Dn,h.shuffle=sn,h.sortBy=cn,h.tap=cr,h.throttle=Yn,h.times=or,h.toArray=fn,h.transform=Lt,h.union=En,h.uniq=Tn,h.values=Ut,h.where=hi,h.without=Mn,h.wrap=Kn,h.xor=On,h.zip=Vn,h.zipObject=_n,h.collect=Zt,h.drop=Dn,h.each=Qt,h.eachRight=Jt,h.extend=ai,h.methods=bt,h.object=_n,h.select=Yt,h.tail=Dn,h.unique=Tn,h.unzip=Vn,Zn(h),h.clone=pt,h.cloneDeep=ht,h.contains=zt,h.escape=Jn,h.every=Wt,h.find=Kt,h.findIndex=hn,h.findKey=gt,h.findLast=Gt,h.findLastIndex=$n,h.findLastKey=mt,h.has=wt,h.identity=Xn,h.indexOf=vn,h.isArguments=dt,h.isArray=Xr,h.isBoolean=kt,h.isDate=Ct,h.isElement=St,h.isEmpty=Dt,h.isEqual=At,h.isFinite=Et,h.isFunction=Tt,h.isNaN=Ot,h.isNull=Vt,h.isNumber=_t,h.isObject=Mt,h.isPlainObject=li,h.isRegExp=Nt,h.isString=Ft,h.isUndefined=It,h.lastIndexOf=xn,h.mixin=Zn,h.noConflict=er,h.noop=tr,h.now=$i,h.parseInt=gi,h.random=rr,h.reduce=nn,h.reduceRight=rn,h.result=ir,h.runInContext=d,h.size=un,h.some=ln,h.sortedIndex=An,h.template=ar,h.unescape=sr,h.uniqueId=ur,h.all=Wt,h.any=ln,h.detect=Kt,h.findWhere=Kt,h.foldl=nn,h.foldr=rn,h.include=zt,h.inject=nn,Zn(function(){var e={};return ui(h,function(t,n){h.prototype[n]||(e[n]=t)}),e}(),!1),h.first=gn,h.last=wn,h.sample=on,h.take=gn,h.head=gn,ui(h,function(e,t){var n="sample"!==t;h.prototype[t]||(h.prototype[t]=function(t,r){var i=this.__chain__,a=e(this.__wrapped__,t,r);return i||null!=t&&(!r||n&&"function"==typeof t)?new $(a,i):a})}),h.VERSION="2.4.1",h.prototype.chain=fr,h.prototype.toString=dr,h.prototype.value=pr,h.prototype.valueOf=pr,Qt(["join","pop","shift"],function(e){var t=Cr[e];h.prototype[e]=function(){var e=this.__chain__,n=t.apply(this.__wrapped__,arguments);return e?new $(n,e):n}}),Qt(["push","reverse","sort","unshift"],function(e){var t=Cr[e];h.prototype[e]=function(){return t.apply(this.__wrapped__,arguments),this}}),Qt(["concat","slice","splice"],function(e){var t=Cr[e];h.prototype[e]=function(){return new $(t.apply(this.__wrapped__,arguments),this.__chain__)}}),h}var p,h=[],$=[],g=0,m=+new Date+"",v=75,y=40,b=" 	\f ﻿\n\r\u2028\u2029 ᠎             　",w=/\b__p \+= '';/g,x=/\b(__p \+=) '' \+/g,k=/(__e\(.*?\)|\b__t\)) \+\n'';/g,C=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,S=/\w*$/,D=/^\s*function[ \n\r\t]+\w/,A=/<%=([\s\S]+?)%>/g,E=RegExp("^["+b+"]*0+(?=.$)"),T=/($^)/,M=/\bthis\b/,O=/['\n\r\t\u2028\u2029\\]/g,V=["Array","Boolean","Date","Function","Math","Number","Object","RegExp","String","_","attachEvent","clearTimeout","isFinite","isNaN","parseInt","setTimeout"],_=0,N="[object Arguments]",F="[object Array]",I="[object Boolean]",j="[object Date]",P="[object Function]",R="[object Number]",q="[object Object]",H="[object RegExp]",L="[object String]",U={};U[P]=!1,U[N]=U[F]=U[I]=U[j]=U[R]=U[q]=U[H]=U[L]=!0;var B={leading:!1,maxWait:0,trailing:!1},z={configurable:!1,enumerable:!1,value:null,writable:!1},W={"boolean":!1,"function":!0,object:!0,number:!1,string:!1,undefined:!1},Y={"\\":"\\","'":"'","\n":"n","\r":"r","	":"t","\u2028":"u2028","\u2029":"u2029"},K=W[typeof window]&&window||this,G=W[typeof exports]&&exports&&!exports.nodeType&&exports,Q=W[typeof module]&&module&&!module.nodeType&&module,J=Q&&Q.exports===G&&G,X=W[typeof global]&&global;!X||X.global!==X&&X.window!==X||(K=X);var Z=d();"function"==typeof define&&"object"==typeof define.amd&&define.amd?(K._=Z,define(function(){return Z})):G&&Q?J?(Q.exports=Z)._=Z:G._=Z:K._=Z}.call(this);
//# sourceMappingURL=data:application/json;base64,